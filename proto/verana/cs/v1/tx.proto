syntax = "proto3";
package verana.cs.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "verana/cs/v1/params.proto";
import "verana/cs/v1/types.proto";

option go_package = "github.com/verana-labs/verana-blockchain/x/credentialschema/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  // CreateCredentialSchema defines a method for creating a new credential schema.
  rpc CreateCredentialSchema(MsgCreateCredentialSchema) returns (MsgCreateCredentialSchemaResponse);
  // UpdateCredentialSchema defines a method for updating a credential schema.
  rpc UpdateCredentialSchema(MsgUpdateCredentialSchema) returns (MsgUpdateCredentialSchemaResponse);
  // ArchiveCredentialSchema defines a method for archiving a credential schema.
  rpc ArchiveCredentialSchema(MsgArchiveCredentialSchema) returns (MsgArchiveCredentialSchemaResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "verana/x/credentialschema/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgCreateCredentialSchema {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 tr_id = 2;
  string json_schema = 3;
  uint32 issuer_grantor_validation_validity_period = 4;
  uint32 verifier_grantor_validation_validity_period = 5;
  uint32 issuer_validation_validity_period = 6;
  uint32 verifier_validation_validity_period = 7;
  uint32 holder_validation_validity_period = 8;
  uint32 issuer_perm_management_mode = 9;
  uint32 verifier_perm_management_mode = 10;
}

message MsgCreateCredentialSchemaResponse {
  uint64 id = 1; // ID of the created credential schema for confirmation
}

message MsgUpdateCredentialSchema {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 id = 2;
  uint32 issuer_grantor_validation_validity_period = 3;
  uint32 verifier_grantor_validation_validity_period = 4;
  uint32 issuer_validation_validity_period = 5;
  uint32 verifier_validation_validity_period = 6;
  uint32 holder_validation_validity_period = 7;
}

message MsgUpdateCredentialSchemaResponse {}

message MsgArchiveCredentialSchema {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 id = 2;
  bool archive = 3;
}

message MsgArchiveCredentialSchemaResponse {}
