syntax = "proto3";
package veranablockchain.cspermission;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "veranablockchain/cspermission/params.proto";
import "veranablockchain/cspermission/types.proto";

option go_package = "github.com/verana-labs/verana-blockchain/x/cspermission/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/verana-labs/verana-blockchain/cspermission/params";
  }
  // ListCSP returns the list of credential schema permissions.
  rpc ListCSP(QueryListCSPRequest) returns (QueryListCSPResponse) {
    option (google.api.http).get = "/dtr/v1/csp/list";
  }
  // GetCSP returns credential schema permission by ID
  rpc GetCSP(QueryGetCSPRequest) returns (QueryGetCSPResponse) {
    option (google.api.http).get = "/dtr/v1/csp/get/{id}";
  }
  // IsAuthorizedIssuer checks if a DID is authorized to issue credentials
  rpc IsAuthorizedIssuer(QueryIsAuthorizedIssuerRequest) returns (QueryIsAuthorizedIssuerResponse) {
    option (google.api.http).get = "/dtr/v1/csp/authorized_issuer";
  }
  rpc IsAuthorizedVerifier(QueryIsAuthorizedVerifierRequest) returns (QueryIsAuthorizedVerifierResponse) {
    option (google.api.http).get = "/dtr/v1/csp/authorized_verifier";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// QueryListCSPRequest is the request type for Query/ListCSP method.
message QueryListCSPRequest {
  uint64 schema_id = 1;
  string creator = 2 [(cosmos_proto.scalar) = "cosmos.AddressString", (gogoproto.nullable) = true];
  string grantee = 3 [(cosmos_proto.scalar) = "cosmos.AddressString", (gogoproto.nullable) = true];
  string did = 4 [(gogoproto.nullable) = true];
  CredentialSchemaPermType type = 5 [(gogoproto.nullable) = true];
  uint32 response_max_size = 6;
}

// QueryListCSPResponse is the response type for Query/ListCSP method.
message QueryListCSPResponse {
  repeated CredentialSchemaPerm permissions = 1 [(gogoproto.nullable) = false];
}

// QueryGetCSPRequest is request type for Query/GetCSP
message QueryGetCSPRequest {
  uint64 id = 1;
}

// QueryGetCSPResponse is response type for Query/GetCSP
message QueryGetCSPResponse {
  CredentialSchemaPerm permission = 1 [(gogoproto.nullable) = false];
}

// Authorization status enum
enum AuthorizationStatus {
  AUTHORIZED = 0;
  FORBIDDEN = 1;
  SESSION_REQUIRED = 2;
}

// QueryIsAuthorizedIssuerRequest is request type for Query/IsAuthorizedIssuer method
message QueryIsAuthorizedIssuerRequest {
  string issuer_did = 1;
  string user_agent_did = 2;
  string wallet_user_agent_did = 3;
  uint64 schema_id = 4;
  string country = 5 [(gogoproto.nullable) = true];
  google.protobuf.Timestamp when = 6 [(gogoproto.nullable) = true, (gogoproto.stdtime) = true];
  uint64 session_id = 7 [(gogoproto.nullable) = true];
}

// QueryIsAuthorizedIssuerResponse is response type for Query/IsAuthorizedIssuer method
message QueryIsAuthorizedIssuerResponse {
  AuthorizationStatus status = 1;
}

message QueryIsAuthorizedVerifierRequest {
  string verifier_did = 1;
  string issuer_did = 2;
  string user_agent_did = 3;
  string wallet_user_agent_did = 4;
  uint64 schema_id = 5;
  string country = 6 [(gogoproto.nullable) = true];
  google.protobuf.Timestamp when = 7 [(gogoproto.nullable) = true, (gogoproto.stdtime) = true];
  uint64 session_id = 8;
}

message QueryIsAuthorizedVerifierResponse {
  AuthorizationStatus status = 1;
}