// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: verana/tr/v1/tx.proto

package trv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName                             = "/verana.tr.v1.Msg/UpdateParams"
	Msg_CreateTrustRegistry_FullMethodName                      = "/verana.tr.v1.Msg/CreateTrustRegistry"
	Msg_AddGovernanceFrameworkDocument_FullMethodName           = "/verana.tr.v1.Msg/AddGovernanceFrameworkDocument"
	Msg_IncreaseActiveGovernanceFrameworkVersion_FullMethodName = "/verana.tr.v1.Msg/IncreaseActiveGovernanceFrameworkVersion"
	Msg_UpdateTrustRegistry_FullMethodName                      = "/verana.tr.v1.Msg/UpdateTrustRegistry"
	Msg_ArchiveTrustRegistry_FullMethodName                     = "/verana.tr.v1.Msg/ArchiveTrustRegistry"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// CreateTrustRegistry creates a new trust registry.
	CreateTrustRegistry(ctx context.Context, in *MsgCreateTrustRegistry, opts ...grpc.CallOption) (*MsgCreateTrustRegistryResponse, error)
	AddGovernanceFrameworkDocument(ctx context.Context, in *MsgAddGovernanceFrameworkDocument, opts ...grpc.CallOption) (*MsgAddGovernanceFrameworkDocumentResponse, error)
	IncreaseActiveGovernanceFrameworkVersion(ctx context.Context, in *MsgIncreaseActiveGovernanceFrameworkVersion, opts ...grpc.CallOption) (*MsgIncreaseActiveGovernanceFrameworkVersionResponse, error)
	UpdateTrustRegistry(ctx context.Context, in *MsgUpdateTrustRegistry, opts ...grpc.CallOption) (*MsgUpdateTrustRegistryResponse, error)
	ArchiveTrustRegistry(ctx context.Context, in *MsgArchiveTrustRegistry, opts ...grpc.CallOption) (*MsgArchiveTrustRegistryResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTrustRegistry(ctx context.Context, in *MsgCreateTrustRegistry, opts ...grpc.CallOption) (*MsgCreateTrustRegistryResponse, error) {
	out := new(MsgCreateTrustRegistryResponse)
	err := c.cc.Invoke(ctx, Msg_CreateTrustRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddGovernanceFrameworkDocument(ctx context.Context, in *MsgAddGovernanceFrameworkDocument, opts ...grpc.CallOption) (*MsgAddGovernanceFrameworkDocumentResponse, error) {
	out := new(MsgAddGovernanceFrameworkDocumentResponse)
	err := c.cc.Invoke(ctx, Msg_AddGovernanceFrameworkDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IncreaseActiveGovernanceFrameworkVersion(ctx context.Context, in *MsgIncreaseActiveGovernanceFrameworkVersion, opts ...grpc.CallOption) (*MsgIncreaseActiveGovernanceFrameworkVersionResponse, error) {
	out := new(MsgIncreaseActiveGovernanceFrameworkVersionResponse)
	err := c.cc.Invoke(ctx, Msg_IncreaseActiveGovernanceFrameworkVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTrustRegistry(ctx context.Context, in *MsgUpdateTrustRegistry, opts ...grpc.CallOption) (*MsgUpdateTrustRegistryResponse, error) {
	out := new(MsgUpdateTrustRegistryResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateTrustRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ArchiveTrustRegistry(ctx context.Context, in *MsgArchiveTrustRegistry, opts ...grpc.CallOption) (*MsgArchiveTrustRegistryResponse, error) {
	out := new(MsgArchiveTrustRegistryResponse)
	err := c.cc.Invoke(ctx, Msg_ArchiveTrustRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// CreateTrustRegistry creates a new trust registry.
	CreateTrustRegistry(context.Context, *MsgCreateTrustRegistry) (*MsgCreateTrustRegistryResponse, error)
	AddGovernanceFrameworkDocument(context.Context, *MsgAddGovernanceFrameworkDocument) (*MsgAddGovernanceFrameworkDocumentResponse, error)
	IncreaseActiveGovernanceFrameworkVersion(context.Context, *MsgIncreaseActiveGovernanceFrameworkVersion) (*MsgIncreaseActiveGovernanceFrameworkVersionResponse, error)
	UpdateTrustRegistry(context.Context, *MsgUpdateTrustRegistry) (*MsgUpdateTrustRegistryResponse, error)
	ArchiveTrustRegistry(context.Context, *MsgArchiveTrustRegistry) (*MsgArchiveTrustRegistryResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateTrustRegistry(context.Context, *MsgCreateTrustRegistry) (*MsgCreateTrustRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrustRegistry not implemented")
}
func (UnimplementedMsgServer) AddGovernanceFrameworkDocument(context.Context, *MsgAddGovernanceFrameworkDocument) (*MsgAddGovernanceFrameworkDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGovernanceFrameworkDocument not implemented")
}
func (UnimplementedMsgServer) IncreaseActiveGovernanceFrameworkVersion(context.Context, *MsgIncreaseActiveGovernanceFrameworkVersion) (*MsgIncreaseActiveGovernanceFrameworkVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseActiveGovernanceFrameworkVersion not implemented")
}
func (UnimplementedMsgServer) UpdateTrustRegistry(context.Context, *MsgUpdateTrustRegistry) (*MsgUpdateTrustRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrustRegistry not implemented")
}
func (UnimplementedMsgServer) ArchiveTrustRegistry(context.Context, *MsgArchiveTrustRegistry) (*MsgArchiveTrustRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveTrustRegistry not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTrustRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTrustRegistry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTrustRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateTrustRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTrustRegistry(ctx, req.(*MsgCreateTrustRegistry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddGovernanceFrameworkDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddGovernanceFrameworkDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddGovernanceFrameworkDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddGovernanceFrameworkDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddGovernanceFrameworkDocument(ctx, req.(*MsgAddGovernanceFrameworkDocument))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IncreaseActiveGovernanceFrameworkVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIncreaseActiveGovernanceFrameworkVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IncreaseActiveGovernanceFrameworkVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_IncreaseActiveGovernanceFrameworkVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IncreaseActiveGovernanceFrameworkVersion(ctx, req.(*MsgIncreaseActiveGovernanceFrameworkVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTrustRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTrustRegistry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTrustRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateTrustRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTrustRegistry(ctx, req.(*MsgUpdateTrustRegistry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ArchiveTrustRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgArchiveTrustRegistry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ArchiveTrustRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ArchiveTrustRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ArchiveTrustRegistry(ctx, req.(*MsgArchiveTrustRegistry))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "verana.tr.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateTrustRegistry",
			Handler:    _Msg_CreateTrustRegistry_Handler,
		},
		{
			MethodName: "AddGovernanceFrameworkDocument",
			Handler:    _Msg_AddGovernanceFrameworkDocument_Handler,
		},
		{
			MethodName: "IncreaseActiveGovernanceFrameworkVersion",
			Handler:    _Msg_IncreaseActiveGovernanceFrameworkVersion_Handler,
		},
		{
			MethodName: "UpdateTrustRegistry",
			Handler:    _Msg_UpdateTrustRegistry_Handler,
		},
		{
			MethodName: "ArchiveTrustRegistry",
			Handler:    _Msg_ArchiveTrustRegistry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "verana/tr/v1/tx.proto",
}
