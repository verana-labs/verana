// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: veranablockchain/cspermission/query.proto

package cspermission

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName               = "/veranablockchain.cspermission.Query/Params"
	Query_ListCSP_FullMethodName              = "/veranablockchain.cspermission.Query/ListCSP"
	Query_GetCSP_FullMethodName               = "/veranablockchain.cspermission.Query/GetCSP"
	Query_IsAuthorizedIssuer_FullMethodName   = "/veranablockchain.cspermission.Query/IsAuthorizedIssuer"
	Query_IsAuthorizedVerifier_FullMethodName = "/veranablockchain.cspermission.Query/IsAuthorizedVerifier"
	Query_GetCSPS_FullMethodName              = "/veranablockchain.cspermission.Query/GetCSPS"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ListCSP returns the list of credential schema permissions.
	ListCSP(ctx context.Context, in *QueryListCSPRequest, opts ...grpc.CallOption) (*QueryListCSPResponse, error)
	// GetCSP returns credential schema permission by ID
	GetCSP(ctx context.Context, in *QueryGetCSPRequest, opts ...grpc.CallOption) (*QueryGetCSPResponse, error)
	// IsAuthorizedIssuer checks if a DID is authorized to issue credentials
	IsAuthorizedIssuer(ctx context.Context, in *QueryIsAuthorizedIssuerRequest, opts ...grpc.CallOption) (*QueryIsAuthorizedIssuerResponse, error)
	IsAuthorizedVerifier(ctx context.Context, in *QueryIsAuthorizedVerifierRequest, opts ...grpc.CallOption) (*QueryIsAuthorizedVerifierResponse, error)
	GetCSPS(ctx context.Context, in *QueryGetCSPSRequest, opts ...grpc.CallOption) (*QueryGetCSPSResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListCSP(ctx context.Context, in *QueryListCSPRequest, opts ...grpc.CallOption) (*QueryListCSPResponse, error) {
	out := new(QueryListCSPResponse)
	err := c.cc.Invoke(ctx, Query_ListCSP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCSP(ctx context.Context, in *QueryGetCSPRequest, opts ...grpc.CallOption) (*QueryGetCSPResponse, error) {
	out := new(QueryGetCSPResponse)
	err := c.cc.Invoke(ctx, Query_GetCSP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsAuthorizedIssuer(ctx context.Context, in *QueryIsAuthorizedIssuerRequest, opts ...grpc.CallOption) (*QueryIsAuthorizedIssuerResponse, error) {
	out := new(QueryIsAuthorizedIssuerResponse)
	err := c.cc.Invoke(ctx, Query_IsAuthorizedIssuer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsAuthorizedVerifier(ctx context.Context, in *QueryIsAuthorizedVerifierRequest, opts ...grpc.CallOption) (*QueryIsAuthorizedVerifierResponse, error) {
	out := new(QueryIsAuthorizedVerifierResponse)
	err := c.cc.Invoke(ctx, Query_IsAuthorizedVerifier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCSPS(ctx context.Context, in *QueryGetCSPSRequest, opts ...grpc.CallOption) (*QueryGetCSPSResponse, error) {
	out := new(QueryGetCSPSResponse)
	err := c.cc.Invoke(ctx, Query_GetCSPS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ListCSP returns the list of credential schema permissions.
	ListCSP(context.Context, *QueryListCSPRequest) (*QueryListCSPResponse, error)
	// GetCSP returns credential schema permission by ID
	GetCSP(context.Context, *QueryGetCSPRequest) (*QueryGetCSPResponse, error)
	// IsAuthorizedIssuer checks if a DID is authorized to issue credentials
	IsAuthorizedIssuer(context.Context, *QueryIsAuthorizedIssuerRequest) (*QueryIsAuthorizedIssuerResponse, error)
	IsAuthorizedVerifier(context.Context, *QueryIsAuthorizedVerifierRequest) (*QueryIsAuthorizedVerifierResponse, error)
	GetCSPS(context.Context, *QueryGetCSPSRequest) (*QueryGetCSPSResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) ListCSP(context.Context, *QueryListCSPRequest) (*QueryListCSPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCSP not implemented")
}
func (UnimplementedQueryServer) GetCSP(context.Context, *QueryGetCSPRequest) (*QueryGetCSPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCSP not implemented")
}
func (UnimplementedQueryServer) IsAuthorizedIssuer(context.Context, *QueryIsAuthorizedIssuerRequest) (*QueryIsAuthorizedIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthorizedIssuer not implemented")
}
func (UnimplementedQueryServer) IsAuthorizedVerifier(context.Context, *QueryIsAuthorizedVerifierRequest) (*QueryIsAuthorizedVerifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthorizedVerifier not implemented")
}
func (UnimplementedQueryServer) GetCSPS(context.Context, *QueryGetCSPSRequest) (*QueryGetCSPSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCSPS not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListCSP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListCSPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListCSP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListCSP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListCSP(ctx, req.(*QueryListCSPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCSP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCSPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCSP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCSP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCSP(ctx, req.(*QueryGetCSPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsAuthorizedIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsAuthorizedIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsAuthorizedIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IsAuthorizedIssuer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsAuthorizedIssuer(ctx, req.(*QueryIsAuthorizedIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsAuthorizedVerifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsAuthorizedVerifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsAuthorizedVerifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IsAuthorizedVerifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsAuthorizedVerifier(ctx, req.(*QueryIsAuthorizedVerifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCSPS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCSPSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCSPS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCSPS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCSPS(ctx, req.(*QueryGetCSPSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "veranablockchain.cspermission.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ListCSP",
			Handler:    _Query_ListCSP_Handler,
		},
		{
			MethodName: "GetCSP",
			Handler:    _Query_GetCSP_Handler,
		},
		{
			MethodName: "IsAuthorizedIssuer",
			Handler:    _Query_IsAuthorizedIssuer_Handler,
		},
		{
			MethodName: "IsAuthorizedVerifier",
			Handler:    _Query_IsAuthorizedVerifier_Handler,
		},
		{
			MethodName: "GetCSPS",
			Handler:    _Query_GetCSPS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "veranablockchain/cspermission/query.proto",
}
