// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package cspermission

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_CredentialSchemaPerm                   protoreflect.MessageDescriptor
	fd_CredentialSchemaPerm_id                protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_schema_id         protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_csp_type          protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_did               protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_grantee           protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_created           protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_created_by        protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_effective_from    protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_effective_until   protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_validation_id     protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_validation_fees   protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_issuance_fees     protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_verification_fees protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_deposit           protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_revoked           protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_revoked_by        protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_terminated        protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_terminated_by     protoreflect.FieldDescriptor
	fd_CredentialSchemaPerm_country           protoreflect.FieldDescriptor
)

func init() {
	file_veranablockchain_cspermission_types_proto_init()
	md_CredentialSchemaPerm = File_veranablockchain_cspermission_types_proto.Messages().ByName("CredentialSchemaPerm")
	fd_CredentialSchemaPerm_id = md_CredentialSchemaPerm.Fields().ByName("id")
	fd_CredentialSchemaPerm_schema_id = md_CredentialSchemaPerm.Fields().ByName("schema_id")
	fd_CredentialSchemaPerm_csp_type = md_CredentialSchemaPerm.Fields().ByName("csp_type")
	fd_CredentialSchemaPerm_did = md_CredentialSchemaPerm.Fields().ByName("did")
	fd_CredentialSchemaPerm_grantee = md_CredentialSchemaPerm.Fields().ByName("grantee")
	fd_CredentialSchemaPerm_created = md_CredentialSchemaPerm.Fields().ByName("created")
	fd_CredentialSchemaPerm_created_by = md_CredentialSchemaPerm.Fields().ByName("created_by")
	fd_CredentialSchemaPerm_effective_from = md_CredentialSchemaPerm.Fields().ByName("effective_from")
	fd_CredentialSchemaPerm_effective_until = md_CredentialSchemaPerm.Fields().ByName("effective_until")
	fd_CredentialSchemaPerm_validation_id = md_CredentialSchemaPerm.Fields().ByName("validation_id")
	fd_CredentialSchemaPerm_validation_fees = md_CredentialSchemaPerm.Fields().ByName("validation_fees")
	fd_CredentialSchemaPerm_issuance_fees = md_CredentialSchemaPerm.Fields().ByName("issuance_fees")
	fd_CredentialSchemaPerm_verification_fees = md_CredentialSchemaPerm.Fields().ByName("verification_fees")
	fd_CredentialSchemaPerm_deposit = md_CredentialSchemaPerm.Fields().ByName("deposit")
	fd_CredentialSchemaPerm_revoked = md_CredentialSchemaPerm.Fields().ByName("revoked")
	fd_CredentialSchemaPerm_revoked_by = md_CredentialSchemaPerm.Fields().ByName("revoked_by")
	fd_CredentialSchemaPerm_terminated = md_CredentialSchemaPerm.Fields().ByName("terminated")
	fd_CredentialSchemaPerm_terminated_by = md_CredentialSchemaPerm.Fields().ByName("terminated_by")
	fd_CredentialSchemaPerm_country = md_CredentialSchemaPerm.Fields().ByName("country")
}

var _ protoreflect.Message = (*fastReflection_CredentialSchemaPerm)(nil)

type fastReflection_CredentialSchemaPerm CredentialSchemaPerm

func (x *CredentialSchemaPerm) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CredentialSchemaPerm)(x)
}

func (x *CredentialSchemaPerm) slowProtoReflect() protoreflect.Message {
	mi := &file_veranablockchain_cspermission_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CredentialSchemaPerm_messageType fastReflection_CredentialSchemaPerm_messageType
var _ protoreflect.MessageType = fastReflection_CredentialSchemaPerm_messageType{}

type fastReflection_CredentialSchemaPerm_messageType struct{}

func (x fastReflection_CredentialSchemaPerm_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CredentialSchemaPerm)(nil)
}
func (x fastReflection_CredentialSchemaPerm_messageType) New() protoreflect.Message {
	return new(fastReflection_CredentialSchemaPerm)
}
func (x fastReflection_CredentialSchemaPerm_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CredentialSchemaPerm
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CredentialSchemaPerm) Descriptor() protoreflect.MessageDescriptor {
	return md_CredentialSchemaPerm
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CredentialSchemaPerm) Type() protoreflect.MessageType {
	return _fastReflection_CredentialSchemaPerm_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CredentialSchemaPerm) New() protoreflect.Message {
	return new(fastReflection_CredentialSchemaPerm)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CredentialSchemaPerm) Interface() protoreflect.ProtoMessage {
	return (*CredentialSchemaPerm)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CredentialSchemaPerm) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_CredentialSchemaPerm_id, value) {
			return
		}
	}
	if x.SchemaId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SchemaId)
		if !f(fd_CredentialSchemaPerm_schema_id, value) {
			return
		}
	}
	if x.CspType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.CspType))
		if !f(fd_CredentialSchemaPerm_csp_type, value) {
			return
		}
	}
	if x.Did != "" {
		value := protoreflect.ValueOfString(x.Did)
		if !f(fd_CredentialSchemaPerm_did, value) {
			return
		}
	}
	if x.Grantee != "" {
		value := protoreflect.ValueOfString(x.Grantee)
		if !f(fd_CredentialSchemaPerm_grantee, value) {
			return
		}
	}
	if x.Created != nil {
		value := protoreflect.ValueOfMessage(x.Created.ProtoReflect())
		if !f(fd_CredentialSchemaPerm_created, value) {
			return
		}
	}
	if x.CreatedBy != "" {
		value := protoreflect.ValueOfString(x.CreatedBy)
		if !f(fd_CredentialSchemaPerm_created_by, value) {
			return
		}
	}
	if x.EffectiveFrom != nil {
		value := protoreflect.ValueOfMessage(x.EffectiveFrom.ProtoReflect())
		if !f(fd_CredentialSchemaPerm_effective_from, value) {
			return
		}
	}
	if x.EffectiveUntil != nil {
		value := protoreflect.ValueOfMessage(x.EffectiveUntil.ProtoReflect())
		if !f(fd_CredentialSchemaPerm_effective_until, value) {
			return
		}
	}
	if x.ValidationId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ValidationId)
		if !f(fd_CredentialSchemaPerm_validation_id, value) {
			return
		}
	}
	if x.ValidationFees != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ValidationFees)
		if !f(fd_CredentialSchemaPerm_validation_fees, value) {
			return
		}
	}
	if x.IssuanceFees != uint64(0) {
		value := protoreflect.ValueOfUint64(x.IssuanceFees)
		if !f(fd_CredentialSchemaPerm_issuance_fees, value) {
			return
		}
	}
	if x.VerificationFees != uint64(0) {
		value := protoreflect.ValueOfUint64(x.VerificationFees)
		if !f(fd_CredentialSchemaPerm_verification_fees, value) {
			return
		}
	}
	if x.Deposit != int64(0) {
		value := protoreflect.ValueOfInt64(x.Deposit)
		if !f(fd_CredentialSchemaPerm_deposit, value) {
			return
		}
	}
	if x.Revoked != nil {
		value := protoreflect.ValueOfMessage(x.Revoked.ProtoReflect())
		if !f(fd_CredentialSchemaPerm_revoked, value) {
			return
		}
	}
	if x.RevokedBy != "" {
		value := protoreflect.ValueOfString(x.RevokedBy)
		if !f(fd_CredentialSchemaPerm_revoked_by, value) {
			return
		}
	}
	if x.Terminated != nil {
		value := protoreflect.ValueOfMessage(x.Terminated.ProtoReflect())
		if !f(fd_CredentialSchemaPerm_terminated, value) {
			return
		}
	}
	if x.TerminatedBy != "" {
		value := protoreflect.ValueOfString(x.TerminatedBy)
		if !f(fd_CredentialSchemaPerm_terminated_by, value) {
			return
		}
	}
	if x.Country != "" {
		value := protoreflect.ValueOfString(x.Country)
		if !f(fd_CredentialSchemaPerm_country, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CredentialSchemaPerm) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "veranablockchain.cspermission.CredentialSchemaPerm.id":
		return x.Id != uint64(0)
	case "veranablockchain.cspermission.CredentialSchemaPerm.schema_id":
		return x.SchemaId != uint64(0)
	case "veranablockchain.cspermission.CredentialSchemaPerm.csp_type":
		return x.CspType != 0
	case "veranablockchain.cspermission.CredentialSchemaPerm.did":
		return x.Did != ""
	case "veranablockchain.cspermission.CredentialSchemaPerm.grantee":
		return x.Grantee != ""
	case "veranablockchain.cspermission.CredentialSchemaPerm.created":
		return x.Created != nil
	case "veranablockchain.cspermission.CredentialSchemaPerm.created_by":
		return x.CreatedBy != ""
	case "veranablockchain.cspermission.CredentialSchemaPerm.effective_from":
		return x.EffectiveFrom != nil
	case "veranablockchain.cspermission.CredentialSchemaPerm.effective_until":
		return x.EffectiveUntil != nil
	case "veranablockchain.cspermission.CredentialSchemaPerm.validation_id":
		return x.ValidationId != uint64(0)
	case "veranablockchain.cspermission.CredentialSchemaPerm.validation_fees":
		return x.ValidationFees != uint64(0)
	case "veranablockchain.cspermission.CredentialSchemaPerm.issuance_fees":
		return x.IssuanceFees != uint64(0)
	case "veranablockchain.cspermission.CredentialSchemaPerm.verification_fees":
		return x.VerificationFees != uint64(0)
	case "veranablockchain.cspermission.CredentialSchemaPerm.deposit":
		return x.Deposit != int64(0)
	case "veranablockchain.cspermission.CredentialSchemaPerm.revoked":
		return x.Revoked != nil
	case "veranablockchain.cspermission.CredentialSchemaPerm.revoked_by":
		return x.RevokedBy != ""
	case "veranablockchain.cspermission.CredentialSchemaPerm.terminated":
		return x.Terminated != nil
	case "veranablockchain.cspermission.CredentialSchemaPerm.terminated_by":
		return x.TerminatedBy != ""
	case "veranablockchain.cspermission.CredentialSchemaPerm.country":
		return x.Country != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.CredentialSchemaPerm"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.CredentialSchemaPerm does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CredentialSchemaPerm) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "veranablockchain.cspermission.CredentialSchemaPerm.id":
		x.Id = uint64(0)
	case "veranablockchain.cspermission.CredentialSchemaPerm.schema_id":
		x.SchemaId = uint64(0)
	case "veranablockchain.cspermission.CredentialSchemaPerm.csp_type":
		x.CspType = 0
	case "veranablockchain.cspermission.CredentialSchemaPerm.did":
		x.Did = ""
	case "veranablockchain.cspermission.CredentialSchemaPerm.grantee":
		x.Grantee = ""
	case "veranablockchain.cspermission.CredentialSchemaPerm.created":
		x.Created = nil
	case "veranablockchain.cspermission.CredentialSchemaPerm.created_by":
		x.CreatedBy = ""
	case "veranablockchain.cspermission.CredentialSchemaPerm.effective_from":
		x.EffectiveFrom = nil
	case "veranablockchain.cspermission.CredentialSchemaPerm.effective_until":
		x.EffectiveUntil = nil
	case "veranablockchain.cspermission.CredentialSchemaPerm.validation_id":
		x.ValidationId = uint64(0)
	case "veranablockchain.cspermission.CredentialSchemaPerm.validation_fees":
		x.ValidationFees = uint64(0)
	case "veranablockchain.cspermission.CredentialSchemaPerm.issuance_fees":
		x.IssuanceFees = uint64(0)
	case "veranablockchain.cspermission.CredentialSchemaPerm.verification_fees":
		x.VerificationFees = uint64(0)
	case "veranablockchain.cspermission.CredentialSchemaPerm.deposit":
		x.Deposit = int64(0)
	case "veranablockchain.cspermission.CredentialSchemaPerm.revoked":
		x.Revoked = nil
	case "veranablockchain.cspermission.CredentialSchemaPerm.revoked_by":
		x.RevokedBy = ""
	case "veranablockchain.cspermission.CredentialSchemaPerm.terminated":
		x.Terminated = nil
	case "veranablockchain.cspermission.CredentialSchemaPerm.terminated_by":
		x.TerminatedBy = ""
	case "veranablockchain.cspermission.CredentialSchemaPerm.country":
		x.Country = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.CredentialSchemaPerm"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.CredentialSchemaPerm does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CredentialSchemaPerm) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "veranablockchain.cspermission.CredentialSchemaPerm.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.cspermission.CredentialSchemaPerm.schema_id":
		value := x.SchemaId
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.cspermission.CredentialSchemaPerm.csp_type":
		value := x.CspType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "veranablockchain.cspermission.CredentialSchemaPerm.did":
		value := x.Did
		return protoreflect.ValueOfString(value)
	case "veranablockchain.cspermission.CredentialSchemaPerm.grantee":
		value := x.Grantee
		return protoreflect.ValueOfString(value)
	case "veranablockchain.cspermission.CredentialSchemaPerm.created":
		value := x.Created
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "veranablockchain.cspermission.CredentialSchemaPerm.created_by":
		value := x.CreatedBy
		return protoreflect.ValueOfString(value)
	case "veranablockchain.cspermission.CredentialSchemaPerm.effective_from":
		value := x.EffectiveFrom
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "veranablockchain.cspermission.CredentialSchemaPerm.effective_until":
		value := x.EffectiveUntil
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "veranablockchain.cspermission.CredentialSchemaPerm.validation_id":
		value := x.ValidationId
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.cspermission.CredentialSchemaPerm.validation_fees":
		value := x.ValidationFees
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.cspermission.CredentialSchemaPerm.issuance_fees":
		value := x.IssuanceFees
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.cspermission.CredentialSchemaPerm.verification_fees":
		value := x.VerificationFees
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.cspermission.CredentialSchemaPerm.deposit":
		value := x.Deposit
		return protoreflect.ValueOfInt64(value)
	case "veranablockchain.cspermission.CredentialSchemaPerm.revoked":
		value := x.Revoked
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "veranablockchain.cspermission.CredentialSchemaPerm.revoked_by":
		value := x.RevokedBy
		return protoreflect.ValueOfString(value)
	case "veranablockchain.cspermission.CredentialSchemaPerm.terminated":
		value := x.Terminated
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "veranablockchain.cspermission.CredentialSchemaPerm.terminated_by":
		value := x.TerminatedBy
		return protoreflect.ValueOfString(value)
	case "veranablockchain.cspermission.CredentialSchemaPerm.country":
		value := x.Country
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.CredentialSchemaPerm"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.CredentialSchemaPerm does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CredentialSchemaPerm) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "veranablockchain.cspermission.CredentialSchemaPerm.id":
		x.Id = value.Uint()
	case "veranablockchain.cspermission.CredentialSchemaPerm.schema_id":
		x.SchemaId = value.Uint()
	case "veranablockchain.cspermission.CredentialSchemaPerm.csp_type":
		x.CspType = (CredentialSchemaPermType)(value.Enum())
	case "veranablockchain.cspermission.CredentialSchemaPerm.did":
		x.Did = value.Interface().(string)
	case "veranablockchain.cspermission.CredentialSchemaPerm.grantee":
		x.Grantee = value.Interface().(string)
	case "veranablockchain.cspermission.CredentialSchemaPerm.created":
		x.Created = value.Message().Interface().(*timestamppb.Timestamp)
	case "veranablockchain.cspermission.CredentialSchemaPerm.created_by":
		x.CreatedBy = value.Interface().(string)
	case "veranablockchain.cspermission.CredentialSchemaPerm.effective_from":
		x.EffectiveFrom = value.Message().Interface().(*timestamppb.Timestamp)
	case "veranablockchain.cspermission.CredentialSchemaPerm.effective_until":
		x.EffectiveUntil = value.Message().Interface().(*timestamppb.Timestamp)
	case "veranablockchain.cspermission.CredentialSchemaPerm.validation_id":
		x.ValidationId = value.Uint()
	case "veranablockchain.cspermission.CredentialSchemaPerm.validation_fees":
		x.ValidationFees = value.Uint()
	case "veranablockchain.cspermission.CredentialSchemaPerm.issuance_fees":
		x.IssuanceFees = value.Uint()
	case "veranablockchain.cspermission.CredentialSchemaPerm.verification_fees":
		x.VerificationFees = value.Uint()
	case "veranablockchain.cspermission.CredentialSchemaPerm.deposit":
		x.Deposit = value.Int()
	case "veranablockchain.cspermission.CredentialSchemaPerm.revoked":
		x.Revoked = value.Message().Interface().(*timestamppb.Timestamp)
	case "veranablockchain.cspermission.CredentialSchemaPerm.revoked_by":
		x.RevokedBy = value.Interface().(string)
	case "veranablockchain.cspermission.CredentialSchemaPerm.terminated":
		x.Terminated = value.Message().Interface().(*timestamppb.Timestamp)
	case "veranablockchain.cspermission.CredentialSchemaPerm.terminated_by":
		x.TerminatedBy = value.Interface().(string)
	case "veranablockchain.cspermission.CredentialSchemaPerm.country":
		x.Country = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.CredentialSchemaPerm"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.CredentialSchemaPerm does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CredentialSchemaPerm) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "veranablockchain.cspermission.CredentialSchemaPerm.created":
		if x.Created == nil {
			x.Created = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Created.ProtoReflect())
	case "veranablockchain.cspermission.CredentialSchemaPerm.effective_from":
		if x.EffectiveFrom == nil {
			x.EffectiveFrom = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.EffectiveFrom.ProtoReflect())
	case "veranablockchain.cspermission.CredentialSchemaPerm.effective_until":
		if x.EffectiveUntil == nil {
			x.EffectiveUntil = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.EffectiveUntil.ProtoReflect())
	case "veranablockchain.cspermission.CredentialSchemaPerm.revoked":
		if x.Revoked == nil {
			x.Revoked = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Revoked.ProtoReflect())
	case "veranablockchain.cspermission.CredentialSchemaPerm.terminated":
		if x.Terminated == nil {
			x.Terminated = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Terminated.ProtoReflect())
	case "veranablockchain.cspermission.CredentialSchemaPerm.id":
		panic(fmt.Errorf("field id of message veranablockchain.cspermission.CredentialSchemaPerm is not mutable"))
	case "veranablockchain.cspermission.CredentialSchemaPerm.schema_id":
		panic(fmt.Errorf("field schema_id of message veranablockchain.cspermission.CredentialSchemaPerm is not mutable"))
	case "veranablockchain.cspermission.CredentialSchemaPerm.csp_type":
		panic(fmt.Errorf("field csp_type of message veranablockchain.cspermission.CredentialSchemaPerm is not mutable"))
	case "veranablockchain.cspermission.CredentialSchemaPerm.did":
		panic(fmt.Errorf("field did of message veranablockchain.cspermission.CredentialSchemaPerm is not mutable"))
	case "veranablockchain.cspermission.CredentialSchemaPerm.grantee":
		panic(fmt.Errorf("field grantee of message veranablockchain.cspermission.CredentialSchemaPerm is not mutable"))
	case "veranablockchain.cspermission.CredentialSchemaPerm.created_by":
		panic(fmt.Errorf("field created_by of message veranablockchain.cspermission.CredentialSchemaPerm is not mutable"))
	case "veranablockchain.cspermission.CredentialSchemaPerm.validation_id":
		panic(fmt.Errorf("field validation_id of message veranablockchain.cspermission.CredentialSchemaPerm is not mutable"))
	case "veranablockchain.cspermission.CredentialSchemaPerm.validation_fees":
		panic(fmt.Errorf("field validation_fees of message veranablockchain.cspermission.CredentialSchemaPerm is not mutable"))
	case "veranablockchain.cspermission.CredentialSchemaPerm.issuance_fees":
		panic(fmt.Errorf("field issuance_fees of message veranablockchain.cspermission.CredentialSchemaPerm is not mutable"))
	case "veranablockchain.cspermission.CredentialSchemaPerm.verification_fees":
		panic(fmt.Errorf("field verification_fees of message veranablockchain.cspermission.CredentialSchemaPerm is not mutable"))
	case "veranablockchain.cspermission.CredentialSchemaPerm.deposit":
		panic(fmt.Errorf("field deposit of message veranablockchain.cspermission.CredentialSchemaPerm is not mutable"))
	case "veranablockchain.cspermission.CredentialSchemaPerm.revoked_by":
		panic(fmt.Errorf("field revoked_by of message veranablockchain.cspermission.CredentialSchemaPerm is not mutable"))
	case "veranablockchain.cspermission.CredentialSchemaPerm.terminated_by":
		panic(fmt.Errorf("field terminated_by of message veranablockchain.cspermission.CredentialSchemaPerm is not mutable"))
	case "veranablockchain.cspermission.CredentialSchemaPerm.country":
		panic(fmt.Errorf("field country of message veranablockchain.cspermission.CredentialSchemaPerm is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.CredentialSchemaPerm"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.CredentialSchemaPerm does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CredentialSchemaPerm) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "veranablockchain.cspermission.CredentialSchemaPerm.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.cspermission.CredentialSchemaPerm.schema_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.cspermission.CredentialSchemaPerm.csp_type":
		return protoreflect.ValueOfEnum(0)
	case "veranablockchain.cspermission.CredentialSchemaPerm.did":
		return protoreflect.ValueOfString("")
	case "veranablockchain.cspermission.CredentialSchemaPerm.grantee":
		return protoreflect.ValueOfString("")
	case "veranablockchain.cspermission.CredentialSchemaPerm.created":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "veranablockchain.cspermission.CredentialSchemaPerm.created_by":
		return protoreflect.ValueOfString("")
	case "veranablockchain.cspermission.CredentialSchemaPerm.effective_from":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "veranablockchain.cspermission.CredentialSchemaPerm.effective_until":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "veranablockchain.cspermission.CredentialSchemaPerm.validation_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.cspermission.CredentialSchemaPerm.validation_fees":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.cspermission.CredentialSchemaPerm.issuance_fees":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.cspermission.CredentialSchemaPerm.verification_fees":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.cspermission.CredentialSchemaPerm.deposit":
		return protoreflect.ValueOfInt64(int64(0))
	case "veranablockchain.cspermission.CredentialSchemaPerm.revoked":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "veranablockchain.cspermission.CredentialSchemaPerm.revoked_by":
		return protoreflect.ValueOfString("")
	case "veranablockchain.cspermission.CredentialSchemaPerm.terminated":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "veranablockchain.cspermission.CredentialSchemaPerm.terminated_by":
		return protoreflect.ValueOfString("")
	case "veranablockchain.cspermission.CredentialSchemaPerm.country":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.CredentialSchemaPerm"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.CredentialSchemaPerm does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CredentialSchemaPerm) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in veranablockchain.cspermission.CredentialSchemaPerm", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CredentialSchemaPerm) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CredentialSchemaPerm) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CredentialSchemaPerm) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CredentialSchemaPerm) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CredentialSchemaPerm)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.SchemaId != 0 {
			n += 1 + runtime.Sov(uint64(x.SchemaId))
		}
		if x.CspType != 0 {
			n += 1 + runtime.Sov(uint64(x.CspType))
		}
		l = len(x.Did)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Grantee)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Created != nil {
			l = options.Size(x.Created)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CreatedBy)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EffectiveFrom != nil {
			l = options.Size(x.EffectiveFrom)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EffectiveUntil != nil {
			l = options.Size(x.EffectiveUntil)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ValidationId != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidationId))
		}
		if x.ValidationFees != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidationFees))
		}
		if x.IssuanceFees != 0 {
			n += 1 + runtime.Sov(uint64(x.IssuanceFees))
		}
		if x.VerificationFees != 0 {
			n += 1 + runtime.Sov(uint64(x.VerificationFees))
		}
		if x.Deposit != 0 {
			n += 1 + runtime.Sov(uint64(x.Deposit))
		}
		if x.Revoked != nil {
			l = options.Size(x.Revoked)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RevokedBy)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.Terminated != nil {
			l = options.Size(x.Terminated)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TerminatedBy)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Country)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CredentialSchemaPerm)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Country) > 0 {
			i -= len(x.Country)
			copy(dAtA[i:], x.Country)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Country)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
		if len(x.TerminatedBy) > 0 {
			i -= len(x.TerminatedBy)
			copy(dAtA[i:], x.TerminatedBy)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TerminatedBy)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
		if x.Terminated != nil {
			encoded, err := options.Marshal(x.Terminated)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
		if len(x.RevokedBy) > 0 {
			i -= len(x.RevokedBy)
			copy(dAtA[i:], x.RevokedBy)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RevokedBy)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if x.Revoked != nil {
			encoded, err := options.Marshal(x.Revoked)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x7a
		}
		if x.Deposit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Deposit))
			i--
			dAtA[i] = 0x70
		}
		if x.VerificationFees != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.VerificationFees))
			i--
			dAtA[i] = 0x68
		}
		if x.IssuanceFees != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.IssuanceFees))
			i--
			dAtA[i] = 0x60
		}
		if x.ValidationFees != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidationFees))
			i--
			dAtA[i] = 0x58
		}
		if x.ValidationId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidationId))
			i--
			dAtA[i] = 0x50
		}
		if x.EffectiveUntil != nil {
			encoded, err := options.Marshal(x.EffectiveUntil)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		}
		if x.EffectiveFrom != nil {
			encoded, err := options.Marshal(x.EffectiveFrom)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.CreatedBy) > 0 {
			i -= len(x.CreatedBy)
			copy(dAtA[i:], x.CreatedBy)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CreatedBy)))
			i--
			dAtA[i] = 0x3a
		}
		if x.Created != nil {
			encoded, err := options.Marshal(x.Created)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Grantee) > 0 {
			i -= len(x.Grantee)
			copy(dAtA[i:], x.Grantee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Grantee)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Did) > 0 {
			i -= len(x.Did)
			copy(dAtA[i:], x.Did)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Did)))
			i--
			dAtA[i] = 0x22
		}
		if x.CspType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CspType))
			i--
			dAtA[i] = 0x18
		}
		if x.SchemaId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SchemaId))
			i--
			dAtA[i] = 0x10
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CredentialSchemaPerm)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CredentialSchemaPerm: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CredentialSchemaPerm: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SchemaId", wireType)
				}
				x.SchemaId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SchemaId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CspType", wireType)
				}
				x.CspType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CspType |= CredentialSchemaPermType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Did = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Grantee", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Grantee = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Created == nil {
					x.Created = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Created); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CreatedBy = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EffectiveFrom", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EffectiveFrom == nil {
					x.EffectiveFrom = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EffectiveFrom); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EffectiveUntil", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EffectiveUntil == nil {
					x.EffectiveUntil = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EffectiveUntil); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidationId", wireType)
				}
				x.ValidationId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidationId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidationFees", wireType)
				}
				x.ValidationFees = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidationFees |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IssuanceFees", wireType)
				}
				x.IssuanceFees = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.IssuanceFees |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VerificationFees", wireType)
				}
				x.VerificationFees = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.VerificationFees |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
				}
				x.Deposit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Deposit |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Revoked", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Revoked == nil {
					x.Revoked = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Revoked); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RevokedBy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RevokedBy = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Terminated", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Terminated == nil {
					x.Terminated = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Terminated); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 18:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TerminatedBy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TerminatedBy = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 19:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Country = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SessionAuthz                       protoreflect.MessageDescriptor
	fd_SessionAuthz_executor_perm_id      protoreflect.FieldDescriptor
	fd_SessionAuthz_beneficiary_perm_id   protoreflect.FieldDescriptor
	fd_SessionAuthz_wallet_user_agent_did protoreflect.FieldDescriptor
)

func init() {
	file_veranablockchain_cspermission_types_proto_init()
	md_SessionAuthz = File_veranablockchain_cspermission_types_proto.Messages().ByName("SessionAuthz")
	fd_SessionAuthz_executor_perm_id = md_SessionAuthz.Fields().ByName("executor_perm_id")
	fd_SessionAuthz_beneficiary_perm_id = md_SessionAuthz.Fields().ByName("beneficiary_perm_id")
	fd_SessionAuthz_wallet_user_agent_did = md_SessionAuthz.Fields().ByName("wallet_user_agent_did")
}

var _ protoreflect.Message = (*fastReflection_SessionAuthz)(nil)

type fastReflection_SessionAuthz SessionAuthz

func (x *SessionAuthz) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SessionAuthz)(x)
}

func (x *SessionAuthz) slowProtoReflect() protoreflect.Message {
	mi := &file_veranablockchain_cspermission_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SessionAuthz_messageType fastReflection_SessionAuthz_messageType
var _ protoreflect.MessageType = fastReflection_SessionAuthz_messageType{}

type fastReflection_SessionAuthz_messageType struct{}

func (x fastReflection_SessionAuthz_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SessionAuthz)(nil)
}
func (x fastReflection_SessionAuthz_messageType) New() protoreflect.Message {
	return new(fastReflection_SessionAuthz)
}
func (x fastReflection_SessionAuthz_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SessionAuthz
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SessionAuthz) Descriptor() protoreflect.MessageDescriptor {
	return md_SessionAuthz
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SessionAuthz) Type() protoreflect.MessageType {
	return _fastReflection_SessionAuthz_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SessionAuthz) New() protoreflect.Message {
	return new(fastReflection_SessionAuthz)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SessionAuthz) Interface() protoreflect.ProtoMessage {
	return (*SessionAuthz)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SessionAuthz) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ExecutorPermId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ExecutorPermId)
		if !f(fd_SessionAuthz_executor_perm_id, value) {
			return
		}
	}
	if x.BeneficiaryPermId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BeneficiaryPermId)
		if !f(fd_SessionAuthz_beneficiary_perm_id, value) {
			return
		}
	}
	if x.WalletUserAgentDid != "" {
		value := protoreflect.ValueOfString(x.WalletUserAgentDid)
		if !f(fd_SessionAuthz_wallet_user_agent_did, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SessionAuthz) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "veranablockchain.cspermission.SessionAuthz.executor_perm_id":
		return x.ExecutorPermId != uint64(0)
	case "veranablockchain.cspermission.SessionAuthz.beneficiary_perm_id":
		return x.BeneficiaryPermId != uint64(0)
	case "veranablockchain.cspermission.SessionAuthz.wallet_user_agent_did":
		return x.WalletUserAgentDid != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.SessionAuthz"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.SessionAuthz does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SessionAuthz) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "veranablockchain.cspermission.SessionAuthz.executor_perm_id":
		x.ExecutorPermId = uint64(0)
	case "veranablockchain.cspermission.SessionAuthz.beneficiary_perm_id":
		x.BeneficiaryPermId = uint64(0)
	case "veranablockchain.cspermission.SessionAuthz.wallet_user_agent_did":
		x.WalletUserAgentDid = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.SessionAuthz"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.SessionAuthz does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SessionAuthz) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "veranablockchain.cspermission.SessionAuthz.executor_perm_id":
		value := x.ExecutorPermId
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.cspermission.SessionAuthz.beneficiary_perm_id":
		value := x.BeneficiaryPermId
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.cspermission.SessionAuthz.wallet_user_agent_did":
		value := x.WalletUserAgentDid
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.SessionAuthz"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.SessionAuthz does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SessionAuthz) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "veranablockchain.cspermission.SessionAuthz.executor_perm_id":
		x.ExecutorPermId = value.Uint()
	case "veranablockchain.cspermission.SessionAuthz.beneficiary_perm_id":
		x.BeneficiaryPermId = value.Uint()
	case "veranablockchain.cspermission.SessionAuthz.wallet_user_agent_did":
		x.WalletUserAgentDid = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.SessionAuthz"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.SessionAuthz does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SessionAuthz) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "veranablockchain.cspermission.SessionAuthz.executor_perm_id":
		panic(fmt.Errorf("field executor_perm_id of message veranablockchain.cspermission.SessionAuthz is not mutable"))
	case "veranablockchain.cspermission.SessionAuthz.beneficiary_perm_id":
		panic(fmt.Errorf("field beneficiary_perm_id of message veranablockchain.cspermission.SessionAuthz is not mutable"))
	case "veranablockchain.cspermission.SessionAuthz.wallet_user_agent_did":
		panic(fmt.Errorf("field wallet_user_agent_did of message veranablockchain.cspermission.SessionAuthz is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.SessionAuthz"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.SessionAuthz does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SessionAuthz) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "veranablockchain.cspermission.SessionAuthz.executor_perm_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.cspermission.SessionAuthz.beneficiary_perm_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.cspermission.SessionAuthz.wallet_user_agent_did":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.SessionAuthz"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.SessionAuthz does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SessionAuthz) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in veranablockchain.cspermission.SessionAuthz", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SessionAuthz) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SessionAuthz) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SessionAuthz) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SessionAuthz) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SessionAuthz)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.ExecutorPermId != 0 {
			n += 1 + runtime.Sov(uint64(x.ExecutorPermId))
		}
		if x.BeneficiaryPermId != 0 {
			n += 1 + runtime.Sov(uint64(x.BeneficiaryPermId))
		}
		l = len(x.WalletUserAgentDid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SessionAuthz)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.WalletUserAgentDid) > 0 {
			i -= len(x.WalletUserAgentDid)
			copy(dAtA[i:], x.WalletUserAgentDid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.WalletUserAgentDid)))
			i--
			dAtA[i] = 0x1a
		}
		if x.BeneficiaryPermId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BeneficiaryPermId))
			i--
			dAtA[i] = 0x10
		}
		if x.ExecutorPermId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExecutorPermId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SessionAuthz)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SessionAuthz: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SessionAuthz: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExecutorPermId", wireType)
				}
				x.ExecutorPermId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExecutorPermId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BeneficiaryPermId", wireType)
				}
				x.BeneficiaryPermId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BeneficiaryPermId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WalletUserAgentDid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WalletUserAgentDid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_CredentialSchemaPermSession_4_list)(nil)

type _CredentialSchemaPermSession_4_list struct {
	list *[]*SessionAuthz
}

func (x *_CredentialSchemaPermSession_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CredentialSchemaPermSession_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CredentialSchemaPermSession_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SessionAuthz)
	(*x.list)[i] = concreteValue
}

func (x *_CredentialSchemaPermSession_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SessionAuthz)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CredentialSchemaPermSession_4_list) AppendMutable() protoreflect.Value {
	v := new(SessionAuthz)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CredentialSchemaPermSession_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CredentialSchemaPermSession_4_list) NewElement() protoreflect.Value {
	v := new(SessionAuthz)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CredentialSchemaPermSession_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_CredentialSchemaPermSession                protoreflect.MessageDescriptor
	fd_CredentialSchemaPermSession_id             protoreflect.FieldDescriptor
	fd_CredentialSchemaPermSession_controller     protoreflect.FieldDescriptor
	fd_CredentialSchemaPermSession_user_agent_did protoreflect.FieldDescriptor
	fd_CredentialSchemaPermSession_session_authz  protoreflect.FieldDescriptor
)

func init() {
	file_veranablockchain_cspermission_types_proto_init()
	md_CredentialSchemaPermSession = File_veranablockchain_cspermission_types_proto.Messages().ByName("CredentialSchemaPermSession")
	fd_CredentialSchemaPermSession_id = md_CredentialSchemaPermSession.Fields().ByName("id")
	fd_CredentialSchemaPermSession_controller = md_CredentialSchemaPermSession.Fields().ByName("controller")
	fd_CredentialSchemaPermSession_user_agent_did = md_CredentialSchemaPermSession.Fields().ByName("user_agent_did")
	fd_CredentialSchemaPermSession_session_authz = md_CredentialSchemaPermSession.Fields().ByName("session_authz")
}

var _ protoreflect.Message = (*fastReflection_CredentialSchemaPermSession)(nil)

type fastReflection_CredentialSchemaPermSession CredentialSchemaPermSession

func (x *CredentialSchemaPermSession) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CredentialSchemaPermSession)(x)
}

func (x *CredentialSchemaPermSession) slowProtoReflect() protoreflect.Message {
	mi := &file_veranablockchain_cspermission_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CredentialSchemaPermSession_messageType fastReflection_CredentialSchemaPermSession_messageType
var _ protoreflect.MessageType = fastReflection_CredentialSchemaPermSession_messageType{}

type fastReflection_CredentialSchemaPermSession_messageType struct{}

func (x fastReflection_CredentialSchemaPermSession_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CredentialSchemaPermSession)(nil)
}
func (x fastReflection_CredentialSchemaPermSession_messageType) New() protoreflect.Message {
	return new(fastReflection_CredentialSchemaPermSession)
}
func (x fastReflection_CredentialSchemaPermSession_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CredentialSchemaPermSession
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CredentialSchemaPermSession) Descriptor() protoreflect.MessageDescriptor {
	return md_CredentialSchemaPermSession
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CredentialSchemaPermSession) Type() protoreflect.MessageType {
	return _fastReflection_CredentialSchemaPermSession_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CredentialSchemaPermSession) New() protoreflect.Message {
	return new(fastReflection_CredentialSchemaPermSession)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CredentialSchemaPermSession) Interface() protoreflect.ProtoMessage {
	return (*CredentialSchemaPermSession)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CredentialSchemaPermSession) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != "" {
		value := protoreflect.ValueOfString(x.Id)
		if !f(fd_CredentialSchemaPermSession_id, value) {
			return
		}
	}
	if x.Controller != "" {
		value := protoreflect.ValueOfString(x.Controller)
		if !f(fd_CredentialSchemaPermSession_controller, value) {
			return
		}
	}
	if x.UserAgentDid != "" {
		value := protoreflect.ValueOfString(x.UserAgentDid)
		if !f(fd_CredentialSchemaPermSession_user_agent_did, value) {
			return
		}
	}
	if len(x.SessionAuthz) != 0 {
		value := protoreflect.ValueOfList(&_CredentialSchemaPermSession_4_list{list: &x.SessionAuthz})
		if !f(fd_CredentialSchemaPermSession_session_authz, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CredentialSchemaPermSession) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "veranablockchain.cspermission.CredentialSchemaPermSession.id":
		return x.Id != ""
	case "veranablockchain.cspermission.CredentialSchemaPermSession.controller":
		return x.Controller != ""
	case "veranablockchain.cspermission.CredentialSchemaPermSession.user_agent_did":
		return x.UserAgentDid != ""
	case "veranablockchain.cspermission.CredentialSchemaPermSession.session_authz":
		return len(x.SessionAuthz) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.CredentialSchemaPermSession"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.CredentialSchemaPermSession does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CredentialSchemaPermSession) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "veranablockchain.cspermission.CredentialSchemaPermSession.id":
		x.Id = ""
	case "veranablockchain.cspermission.CredentialSchemaPermSession.controller":
		x.Controller = ""
	case "veranablockchain.cspermission.CredentialSchemaPermSession.user_agent_did":
		x.UserAgentDid = ""
	case "veranablockchain.cspermission.CredentialSchemaPermSession.session_authz":
		x.SessionAuthz = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.CredentialSchemaPermSession"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.CredentialSchemaPermSession does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CredentialSchemaPermSession) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "veranablockchain.cspermission.CredentialSchemaPermSession.id":
		value := x.Id
		return protoreflect.ValueOfString(value)
	case "veranablockchain.cspermission.CredentialSchemaPermSession.controller":
		value := x.Controller
		return protoreflect.ValueOfString(value)
	case "veranablockchain.cspermission.CredentialSchemaPermSession.user_agent_did":
		value := x.UserAgentDid
		return protoreflect.ValueOfString(value)
	case "veranablockchain.cspermission.CredentialSchemaPermSession.session_authz":
		if len(x.SessionAuthz) == 0 {
			return protoreflect.ValueOfList(&_CredentialSchemaPermSession_4_list{})
		}
		listValue := &_CredentialSchemaPermSession_4_list{list: &x.SessionAuthz}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.CredentialSchemaPermSession"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.CredentialSchemaPermSession does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CredentialSchemaPermSession) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "veranablockchain.cspermission.CredentialSchemaPermSession.id":
		x.Id = value.Interface().(string)
	case "veranablockchain.cspermission.CredentialSchemaPermSession.controller":
		x.Controller = value.Interface().(string)
	case "veranablockchain.cspermission.CredentialSchemaPermSession.user_agent_did":
		x.UserAgentDid = value.Interface().(string)
	case "veranablockchain.cspermission.CredentialSchemaPermSession.session_authz":
		lv := value.List()
		clv := lv.(*_CredentialSchemaPermSession_4_list)
		x.SessionAuthz = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.CredentialSchemaPermSession"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.CredentialSchemaPermSession does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CredentialSchemaPermSession) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "veranablockchain.cspermission.CredentialSchemaPermSession.session_authz":
		if x.SessionAuthz == nil {
			x.SessionAuthz = []*SessionAuthz{}
		}
		value := &_CredentialSchemaPermSession_4_list{list: &x.SessionAuthz}
		return protoreflect.ValueOfList(value)
	case "veranablockchain.cspermission.CredentialSchemaPermSession.id":
		panic(fmt.Errorf("field id of message veranablockchain.cspermission.CredentialSchemaPermSession is not mutable"))
	case "veranablockchain.cspermission.CredentialSchemaPermSession.controller":
		panic(fmt.Errorf("field controller of message veranablockchain.cspermission.CredentialSchemaPermSession is not mutable"))
	case "veranablockchain.cspermission.CredentialSchemaPermSession.user_agent_did":
		panic(fmt.Errorf("field user_agent_did of message veranablockchain.cspermission.CredentialSchemaPermSession is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.CredentialSchemaPermSession"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.CredentialSchemaPermSession does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CredentialSchemaPermSession) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "veranablockchain.cspermission.CredentialSchemaPermSession.id":
		return protoreflect.ValueOfString("")
	case "veranablockchain.cspermission.CredentialSchemaPermSession.controller":
		return protoreflect.ValueOfString("")
	case "veranablockchain.cspermission.CredentialSchemaPermSession.user_agent_did":
		return protoreflect.ValueOfString("")
	case "veranablockchain.cspermission.CredentialSchemaPermSession.session_authz":
		list := []*SessionAuthz{}
		return protoreflect.ValueOfList(&_CredentialSchemaPermSession_4_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.cspermission.CredentialSchemaPermSession"))
		}
		panic(fmt.Errorf("message veranablockchain.cspermission.CredentialSchemaPermSession does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CredentialSchemaPermSession) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in veranablockchain.cspermission.CredentialSchemaPermSession", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CredentialSchemaPermSession) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CredentialSchemaPermSession) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CredentialSchemaPermSession) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CredentialSchemaPermSession) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CredentialSchemaPermSession)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Id)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Controller)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.UserAgentDid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.SessionAuthz) > 0 {
			for _, e := range x.SessionAuthz {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CredentialSchemaPermSession)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.SessionAuthz) > 0 {
			for iNdEx := len(x.SessionAuthz) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.SessionAuthz[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.UserAgentDid) > 0 {
			i -= len(x.UserAgentDid)
			copy(dAtA[i:], x.UserAgentDid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.UserAgentDid)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Controller) > 0 {
			i -= len(x.Controller)
			copy(dAtA[i:], x.Controller)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Controller)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Id) > 0 {
			i -= len(x.Id)
			copy(dAtA[i:], x.Id)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Id)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CredentialSchemaPermSession)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CredentialSchemaPermSession: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CredentialSchemaPermSession: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Id = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Controller = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UserAgentDid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UserAgentDid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SessionAuthz", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SessionAuthz = append(x.SessionAuthz, &SessionAuthz{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SessionAuthz[len(x.SessionAuthz)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: veranablockchain/cspermission/types.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CredentialSchemaPermType int32

const (
	CredentialSchemaPermType_CREDENTIAL_SCHEMA_PERM_TYPE_UNSPECIFIED      CredentialSchemaPermType = 0
	CredentialSchemaPermType_CREDENTIAL_SCHEMA_PERM_TYPE_ISSUER           CredentialSchemaPermType = 1
	CredentialSchemaPermType_CREDENTIAL_SCHEMA_PERM_TYPE_VERIFIER         CredentialSchemaPermType = 2
	CredentialSchemaPermType_CREDENTIAL_SCHEMA_PERM_TYPE_ISSUER_GRANTOR   CredentialSchemaPermType = 3
	CredentialSchemaPermType_CREDENTIAL_SCHEMA_PERM_TYPE_VERIFIER_GRANTOR CredentialSchemaPermType = 4
	CredentialSchemaPermType_CREDENTIAL_SCHEMA_PERM_TYPE_TRUST_REGISTRY   CredentialSchemaPermType = 5
	CredentialSchemaPermType_CREDENTIAL_SCHEMA_PERM_TYPE_HOLDER           CredentialSchemaPermType = 6
)

// Enum value maps for CredentialSchemaPermType.
var (
	CredentialSchemaPermType_name = map[int32]string{
		0: "CREDENTIAL_SCHEMA_PERM_TYPE_UNSPECIFIED",
		1: "CREDENTIAL_SCHEMA_PERM_TYPE_ISSUER",
		2: "CREDENTIAL_SCHEMA_PERM_TYPE_VERIFIER",
		3: "CREDENTIAL_SCHEMA_PERM_TYPE_ISSUER_GRANTOR",
		4: "CREDENTIAL_SCHEMA_PERM_TYPE_VERIFIER_GRANTOR",
		5: "CREDENTIAL_SCHEMA_PERM_TYPE_TRUST_REGISTRY",
		6: "CREDENTIAL_SCHEMA_PERM_TYPE_HOLDER",
	}
	CredentialSchemaPermType_value = map[string]int32{
		"CREDENTIAL_SCHEMA_PERM_TYPE_UNSPECIFIED":      0,
		"CREDENTIAL_SCHEMA_PERM_TYPE_ISSUER":           1,
		"CREDENTIAL_SCHEMA_PERM_TYPE_VERIFIER":         2,
		"CREDENTIAL_SCHEMA_PERM_TYPE_ISSUER_GRANTOR":   3,
		"CREDENTIAL_SCHEMA_PERM_TYPE_VERIFIER_GRANTOR": 4,
		"CREDENTIAL_SCHEMA_PERM_TYPE_TRUST_REGISTRY":   5,
		"CREDENTIAL_SCHEMA_PERM_TYPE_HOLDER":           6,
	}
)

func (x CredentialSchemaPermType) Enum() *CredentialSchemaPermType {
	p := new(CredentialSchemaPermType)
	*p = x
	return p
}

func (x CredentialSchemaPermType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CredentialSchemaPermType) Descriptor() protoreflect.EnumDescriptor {
	return file_veranablockchain_cspermission_types_proto_enumTypes[0].Descriptor()
}

func (CredentialSchemaPermType) Type() protoreflect.EnumType {
	return &file_veranablockchain_cspermission_types_proto_enumTypes[0]
}

func (x CredentialSchemaPermType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CredentialSchemaPermType.Descriptor instead.
func (CredentialSchemaPermType) EnumDescriptor() ([]byte, []int) {
	return file_veranablockchain_cspermission_types_proto_rawDescGZIP(), []int{0}
}

type CredentialSchemaPerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SchemaId uint64                   `protobuf:"varint,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	CspType  CredentialSchemaPermType `protobuf:"varint,3,opt,name=csp_type,json=cspType,proto3,enum=veranablockchain.cspermission.CredentialSchemaPermType" json:"csp_type,omitempty"`
	Did      string                   `protobuf:"bytes,4,opt,name=did,proto3" json:"did,omitempty"`
	Grantee  string                   `protobuf:"bytes,5,opt,name=grantee,proto3" json:"grantee,omitempty"`
	// Required fields are non-nullable
	Created       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	EffectiveFrom *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=effective_from,json=effectiveFrom,proto3" json:"effective_from,omitempty"`
	// Optional fields are nullable
	EffectiveUntil   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=effective_until,json=effectiveUntil,proto3" json:"effective_until,omitempty"`
	ValidationId     uint64                 `protobuf:"varint,10,opt,name=validation_id,json=validationId,proto3" json:"validation_id,omitempty"`
	ValidationFees   uint64                 `protobuf:"varint,11,opt,name=validation_fees,json=validationFees,proto3" json:"validation_fees,omitempty"`
	IssuanceFees     uint64                 `protobuf:"varint,12,opt,name=issuance_fees,json=issuanceFees,proto3" json:"issuance_fees,omitempty"`
	VerificationFees uint64                 `protobuf:"varint,13,opt,name=verification_fees,json=verificationFees,proto3" json:"verification_fees,omitempty"`
	Deposit          int64                  `protobuf:"varint,14,opt,name=deposit,proto3" json:"deposit,omitempty"`
	// Optional state fields are nullable
	Revoked      *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=revoked,proto3" json:"revoked,omitempty"`
	RevokedBy    string                 `protobuf:"bytes,16,opt,name=revoked_by,json=revokedBy,proto3" json:"revoked_by,omitempty"`
	Terminated   *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=terminated,proto3" json:"terminated,omitempty"`
	TerminatedBy string                 `protobuf:"bytes,18,opt,name=terminated_by,json=terminatedBy,proto3" json:"terminated_by,omitempty"`
	Country      string                 `protobuf:"bytes,19,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *CredentialSchemaPerm) Reset() {
	*x = CredentialSchemaPerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_veranablockchain_cspermission_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialSchemaPerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialSchemaPerm) ProtoMessage() {}

// Deprecated: Use CredentialSchemaPerm.ProtoReflect.Descriptor instead.
func (*CredentialSchemaPerm) Descriptor() ([]byte, []int) {
	return file_veranablockchain_cspermission_types_proto_rawDescGZIP(), []int{0}
}

func (x *CredentialSchemaPerm) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CredentialSchemaPerm) GetSchemaId() uint64 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

func (x *CredentialSchemaPerm) GetCspType() CredentialSchemaPermType {
	if x != nil {
		return x.CspType
	}
	return CredentialSchemaPermType_CREDENTIAL_SCHEMA_PERM_TYPE_UNSPECIFIED
}

func (x *CredentialSchemaPerm) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *CredentialSchemaPerm) GetGrantee() string {
	if x != nil {
		return x.Grantee
	}
	return ""
}

func (x *CredentialSchemaPerm) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CredentialSchemaPerm) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CredentialSchemaPerm) GetEffectiveFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveFrom
	}
	return nil
}

func (x *CredentialSchemaPerm) GetEffectiveUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveUntil
	}
	return nil
}

func (x *CredentialSchemaPerm) GetValidationId() uint64 {
	if x != nil {
		return x.ValidationId
	}
	return 0
}

func (x *CredentialSchemaPerm) GetValidationFees() uint64 {
	if x != nil {
		return x.ValidationFees
	}
	return 0
}

func (x *CredentialSchemaPerm) GetIssuanceFees() uint64 {
	if x != nil {
		return x.IssuanceFees
	}
	return 0
}

func (x *CredentialSchemaPerm) GetVerificationFees() uint64 {
	if x != nil {
		return x.VerificationFees
	}
	return 0
}

func (x *CredentialSchemaPerm) GetDeposit() int64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *CredentialSchemaPerm) GetRevoked() *timestamppb.Timestamp {
	if x != nil {
		return x.Revoked
	}
	return nil
}

func (x *CredentialSchemaPerm) GetRevokedBy() string {
	if x != nil {
		return x.RevokedBy
	}
	return ""
}

func (x *CredentialSchemaPerm) GetTerminated() *timestamppb.Timestamp {
	if x != nil {
		return x.Terminated
	}
	return nil
}

func (x *CredentialSchemaPerm) GetTerminatedBy() string {
	if x != nil {
		return x.TerminatedBy
	}
	return ""
}

func (x *CredentialSchemaPerm) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

// SessionAuthz represents a permission triple in the session
type SessionAuthz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutorPermId     uint64 `protobuf:"varint,1,opt,name=executor_perm_id,json=executorPermId,proto3" json:"executor_perm_id,omitempty"`
	BeneficiaryPermId  uint64 `protobuf:"varint,2,opt,name=beneficiary_perm_id,json=beneficiaryPermId,proto3" json:"beneficiary_perm_id,omitempty"`
	WalletUserAgentDid string `protobuf:"bytes,3,opt,name=wallet_user_agent_did,json=walletUserAgentDid,proto3" json:"wallet_user_agent_did,omitempty"`
}

func (x *SessionAuthz) Reset() {
	*x = SessionAuthz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_veranablockchain_cspermission_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionAuthz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionAuthz) ProtoMessage() {}

// Deprecated: Use SessionAuthz.ProtoReflect.Descriptor instead.
func (*SessionAuthz) Descriptor() ([]byte, []int) {
	return file_veranablockchain_cspermission_types_proto_rawDescGZIP(), []int{1}
}

func (x *SessionAuthz) GetExecutorPermId() uint64 {
	if x != nil {
		return x.ExecutorPermId
	}
	return 0
}

func (x *SessionAuthz) GetBeneficiaryPermId() uint64 {
	if x != nil {
		return x.BeneficiaryPermId
	}
	return 0
}

func (x *SessionAuthz) GetWalletUserAgentDid() string {
	if x != nil {
		return x.WalletUserAgentDid
	}
	return ""
}

// CredentialSchemaPermSession represents a session for credential schema permissions
type CredentialSchemaPermSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Controller   string          `protobuf:"bytes,2,opt,name=controller,proto3" json:"controller,omitempty"`
	UserAgentDid string          `protobuf:"bytes,3,opt,name=user_agent_did,json=userAgentDid,proto3" json:"user_agent_did,omitempty"`
	SessionAuthz []*SessionAuthz `protobuf:"bytes,4,rep,name=session_authz,json=sessionAuthz,proto3" json:"session_authz,omitempty"`
}

func (x *CredentialSchemaPermSession) Reset() {
	*x = CredentialSchemaPermSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_veranablockchain_cspermission_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialSchemaPermSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialSchemaPermSession) ProtoMessage() {}

// Deprecated: Use CredentialSchemaPermSession.ProtoReflect.Descriptor instead.
func (*CredentialSchemaPermSession) Descriptor() ([]byte, []int) {
	return file_veranablockchain_cspermission_types_proto_rawDescGZIP(), []int{2}
}

func (x *CredentialSchemaPermSession) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CredentialSchemaPermSession) GetController() string {
	if x != nil {
		return x.Controller
	}
	return ""
}

func (x *CredentialSchemaPermSession) GetUserAgentDid() string {
	if x != nil {
		return x.UserAgentDid
	}
	return ""
}

func (x *CredentialSchemaPermSession) GetSessionAuthz() []*SessionAuthz {
	if x != nil {
		return x.SessionAuthz
	}
	return nil
}

var File_veranablockchain_cspermission_types_proto protoreflect.FileDescriptor

var file_veranablockchain_cspermission_types_proto_rawDesc = []byte{
	0x0a, 0x29, 0x76, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2f, 0x63, 0x73, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x76, 0x65, 0x72,
	0x61, 0x6e, 0x61, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x73,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e,
	0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67,
	0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd8, 0x07, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x08, 0x63, 0x73, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x76, 0x65, 0x72, 0x61, 0x6e, 0x61,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x73, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x63, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4,
	0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12,
	0x3e, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde,
	0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x37, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde,
	0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x4d, 0x0a, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x01,
	0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x01, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x73, 0x75,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x01, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x07, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xc8, 0xde, 0x1f, 0x01, 0xd2, 0xb4,
	0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x44, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x01, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0a, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0xc8, 0xde, 0x1f, 0x01, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x01, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x9b, 0x01, 0x0a, 0x0c, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x12, 0x28, 0x0a, 0x10, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x50,
	0x65, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x65, 0x72,
	0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4,
	0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x76, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x73, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x52, 0x0c, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x2a, 0xd3, 0x02, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50,
	0x65, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x52, 0x45, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x41, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x52, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24,
	0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d,
	0x41, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x49, 0x45, 0x52, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x50, 0x45, 0x52, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x41,
	0x4e, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x50, 0x45, 0x52, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x47,
	0x52, 0x41, 0x4e, 0x54, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x43, 0x52, 0x45, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x50, 0x45,
	0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x52, 0x45, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x50, 0x45,
	0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x06,
	0x42, 0x90, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x73, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x76, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x76, 0x65, 0x72,
	0x61, 0x6e, 0x61, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2f, 0x63, 0x73, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0xa2, 0x02, 0x03, 0x56, 0x43, 0x58, 0xaa, 0x02, 0x1d, 0x56, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x73, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0xca, 0x02, 0x1d, 0x56, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x43, 0x73, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0xe2, 0x02, 0x29, 0x56, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x43, 0x73, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x1e, 0x56, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x43, 0x73, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_veranablockchain_cspermission_types_proto_rawDescOnce sync.Once
	file_veranablockchain_cspermission_types_proto_rawDescData = file_veranablockchain_cspermission_types_proto_rawDesc
)

func file_veranablockchain_cspermission_types_proto_rawDescGZIP() []byte {
	file_veranablockchain_cspermission_types_proto_rawDescOnce.Do(func() {
		file_veranablockchain_cspermission_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_veranablockchain_cspermission_types_proto_rawDescData)
	})
	return file_veranablockchain_cspermission_types_proto_rawDescData
}

var file_veranablockchain_cspermission_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_veranablockchain_cspermission_types_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_veranablockchain_cspermission_types_proto_goTypes = []interface{}{
	(CredentialSchemaPermType)(0),       // 0: veranablockchain.cspermission.CredentialSchemaPermType
	(*CredentialSchemaPerm)(nil),        // 1: veranablockchain.cspermission.CredentialSchemaPerm
	(*SessionAuthz)(nil),                // 2: veranablockchain.cspermission.SessionAuthz
	(*CredentialSchemaPermSession)(nil), // 3: veranablockchain.cspermission.CredentialSchemaPermSession
	(*timestamppb.Timestamp)(nil),       // 4: google.protobuf.Timestamp
}
var file_veranablockchain_cspermission_types_proto_depIdxs = []int32{
	0, // 0: veranablockchain.cspermission.CredentialSchemaPerm.csp_type:type_name -> veranablockchain.cspermission.CredentialSchemaPermType
	4, // 1: veranablockchain.cspermission.CredentialSchemaPerm.created:type_name -> google.protobuf.Timestamp
	4, // 2: veranablockchain.cspermission.CredentialSchemaPerm.effective_from:type_name -> google.protobuf.Timestamp
	4, // 3: veranablockchain.cspermission.CredentialSchemaPerm.effective_until:type_name -> google.protobuf.Timestamp
	4, // 4: veranablockchain.cspermission.CredentialSchemaPerm.revoked:type_name -> google.protobuf.Timestamp
	4, // 5: veranablockchain.cspermission.CredentialSchemaPerm.terminated:type_name -> google.protobuf.Timestamp
	2, // 6: veranablockchain.cspermission.CredentialSchemaPermSession.session_authz:type_name -> veranablockchain.cspermission.SessionAuthz
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_veranablockchain_cspermission_types_proto_init() }
func file_veranablockchain_cspermission_types_proto_init() {
	if File_veranablockchain_cspermission_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_veranablockchain_cspermission_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialSchemaPerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_veranablockchain_cspermission_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionAuthz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_veranablockchain_cspermission_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialSchemaPermSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_veranablockchain_cspermission_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_veranablockchain_cspermission_types_proto_goTypes,
		DependencyIndexes: file_veranablockchain_cspermission_types_proto_depIdxs,
		EnumInfos:         file_veranablockchain_cspermission_types_proto_enumTypes,
		MessageInfos:      file_veranablockchain_cspermission_types_proto_msgTypes,
	}.Build()
	File_veranablockchain_cspermission_types_proto = out.File
	file_veranablockchain_cspermission_types_proto_rawDesc = nil
	file_veranablockchain_cspermission_types_proto_goTypes = nil
	file_veranablockchain_cspermission_types_proto_depIdxs = nil
}
