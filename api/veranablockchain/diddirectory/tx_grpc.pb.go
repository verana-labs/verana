// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: veranablockchain/diddirectory/tx.proto

package diddirectory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName = "/veranablockchain.diddirectory.Msg/UpdateParams"
	Msg_AddDID_FullMethodName       = "/veranablockchain.diddirectory.Msg/AddDID"
	Msg_RenewDID_FullMethodName     = "/veranablockchain.diddirectory.Msg/RenewDID"
	Msg_RemoveDID_FullMethodName    = "/veranablockchain.diddirectory.Msg/RemoveDID"
	Msg_TouchDID_FullMethodName     = "/veranablockchain.diddirectory.Msg/TouchDID"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	AddDID(ctx context.Context, in *MsgAddDID, opts ...grpc.CallOption) (*MsgAddDIDResponse, error)
	RenewDID(ctx context.Context, in *MsgRenewDID, opts ...grpc.CallOption) (*MsgRenewDIDResponse, error)
	RemoveDID(ctx context.Context, in *MsgRemoveDID, opts ...grpc.CallOption) (*MsgRemoveDIDResponse, error)
	TouchDID(ctx context.Context, in *MsgTouchDID, opts ...grpc.CallOption) (*MsgTouchDIDResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddDID(ctx context.Context, in *MsgAddDID, opts ...grpc.CallOption) (*MsgAddDIDResponse, error) {
	out := new(MsgAddDIDResponse)
	err := c.cc.Invoke(ctx, Msg_AddDID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RenewDID(ctx context.Context, in *MsgRenewDID, opts ...grpc.CallOption) (*MsgRenewDIDResponse, error) {
	out := new(MsgRenewDIDResponse)
	err := c.cc.Invoke(ctx, Msg_RenewDID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveDID(ctx context.Context, in *MsgRemoveDID, opts ...grpc.CallOption) (*MsgRemoveDIDResponse, error) {
	out := new(MsgRemoveDIDResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveDID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TouchDID(ctx context.Context, in *MsgTouchDID, opts ...grpc.CallOption) (*MsgTouchDIDResponse, error) {
	out := new(MsgTouchDIDResponse)
	err := c.cc.Invoke(ctx, Msg_TouchDID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	AddDID(context.Context, *MsgAddDID) (*MsgAddDIDResponse, error)
	RenewDID(context.Context, *MsgRenewDID) (*MsgRenewDIDResponse, error)
	RemoveDID(context.Context, *MsgRemoveDID) (*MsgRemoveDIDResponse, error)
	TouchDID(context.Context, *MsgTouchDID) (*MsgTouchDIDResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) AddDID(context.Context, *MsgAddDID) (*MsgAddDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDID not implemented")
}
func (UnimplementedMsgServer) RenewDID(context.Context, *MsgRenewDID) (*MsgRenewDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewDID not implemented")
}
func (UnimplementedMsgServer) RemoveDID(context.Context, *MsgRemoveDID) (*MsgRemoveDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDID not implemented")
}
func (UnimplementedMsgServer) TouchDID(context.Context, *MsgTouchDID) (*MsgTouchDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TouchDID not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddDID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddDID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddDID(ctx, req.(*MsgAddDID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RenewDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRenewDID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RenewDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RenewDID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RenewDID(ctx, req.(*MsgRenewDID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveDID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveDID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveDID(ctx, req.(*MsgRemoveDID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TouchDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTouchDID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TouchDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_TouchDID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TouchDID(ctx, req.(*MsgTouchDID))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "veranablockchain.diddirectory.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "AddDID",
			Handler:    _Msg_AddDID_Handler,
		},
		{
			MethodName: "RenewDID",
			Handler:    _Msg_RenewDID_Handler,
		},
		{
			MethodName: "RemoveDID",
			Handler:    _Msg_RemoveDID_Handler,
		},
		{
			MethodName: "TouchDID",
			Handler:    _Msg_TouchDID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "veranablockchain/diddirectory/tx.proto",
}
