// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package permission

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Permission                       protoreflect.MessageDescriptor
	fd_Permission_id                    protoreflect.FieldDescriptor
	fd_Permission_schema_id             protoreflect.FieldDescriptor
	fd_Permission_type                  protoreflect.FieldDescriptor
	fd_Permission_did                   protoreflect.FieldDescriptor
	fd_Permission_grantee               protoreflect.FieldDescriptor
	fd_Permission_created               protoreflect.FieldDescriptor
	fd_Permission_created_by            protoreflect.FieldDescriptor
	fd_Permission_extended              protoreflect.FieldDescriptor
	fd_Permission_extended_by           protoreflect.FieldDescriptor
	fd_Permission_slashed               protoreflect.FieldDescriptor
	fd_Permission_slashed_by            protoreflect.FieldDescriptor
	fd_Permission_repaid                protoreflect.FieldDescriptor
	fd_Permission_repaid_by             protoreflect.FieldDescriptor
	fd_Permission_effective_from        protoreflect.FieldDescriptor
	fd_Permission_effective_until       protoreflect.FieldDescriptor
	fd_Permission_modified              protoreflect.FieldDescriptor
	fd_Permission_validation_fees       protoreflect.FieldDescriptor
	fd_Permission_issuance_fees         protoreflect.FieldDescriptor
	fd_Permission_verification_fees     protoreflect.FieldDescriptor
	fd_Permission_deposit               protoreflect.FieldDescriptor
	fd_Permission_slashed_deposit       protoreflect.FieldDescriptor
	fd_Permission_repaid_deposit        protoreflect.FieldDescriptor
	fd_Permission_revoked               protoreflect.FieldDescriptor
	fd_Permission_revoked_by            protoreflect.FieldDescriptor
	fd_Permission_terminated            protoreflect.FieldDescriptor
	fd_Permission_terminated_by         protoreflect.FieldDescriptor
	fd_Permission_country               protoreflect.FieldDescriptor
	fd_Permission_validator_perm_id     protoreflect.FieldDescriptor
	fd_Permission_vp_state              protoreflect.FieldDescriptor
	fd_Permission_vp_exp                protoreflect.FieldDescriptor
	fd_Permission_vp_last_state_change  protoreflect.FieldDescriptor
	fd_Permission_vp_validator_deposit  protoreflect.FieldDescriptor
	fd_Permission_vp_current_fees       protoreflect.FieldDescriptor
	fd_Permission_vp_current_deposit    protoreflect.FieldDescriptor
	fd_Permission_vp_summary_digest_sri protoreflect.FieldDescriptor
	fd_Permission_vp_term_requested     protoreflect.FieldDescriptor
)

func init() {
	file_veranablockchain_permission_types_proto_init()
	md_Permission = File_veranablockchain_permission_types_proto.Messages().ByName("Permission")
	fd_Permission_id = md_Permission.Fields().ByName("id")
	fd_Permission_schema_id = md_Permission.Fields().ByName("schema_id")
	fd_Permission_type = md_Permission.Fields().ByName("type")
	fd_Permission_did = md_Permission.Fields().ByName("did")
	fd_Permission_grantee = md_Permission.Fields().ByName("grantee")
	fd_Permission_created = md_Permission.Fields().ByName("created")
	fd_Permission_created_by = md_Permission.Fields().ByName("created_by")
	fd_Permission_extended = md_Permission.Fields().ByName("extended")
	fd_Permission_extended_by = md_Permission.Fields().ByName("extended_by")
	fd_Permission_slashed = md_Permission.Fields().ByName("slashed")
	fd_Permission_slashed_by = md_Permission.Fields().ByName("slashed_by")
	fd_Permission_repaid = md_Permission.Fields().ByName("repaid")
	fd_Permission_repaid_by = md_Permission.Fields().ByName("repaid_by")
	fd_Permission_effective_from = md_Permission.Fields().ByName("effective_from")
	fd_Permission_effective_until = md_Permission.Fields().ByName("effective_until")
	fd_Permission_modified = md_Permission.Fields().ByName("modified")
	fd_Permission_validation_fees = md_Permission.Fields().ByName("validation_fees")
	fd_Permission_issuance_fees = md_Permission.Fields().ByName("issuance_fees")
	fd_Permission_verification_fees = md_Permission.Fields().ByName("verification_fees")
	fd_Permission_deposit = md_Permission.Fields().ByName("deposit")
	fd_Permission_slashed_deposit = md_Permission.Fields().ByName("slashed_deposit")
	fd_Permission_repaid_deposit = md_Permission.Fields().ByName("repaid_deposit")
	fd_Permission_revoked = md_Permission.Fields().ByName("revoked")
	fd_Permission_revoked_by = md_Permission.Fields().ByName("revoked_by")
	fd_Permission_terminated = md_Permission.Fields().ByName("terminated")
	fd_Permission_terminated_by = md_Permission.Fields().ByName("terminated_by")
	fd_Permission_country = md_Permission.Fields().ByName("country")
	fd_Permission_validator_perm_id = md_Permission.Fields().ByName("validator_perm_id")
	fd_Permission_vp_state = md_Permission.Fields().ByName("vp_state")
	fd_Permission_vp_exp = md_Permission.Fields().ByName("vp_exp")
	fd_Permission_vp_last_state_change = md_Permission.Fields().ByName("vp_last_state_change")
	fd_Permission_vp_validator_deposit = md_Permission.Fields().ByName("vp_validator_deposit")
	fd_Permission_vp_current_fees = md_Permission.Fields().ByName("vp_current_fees")
	fd_Permission_vp_current_deposit = md_Permission.Fields().ByName("vp_current_deposit")
	fd_Permission_vp_summary_digest_sri = md_Permission.Fields().ByName("vp_summary_digest_sri")
	fd_Permission_vp_term_requested = md_Permission.Fields().ByName("vp_term_requested")
}

var _ protoreflect.Message = (*fastReflection_Permission)(nil)

type fastReflection_Permission Permission

func (x *Permission) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Permission)(x)
}

func (x *Permission) slowProtoReflect() protoreflect.Message {
	mi := &file_veranablockchain_permission_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Permission_messageType fastReflection_Permission_messageType
var _ protoreflect.MessageType = fastReflection_Permission_messageType{}

type fastReflection_Permission_messageType struct{}

func (x fastReflection_Permission_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Permission)(nil)
}
func (x fastReflection_Permission_messageType) New() protoreflect.Message {
	return new(fastReflection_Permission)
}
func (x fastReflection_Permission_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Permission
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Permission) Descriptor() protoreflect.MessageDescriptor {
	return md_Permission
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Permission) Type() protoreflect.MessageType {
	return _fastReflection_Permission_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Permission) New() protoreflect.Message {
	return new(fastReflection_Permission)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Permission) Interface() protoreflect.ProtoMessage {
	return (*Permission)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Permission) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Permission_id, value) {
			return
		}
	}
	if x.SchemaId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SchemaId)
		if !f(fd_Permission_schema_id, value) {
			return
		}
	}
	if x.Type_ != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Type_))
		if !f(fd_Permission_type, value) {
			return
		}
	}
	if x.Did != "" {
		value := protoreflect.ValueOfString(x.Did)
		if !f(fd_Permission_did, value) {
			return
		}
	}
	if x.Grantee != "" {
		value := protoreflect.ValueOfString(x.Grantee)
		if !f(fd_Permission_grantee, value) {
			return
		}
	}
	if x.Created != nil {
		value := protoreflect.ValueOfMessage(x.Created.ProtoReflect())
		if !f(fd_Permission_created, value) {
			return
		}
	}
	if x.CreatedBy != "" {
		value := protoreflect.ValueOfString(x.CreatedBy)
		if !f(fd_Permission_created_by, value) {
			return
		}
	}
	if x.Extended != nil {
		value := protoreflect.ValueOfMessage(x.Extended.ProtoReflect())
		if !f(fd_Permission_extended, value) {
			return
		}
	}
	if x.ExtendedBy != "" {
		value := protoreflect.ValueOfString(x.ExtendedBy)
		if !f(fd_Permission_extended_by, value) {
			return
		}
	}
	if x.Slashed != nil {
		value := protoreflect.ValueOfMessage(x.Slashed.ProtoReflect())
		if !f(fd_Permission_slashed, value) {
			return
		}
	}
	if x.SlashedBy != "" {
		value := protoreflect.ValueOfString(x.SlashedBy)
		if !f(fd_Permission_slashed_by, value) {
			return
		}
	}
	if x.Repaid != nil {
		value := protoreflect.ValueOfMessage(x.Repaid.ProtoReflect())
		if !f(fd_Permission_repaid, value) {
			return
		}
	}
	if x.RepaidBy != "" {
		value := protoreflect.ValueOfString(x.RepaidBy)
		if !f(fd_Permission_repaid_by, value) {
			return
		}
	}
	if x.EffectiveFrom != nil {
		value := protoreflect.ValueOfMessage(x.EffectiveFrom.ProtoReflect())
		if !f(fd_Permission_effective_from, value) {
			return
		}
	}
	if x.EffectiveUntil != nil {
		value := protoreflect.ValueOfMessage(x.EffectiveUntil.ProtoReflect())
		if !f(fd_Permission_effective_until, value) {
			return
		}
	}
	if x.Modified != nil {
		value := protoreflect.ValueOfMessage(x.Modified.ProtoReflect())
		if !f(fd_Permission_modified, value) {
			return
		}
	}
	if x.ValidationFees != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ValidationFees)
		if !f(fd_Permission_validation_fees, value) {
			return
		}
	}
	if x.IssuanceFees != uint64(0) {
		value := protoreflect.ValueOfUint64(x.IssuanceFees)
		if !f(fd_Permission_issuance_fees, value) {
			return
		}
	}
	if x.VerificationFees != uint64(0) {
		value := protoreflect.ValueOfUint64(x.VerificationFees)
		if !f(fd_Permission_verification_fees, value) {
			return
		}
	}
	if x.Deposit != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Deposit)
		if !f(fd_Permission_deposit, value) {
			return
		}
	}
	if x.SlashedDeposit != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SlashedDeposit)
		if !f(fd_Permission_slashed_deposit, value) {
			return
		}
	}
	if x.RepaidDeposit != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RepaidDeposit)
		if !f(fd_Permission_repaid_deposit, value) {
			return
		}
	}
	if x.Revoked != nil {
		value := protoreflect.ValueOfMessage(x.Revoked.ProtoReflect())
		if !f(fd_Permission_revoked, value) {
			return
		}
	}
	if x.RevokedBy != "" {
		value := protoreflect.ValueOfString(x.RevokedBy)
		if !f(fd_Permission_revoked_by, value) {
			return
		}
	}
	if x.Terminated != nil {
		value := protoreflect.ValueOfMessage(x.Terminated.ProtoReflect())
		if !f(fd_Permission_terminated, value) {
			return
		}
	}
	if x.TerminatedBy != "" {
		value := protoreflect.ValueOfString(x.TerminatedBy)
		if !f(fd_Permission_terminated_by, value) {
			return
		}
	}
	if x.Country != "" {
		value := protoreflect.ValueOfString(x.Country)
		if !f(fd_Permission_country, value) {
			return
		}
	}
	if x.ValidatorPermId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ValidatorPermId)
		if !f(fd_Permission_validator_perm_id, value) {
			return
		}
	}
	if x.VpState != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.VpState))
		if !f(fd_Permission_vp_state, value) {
			return
		}
	}
	if x.VpExp != nil {
		value := protoreflect.ValueOfMessage(x.VpExp.ProtoReflect())
		if !f(fd_Permission_vp_exp, value) {
			return
		}
	}
	if x.VpLastStateChange != nil {
		value := protoreflect.ValueOfMessage(x.VpLastStateChange.ProtoReflect())
		if !f(fd_Permission_vp_last_state_change, value) {
			return
		}
	}
	if x.VpValidatorDeposit != uint64(0) {
		value := protoreflect.ValueOfUint64(x.VpValidatorDeposit)
		if !f(fd_Permission_vp_validator_deposit, value) {
			return
		}
	}
	if x.VpCurrentFees != uint64(0) {
		value := protoreflect.ValueOfUint64(x.VpCurrentFees)
		if !f(fd_Permission_vp_current_fees, value) {
			return
		}
	}
	if x.VpCurrentDeposit != uint64(0) {
		value := protoreflect.ValueOfUint64(x.VpCurrentDeposit)
		if !f(fd_Permission_vp_current_deposit, value) {
			return
		}
	}
	if x.VpSummaryDigestSri != "" {
		value := protoreflect.ValueOfString(x.VpSummaryDigestSri)
		if !f(fd_Permission_vp_summary_digest_sri, value) {
			return
		}
	}
	if x.VpTermRequested != nil {
		value := protoreflect.ValueOfMessage(x.VpTermRequested.ProtoReflect())
		if !f(fd_Permission_vp_term_requested, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Permission) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "veranablockchain.permission.Permission.id":
		return x.Id != uint64(0)
	case "veranablockchain.permission.Permission.schema_id":
		return x.SchemaId != uint64(0)
	case "veranablockchain.permission.Permission.type":
		return x.Type_ != 0
	case "veranablockchain.permission.Permission.did":
		return x.Did != ""
	case "veranablockchain.permission.Permission.grantee":
		return x.Grantee != ""
	case "veranablockchain.permission.Permission.created":
		return x.Created != nil
	case "veranablockchain.permission.Permission.created_by":
		return x.CreatedBy != ""
	case "veranablockchain.permission.Permission.extended":
		return x.Extended != nil
	case "veranablockchain.permission.Permission.extended_by":
		return x.ExtendedBy != ""
	case "veranablockchain.permission.Permission.slashed":
		return x.Slashed != nil
	case "veranablockchain.permission.Permission.slashed_by":
		return x.SlashedBy != ""
	case "veranablockchain.permission.Permission.repaid":
		return x.Repaid != nil
	case "veranablockchain.permission.Permission.repaid_by":
		return x.RepaidBy != ""
	case "veranablockchain.permission.Permission.effective_from":
		return x.EffectiveFrom != nil
	case "veranablockchain.permission.Permission.effective_until":
		return x.EffectiveUntil != nil
	case "veranablockchain.permission.Permission.modified":
		return x.Modified != nil
	case "veranablockchain.permission.Permission.validation_fees":
		return x.ValidationFees != uint64(0)
	case "veranablockchain.permission.Permission.issuance_fees":
		return x.IssuanceFees != uint64(0)
	case "veranablockchain.permission.Permission.verification_fees":
		return x.VerificationFees != uint64(0)
	case "veranablockchain.permission.Permission.deposit":
		return x.Deposit != uint64(0)
	case "veranablockchain.permission.Permission.slashed_deposit":
		return x.SlashedDeposit != uint64(0)
	case "veranablockchain.permission.Permission.repaid_deposit":
		return x.RepaidDeposit != uint64(0)
	case "veranablockchain.permission.Permission.revoked":
		return x.Revoked != nil
	case "veranablockchain.permission.Permission.revoked_by":
		return x.RevokedBy != ""
	case "veranablockchain.permission.Permission.terminated":
		return x.Terminated != nil
	case "veranablockchain.permission.Permission.terminated_by":
		return x.TerminatedBy != ""
	case "veranablockchain.permission.Permission.country":
		return x.Country != ""
	case "veranablockchain.permission.Permission.validator_perm_id":
		return x.ValidatorPermId != uint64(0)
	case "veranablockchain.permission.Permission.vp_state":
		return x.VpState != 0
	case "veranablockchain.permission.Permission.vp_exp":
		return x.VpExp != nil
	case "veranablockchain.permission.Permission.vp_last_state_change":
		return x.VpLastStateChange != nil
	case "veranablockchain.permission.Permission.vp_validator_deposit":
		return x.VpValidatorDeposit != uint64(0)
	case "veranablockchain.permission.Permission.vp_current_fees":
		return x.VpCurrentFees != uint64(0)
	case "veranablockchain.permission.Permission.vp_current_deposit":
		return x.VpCurrentDeposit != uint64(0)
	case "veranablockchain.permission.Permission.vp_summary_digest_sri":
		return x.VpSummaryDigestSri != ""
	case "veranablockchain.permission.Permission.vp_term_requested":
		return x.VpTermRequested != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.Permission"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.Permission does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Permission) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "veranablockchain.permission.Permission.id":
		x.Id = uint64(0)
	case "veranablockchain.permission.Permission.schema_id":
		x.SchemaId = uint64(0)
	case "veranablockchain.permission.Permission.type":
		x.Type_ = 0
	case "veranablockchain.permission.Permission.did":
		x.Did = ""
	case "veranablockchain.permission.Permission.grantee":
		x.Grantee = ""
	case "veranablockchain.permission.Permission.created":
		x.Created = nil
	case "veranablockchain.permission.Permission.created_by":
		x.CreatedBy = ""
	case "veranablockchain.permission.Permission.extended":
		x.Extended = nil
	case "veranablockchain.permission.Permission.extended_by":
		x.ExtendedBy = ""
	case "veranablockchain.permission.Permission.slashed":
		x.Slashed = nil
	case "veranablockchain.permission.Permission.slashed_by":
		x.SlashedBy = ""
	case "veranablockchain.permission.Permission.repaid":
		x.Repaid = nil
	case "veranablockchain.permission.Permission.repaid_by":
		x.RepaidBy = ""
	case "veranablockchain.permission.Permission.effective_from":
		x.EffectiveFrom = nil
	case "veranablockchain.permission.Permission.effective_until":
		x.EffectiveUntil = nil
	case "veranablockchain.permission.Permission.modified":
		x.Modified = nil
	case "veranablockchain.permission.Permission.validation_fees":
		x.ValidationFees = uint64(0)
	case "veranablockchain.permission.Permission.issuance_fees":
		x.IssuanceFees = uint64(0)
	case "veranablockchain.permission.Permission.verification_fees":
		x.VerificationFees = uint64(0)
	case "veranablockchain.permission.Permission.deposit":
		x.Deposit = uint64(0)
	case "veranablockchain.permission.Permission.slashed_deposit":
		x.SlashedDeposit = uint64(0)
	case "veranablockchain.permission.Permission.repaid_deposit":
		x.RepaidDeposit = uint64(0)
	case "veranablockchain.permission.Permission.revoked":
		x.Revoked = nil
	case "veranablockchain.permission.Permission.revoked_by":
		x.RevokedBy = ""
	case "veranablockchain.permission.Permission.terminated":
		x.Terminated = nil
	case "veranablockchain.permission.Permission.terminated_by":
		x.TerminatedBy = ""
	case "veranablockchain.permission.Permission.country":
		x.Country = ""
	case "veranablockchain.permission.Permission.validator_perm_id":
		x.ValidatorPermId = uint64(0)
	case "veranablockchain.permission.Permission.vp_state":
		x.VpState = 0
	case "veranablockchain.permission.Permission.vp_exp":
		x.VpExp = nil
	case "veranablockchain.permission.Permission.vp_last_state_change":
		x.VpLastStateChange = nil
	case "veranablockchain.permission.Permission.vp_validator_deposit":
		x.VpValidatorDeposit = uint64(0)
	case "veranablockchain.permission.Permission.vp_current_fees":
		x.VpCurrentFees = uint64(0)
	case "veranablockchain.permission.Permission.vp_current_deposit":
		x.VpCurrentDeposit = uint64(0)
	case "veranablockchain.permission.Permission.vp_summary_digest_sri":
		x.VpSummaryDigestSri = ""
	case "veranablockchain.permission.Permission.vp_term_requested":
		x.VpTermRequested = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.Permission"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.Permission does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Permission) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "veranablockchain.permission.Permission.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.permission.Permission.schema_id":
		value := x.SchemaId
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.permission.Permission.type":
		value := x.Type_
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "veranablockchain.permission.Permission.did":
		value := x.Did
		return protoreflect.ValueOfString(value)
	case "veranablockchain.permission.Permission.grantee":
		value := x.Grantee
		return protoreflect.ValueOfString(value)
	case "veranablockchain.permission.Permission.created":
		value := x.Created
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "veranablockchain.permission.Permission.created_by":
		value := x.CreatedBy
		return protoreflect.ValueOfString(value)
	case "veranablockchain.permission.Permission.extended":
		value := x.Extended
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "veranablockchain.permission.Permission.extended_by":
		value := x.ExtendedBy
		return protoreflect.ValueOfString(value)
	case "veranablockchain.permission.Permission.slashed":
		value := x.Slashed
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "veranablockchain.permission.Permission.slashed_by":
		value := x.SlashedBy
		return protoreflect.ValueOfString(value)
	case "veranablockchain.permission.Permission.repaid":
		value := x.Repaid
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "veranablockchain.permission.Permission.repaid_by":
		value := x.RepaidBy
		return protoreflect.ValueOfString(value)
	case "veranablockchain.permission.Permission.effective_from":
		value := x.EffectiveFrom
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "veranablockchain.permission.Permission.effective_until":
		value := x.EffectiveUntil
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "veranablockchain.permission.Permission.modified":
		value := x.Modified
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "veranablockchain.permission.Permission.validation_fees":
		value := x.ValidationFees
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.permission.Permission.issuance_fees":
		value := x.IssuanceFees
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.permission.Permission.verification_fees":
		value := x.VerificationFees
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.permission.Permission.deposit":
		value := x.Deposit
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.permission.Permission.slashed_deposit":
		value := x.SlashedDeposit
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.permission.Permission.repaid_deposit":
		value := x.RepaidDeposit
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.permission.Permission.revoked":
		value := x.Revoked
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "veranablockchain.permission.Permission.revoked_by":
		value := x.RevokedBy
		return protoreflect.ValueOfString(value)
	case "veranablockchain.permission.Permission.terminated":
		value := x.Terminated
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "veranablockchain.permission.Permission.terminated_by":
		value := x.TerminatedBy
		return protoreflect.ValueOfString(value)
	case "veranablockchain.permission.Permission.country":
		value := x.Country
		return protoreflect.ValueOfString(value)
	case "veranablockchain.permission.Permission.validator_perm_id":
		value := x.ValidatorPermId
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.permission.Permission.vp_state":
		value := x.VpState
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "veranablockchain.permission.Permission.vp_exp":
		value := x.VpExp
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "veranablockchain.permission.Permission.vp_last_state_change":
		value := x.VpLastStateChange
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "veranablockchain.permission.Permission.vp_validator_deposit":
		value := x.VpValidatorDeposit
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.permission.Permission.vp_current_fees":
		value := x.VpCurrentFees
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.permission.Permission.vp_current_deposit":
		value := x.VpCurrentDeposit
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.permission.Permission.vp_summary_digest_sri":
		value := x.VpSummaryDigestSri
		return protoreflect.ValueOfString(value)
	case "veranablockchain.permission.Permission.vp_term_requested":
		value := x.VpTermRequested
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.Permission"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.Permission does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Permission) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "veranablockchain.permission.Permission.id":
		x.Id = value.Uint()
	case "veranablockchain.permission.Permission.schema_id":
		x.SchemaId = value.Uint()
	case "veranablockchain.permission.Permission.type":
		x.Type_ = (PermissionType)(value.Enum())
	case "veranablockchain.permission.Permission.did":
		x.Did = value.Interface().(string)
	case "veranablockchain.permission.Permission.grantee":
		x.Grantee = value.Interface().(string)
	case "veranablockchain.permission.Permission.created":
		x.Created = value.Message().Interface().(*timestamppb.Timestamp)
	case "veranablockchain.permission.Permission.created_by":
		x.CreatedBy = value.Interface().(string)
	case "veranablockchain.permission.Permission.extended":
		x.Extended = value.Message().Interface().(*timestamppb.Timestamp)
	case "veranablockchain.permission.Permission.extended_by":
		x.ExtendedBy = value.Interface().(string)
	case "veranablockchain.permission.Permission.slashed":
		x.Slashed = value.Message().Interface().(*timestamppb.Timestamp)
	case "veranablockchain.permission.Permission.slashed_by":
		x.SlashedBy = value.Interface().(string)
	case "veranablockchain.permission.Permission.repaid":
		x.Repaid = value.Message().Interface().(*timestamppb.Timestamp)
	case "veranablockchain.permission.Permission.repaid_by":
		x.RepaidBy = value.Interface().(string)
	case "veranablockchain.permission.Permission.effective_from":
		x.EffectiveFrom = value.Message().Interface().(*timestamppb.Timestamp)
	case "veranablockchain.permission.Permission.effective_until":
		x.EffectiveUntil = value.Message().Interface().(*timestamppb.Timestamp)
	case "veranablockchain.permission.Permission.modified":
		x.Modified = value.Message().Interface().(*timestamppb.Timestamp)
	case "veranablockchain.permission.Permission.validation_fees":
		x.ValidationFees = value.Uint()
	case "veranablockchain.permission.Permission.issuance_fees":
		x.IssuanceFees = value.Uint()
	case "veranablockchain.permission.Permission.verification_fees":
		x.VerificationFees = value.Uint()
	case "veranablockchain.permission.Permission.deposit":
		x.Deposit = value.Uint()
	case "veranablockchain.permission.Permission.slashed_deposit":
		x.SlashedDeposit = value.Uint()
	case "veranablockchain.permission.Permission.repaid_deposit":
		x.RepaidDeposit = value.Uint()
	case "veranablockchain.permission.Permission.revoked":
		x.Revoked = value.Message().Interface().(*timestamppb.Timestamp)
	case "veranablockchain.permission.Permission.revoked_by":
		x.RevokedBy = value.Interface().(string)
	case "veranablockchain.permission.Permission.terminated":
		x.Terminated = value.Message().Interface().(*timestamppb.Timestamp)
	case "veranablockchain.permission.Permission.terminated_by":
		x.TerminatedBy = value.Interface().(string)
	case "veranablockchain.permission.Permission.country":
		x.Country = value.Interface().(string)
	case "veranablockchain.permission.Permission.validator_perm_id":
		x.ValidatorPermId = value.Uint()
	case "veranablockchain.permission.Permission.vp_state":
		x.VpState = (ValidationState)(value.Enum())
	case "veranablockchain.permission.Permission.vp_exp":
		x.VpExp = value.Message().Interface().(*timestamppb.Timestamp)
	case "veranablockchain.permission.Permission.vp_last_state_change":
		x.VpLastStateChange = value.Message().Interface().(*timestamppb.Timestamp)
	case "veranablockchain.permission.Permission.vp_validator_deposit":
		x.VpValidatorDeposit = value.Uint()
	case "veranablockchain.permission.Permission.vp_current_fees":
		x.VpCurrentFees = value.Uint()
	case "veranablockchain.permission.Permission.vp_current_deposit":
		x.VpCurrentDeposit = value.Uint()
	case "veranablockchain.permission.Permission.vp_summary_digest_sri":
		x.VpSummaryDigestSri = value.Interface().(string)
	case "veranablockchain.permission.Permission.vp_term_requested":
		x.VpTermRequested = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.Permission"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.Permission does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Permission) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "veranablockchain.permission.Permission.created":
		if x.Created == nil {
			x.Created = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Created.ProtoReflect())
	case "veranablockchain.permission.Permission.extended":
		if x.Extended == nil {
			x.Extended = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Extended.ProtoReflect())
	case "veranablockchain.permission.Permission.slashed":
		if x.Slashed == nil {
			x.Slashed = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Slashed.ProtoReflect())
	case "veranablockchain.permission.Permission.repaid":
		if x.Repaid == nil {
			x.Repaid = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Repaid.ProtoReflect())
	case "veranablockchain.permission.Permission.effective_from":
		if x.EffectiveFrom == nil {
			x.EffectiveFrom = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.EffectiveFrom.ProtoReflect())
	case "veranablockchain.permission.Permission.effective_until":
		if x.EffectiveUntil == nil {
			x.EffectiveUntil = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.EffectiveUntil.ProtoReflect())
	case "veranablockchain.permission.Permission.modified":
		if x.Modified == nil {
			x.Modified = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Modified.ProtoReflect())
	case "veranablockchain.permission.Permission.revoked":
		if x.Revoked == nil {
			x.Revoked = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Revoked.ProtoReflect())
	case "veranablockchain.permission.Permission.terminated":
		if x.Terminated == nil {
			x.Terminated = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Terminated.ProtoReflect())
	case "veranablockchain.permission.Permission.vp_exp":
		if x.VpExp == nil {
			x.VpExp = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.VpExp.ProtoReflect())
	case "veranablockchain.permission.Permission.vp_last_state_change":
		if x.VpLastStateChange == nil {
			x.VpLastStateChange = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.VpLastStateChange.ProtoReflect())
	case "veranablockchain.permission.Permission.vp_term_requested":
		if x.VpTermRequested == nil {
			x.VpTermRequested = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.VpTermRequested.ProtoReflect())
	case "veranablockchain.permission.Permission.id":
		panic(fmt.Errorf("field id of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.schema_id":
		panic(fmt.Errorf("field schema_id of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.type":
		panic(fmt.Errorf("field type of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.did":
		panic(fmt.Errorf("field did of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.grantee":
		panic(fmt.Errorf("field grantee of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.created_by":
		panic(fmt.Errorf("field created_by of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.extended_by":
		panic(fmt.Errorf("field extended_by of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.slashed_by":
		panic(fmt.Errorf("field slashed_by of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.repaid_by":
		panic(fmt.Errorf("field repaid_by of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.validation_fees":
		panic(fmt.Errorf("field validation_fees of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.issuance_fees":
		panic(fmt.Errorf("field issuance_fees of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.verification_fees":
		panic(fmt.Errorf("field verification_fees of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.deposit":
		panic(fmt.Errorf("field deposit of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.slashed_deposit":
		panic(fmt.Errorf("field slashed_deposit of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.repaid_deposit":
		panic(fmt.Errorf("field repaid_deposit of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.revoked_by":
		panic(fmt.Errorf("field revoked_by of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.terminated_by":
		panic(fmt.Errorf("field terminated_by of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.country":
		panic(fmt.Errorf("field country of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.validator_perm_id":
		panic(fmt.Errorf("field validator_perm_id of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.vp_state":
		panic(fmt.Errorf("field vp_state of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.vp_validator_deposit":
		panic(fmt.Errorf("field vp_validator_deposit of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.vp_current_fees":
		panic(fmt.Errorf("field vp_current_fees of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.vp_current_deposit":
		panic(fmt.Errorf("field vp_current_deposit of message veranablockchain.permission.Permission is not mutable"))
	case "veranablockchain.permission.Permission.vp_summary_digest_sri":
		panic(fmt.Errorf("field vp_summary_digest_sri of message veranablockchain.permission.Permission is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.Permission"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.Permission does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Permission) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "veranablockchain.permission.Permission.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.permission.Permission.schema_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.permission.Permission.type":
		return protoreflect.ValueOfEnum(0)
	case "veranablockchain.permission.Permission.did":
		return protoreflect.ValueOfString("")
	case "veranablockchain.permission.Permission.grantee":
		return protoreflect.ValueOfString("")
	case "veranablockchain.permission.Permission.created":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "veranablockchain.permission.Permission.created_by":
		return protoreflect.ValueOfString("")
	case "veranablockchain.permission.Permission.extended":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "veranablockchain.permission.Permission.extended_by":
		return protoreflect.ValueOfString("")
	case "veranablockchain.permission.Permission.slashed":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "veranablockchain.permission.Permission.slashed_by":
		return protoreflect.ValueOfString("")
	case "veranablockchain.permission.Permission.repaid":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "veranablockchain.permission.Permission.repaid_by":
		return protoreflect.ValueOfString("")
	case "veranablockchain.permission.Permission.effective_from":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "veranablockchain.permission.Permission.effective_until":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "veranablockchain.permission.Permission.modified":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "veranablockchain.permission.Permission.validation_fees":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.permission.Permission.issuance_fees":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.permission.Permission.verification_fees":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.permission.Permission.deposit":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.permission.Permission.slashed_deposit":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.permission.Permission.repaid_deposit":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.permission.Permission.revoked":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "veranablockchain.permission.Permission.revoked_by":
		return protoreflect.ValueOfString("")
	case "veranablockchain.permission.Permission.terminated":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "veranablockchain.permission.Permission.terminated_by":
		return protoreflect.ValueOfString("")
	case "veranablockchain.permission.Permission.country":
		return protoreflect.ValueOfString("")
	case "veranablockchain.permission.Permission.validator_perm_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.permission.Permission.vp_state":
		return protoreflect.ValueOfEnum(0)
	case "veranablockchain.permission.Permission.vp_exp":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "veranablockchain.permission.Permission.vp_last_state_change":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "veranablockchain.permission.Permission.vp_validator_deposit":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.permission.Permission.vp_current_fees":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.permission.Permission.vp_current_deposit":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.permission.Permission.vp_summary_digest_sri":
		return protoreflect.ValueOfString("")
	case "veranablockchain.permission.Permission.vp_term_requested":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.Permission"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.Permission does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Permission) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in veranablockchain.permission.Permission", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Permission) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Permission) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Permission) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Permission) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Permission)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.SchemaId != 0 {
			n += 1 + runtime.Sov(uint64(x.SchemaId))
		}
		if x.Type_ != 0 {
			n += 1 + runtime.Sov(uint64(x.Type_))
		}
		l = len(x.Did)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Grantee)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Created != nil {
			l = options.Size(x.Created)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CreatedBy)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Extended != nil {
			l = options.Size(x.Extended)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ExtendedBy)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Slashed != nil {
			l = options.Size(x.Slashed)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SlashedBy)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Repaid != nil {
			l = options.Size(x.Repaid)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RepaidBy)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EffectiveFrom != nil {
			l = options.Size(x.EffectiveFrom)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EffectiveUntil != nil {
			l = options.Size(x.EffectiveUntil)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Modified != nil {
			l = options.Size(x.Modified)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.ValidationFees != 0 {
			n += 2 + runtime.Sov(uint64(x.ValidationFees))
		}
		if x.IssuanceFees != 0 {
			n += 2 + runtime.Sov(uint64(x.IssuanceFees))
		}
		if x.VerificationFees != 0 {
			n += 2 + runtime.Sov(uint64(x.VerificationFees))
		}
		if x.Deposit != 0 {
			n += 2 + runtime.Sov(uint64(x.Deposit))
		}
		if x.SlashedDeposit != 0 {
			n += 2 + runtime.Sov(uint64(x.SlashedDeposit))
		}
		if x.RepaidDeposit != 0 {
			n += 2 + runtime.Sov(uint64(x.RepaidDeposit))
		}
		if x.Revoked != nil {
			l = options.Size(x.Revoked)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RevokedBy)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.Terminated != nil {
			l = options.Size(x.Terminated)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TerminatedBy)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Country)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.ValidatorPermId != 0 {
			n += 2 + runtime.Sov(uint64(x.ValidatorPermId))
		}
		if x.VpState != 0 {
			n += 2 + runtime.Sov(uint64(x.VpState))
		}
		if x.VpExp != nil {
			l = options.Size(x.VpExp)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.VpLastStateChange != nil {
			l = options.Size(x.VpLastStateChange)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.VpValidatorDeposit != 0 {
			n += 2 + runtime.Sov(uint64(x.VpValidatorDeposit))
		}
		if x.VpCurrentFees != 0 {
			n += 2 + runtime.Sov(uint64(x.VpCurrentFees))
		}
		if x.VpCurrentDeposit != 0 {
			n += 2 + runtime.Sov(uint64(x.VpCurrentDeposit))
		}
		l = len(x.VpSummaryDigestSri)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.VpTermRequested != nil {
			l = options.Size(x.VpTermRequested)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Permission)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.VpTermRequested != nil {
			encoded, err := options.Marshal(x.VpTermRequested)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa2
		}
		if len(x.VpSummaryDigestSri) > 0 {
			i -= len(x.VpSummaryDigestSri)
			copy(dAtA[i:], x.VpSummaryDigestSri)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.VpSummaryDigestSri)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
		if x.VpCurrentDeposit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.VpCurrentDeposit))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x90
		}
		if x.VpCurrentFees != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.VpCurrentFees))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x88
		}
		if x.VpValidatorDeposit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.VpValidatorDeposit))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x80
		}
		if x.VpLastStateChange != nil {
			encoded, err := options.Marshal(x.VpLastStateChange)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
		if x.VpExp != nil {
			encoded, err := options.Marshal(x.VpExp)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
		if x.VpState != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.VpState))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe8
		}
		if x.ValidatorPermId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidatorPermId))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe0
		}
		if len(x.Country) > 0 {
			i -= len(x.Country)
			copy(dAtA[i:], x.Country)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Country)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xda
		}
		if len(x.TerminatedBy) > 0 {
			i -= len(x.TerminatedBy)
			copy(dAtA[i:], x.TerminatedBy)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TerminatedBy)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
		if x.Terminated != nil {
			encoded, err := options.Marshal(x.Terminated)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
		if len(x.RevokedBy) > 0 {
			i -= len(x.RevokedBy)
			copy(dAtA[i:], x.RevokedBy)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RevokedBy)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
		if x.Revoked != nil {
			encoded, err := options.Marshal(x.Revoked)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
		if x.RepaidDeposit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RepaidDeposit))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb0
		}
		if x.SlashedDeposit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SlashedDeposit))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa8
		}
		if x.Deposit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Deposit))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa0
		}
		if x.VerificationFees != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.VerificationFees))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x98
		}
		if x.IssuanceFees != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.IssuanceFees))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x90
		}
		if x.ValidationFees != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidationFees))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x88
		}
		if x.Modified != nil {
			encoded, err := options.Marshal(x.Modified)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if x.EffectiveUntil != nil {
			encoded, err := options.Marshal(x.EffectiveUntil)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x7a
		}
		if x.EffectiveFrom != nil {
			encoded, err := options.Marshal(x.EffectiveFrom)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.RepaidBy) > 0 {
			i -= len(x.RepaidBy)
			copy(dAtA[i:], x.RepaidBy)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RepaidBy)))
			i--
			dAtA[i] = 0x6a
		}
		if x.Repaid != nil {
			encoded, err := options.Marshal(x.Repaid)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.SlashedBy) > 0 {
			i -= len(x.SlashedBy)
			copy(dAtA[i:], x.SlashedBy)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SlashedBy)))
			i--
			dAtA[i] = 0x5a
		}
		if x.Slashed != nil {
			encoded, err := options.Marshal(x.Slashed)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.ExtendedBy) > 0 {
			i -= len(x.ExtendedBy)
			copy(dAtA[i:], x.ExtendedBy)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExtendedBy)))
			i--
			dAtA[i] = 0x4a
		}
		if x.Extended != nil {
			encoded, err := options.Marshal(x.Extended)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.CreatedBy) > 0 {
			i -= len(x.CreatedBy)
			copy(dAtA[i:], x.CreatedBy)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CreatedBy)))
			i--
			dAtA[i] = 0x3a
		}
		if x.Created != nil {
			encoded, err := options.Marshal(x.Created)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Grantee) > 0 {
			i -= len(x.Grantee)
			copy(dAtA[i:], x.Grantee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Grantee)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Did) > 0 {
			i -= len(x.Did)
			copy(dAtA[i:], x.Did)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Did)))
			i--
			dAtA[i] = 0x22
		}
		if x.Type_ != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Type_))
			i--
			dAtA[i] = 0x18
		}
		if x.SchemaId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SchemaId))
			i--
			dAtA[i] = 0x10
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Permission)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Permission: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Permission: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SchemaId", wireType)
				}
				x.SchemaId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SchemaId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				x.Type_ = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Type_ |= PermissionType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Did = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Grantee", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Grantee = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Created == nil {
					x.Created = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Created); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CreatedBy = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Extended", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Extended == nil {
					x.Extended = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Extended); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExtendedBy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExtendedBy = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Slashed", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Slashed == nil {
					x.Slashed = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Slashed); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlashedBy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SlashedBy = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Repaid", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Repaid == nil {
					x.Repaid = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Repaid); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RepaidBy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RepaidBy = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EffectiveFrom", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EffectiveFrom == nil {
					x.EffectiveFrom = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EffectiveFrom); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EffectiveUntil", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EffectiveUntil == nil {
					x.EffectiveUntil = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EffectiveUntil); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Modified", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Modified == nil {
					x.Modified = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Modified); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 17:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidationFees", wireType)
				}
				x.ValidationFees = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidationFees |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 18:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IssuanceFees", wireType)
				}
				x.IssuanceFees = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.IssuanceFees |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 19:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VerificationFees", wireType)
				}
				x.VerificationFees = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.VerificationFees |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 20:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
				}
				x.Deposit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Deposit |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 21:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlashedDeposit", wireType)
				}
				x.SlashedDeposit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SlashedDeposit |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 22:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RepaidDeposit", wireType)
				}
				x.RepaidDeposit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RepaidDeposit |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 23:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Revoked", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Revoked == nil {
					x.Revoked = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Revoked); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 24:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RevokedBy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RevokedBy = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 25:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Terminated", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Terminated == nil {
					x.Terminated = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Terminated); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 26:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TerminatedBy", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TerminatedBy = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 27:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Country = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 28:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatorPermId", wireType)
				}
				x.ValidatorPermId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidatorPermId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 29:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VpState", wireType)
				}
				x.VpState = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.VpState |= ValidationState(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 30:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VpExp", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.VpExp == nil {
					x.VpExp = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.VpExp); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 31:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VpLastStateChange", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.VpLastStateChange == nil {
					x.VpLastStateChange = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.VpLastStateChange); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 32:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VpValidatorDeposit", wireType)
				}
				x.VpValidatorDeposit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.VpValidatorDeposit |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 33:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VpCurrentFees", wireType)
				}
				x.VpCurrentFees = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.VpCurrentFees |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 34:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VpCurrentDeposit", wireType)
				}
				x.VpCurrentDeposit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.VpCurrentDeposit |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 35:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VpSummaryDigestSri", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VpSummaryDigestSri = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 36:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VpTermRequested", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.VpTermRequested == nil {
					x.VpTermRequested = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.VpTermRequested); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_PermissionSession_4_list)(nil)

type _PermissionSession_4_list struct {
	list *[]*SessionAuthz
}

func (x *_PermissionSession_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PermissionSession_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_PermissionSession_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SessionAuthz)
	(*x.list)[i] = concreteValue
}

func (x *_PermissionSession_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SessionAuthz)
	*x.list = append(*x.list, concreteValue)
}

func (x *_PermissionSession_4_list) AppendMutable() protoreflect.Value {
	v := new(SessionAuthz)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PermissionSession_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_PermissionSession_4_list) NewElement() protoreflect.Value {
	v := new(SessionAuthz)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PermissionSession_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_PermissionSession               protoreflect.MessageDescriptor
	fd_PermissionSession_id            protoreflect.FieldDescriptor
	fd_PermissionSession_controller    protoreflect.FieldDescriptor
	fd_PermissionSession_agent_perm_id protoreflect.FieldDescriptor
	fd_PermissionSession_authz         protoreflect.FieldDescriptor
	fd_PermissionSession_created       protoreflect.FieldDescriptor
	fd_PermissionSession_modified      protoreflect.FieldDescriptor
)

func init() {
	file_veranablockchain_permission_types_proto_init()
	md_PermissionSession = File_veranablockchain_permission_types_proto.Messages().ByName("PermissionSession")
	fd_PermissionSession_id = md_PermissionSession.Fields().ByName("id")
	fd_PermissionSession_controller = md_PermissionSession.Fields().ByName("controller")
	fd_PermissionSession_agent_perm_id = md_PermissionSession.Fields().ByName("agent_perm_id")
	fd_PermissionSession_authz = md_PermissionSession.Fields().ByName("authz")
	fd_PermissionSession_created = md_PermissionSession.Fields().ByName("created")
	fd_PermissionSession_modified = md_PermissionSession.Fields().ByName("modified")
}

var _ protoreflect.Message = (*fastReflection_PermissionSession)(nil)

type fastReflection_PermissionSession PermissionSession

func (x *PermissionSession) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PermissionSession)(x)
}

func (x *PermissionSession) slowProtoReflect() protoreflect.Message {
	mi := &file_veranablockchain_permission_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PermissionSession_messageType fastReflection_PermissionSession_messageType
var _ protoreflect.MessageType = fastReflection_PermissionSession_messageType{}

type fastReflection_PermissionSession_messageType struct{}

func (x fastReflection_PermissionSession_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PermissionSession)(nil)
}
func (x fastReflection_PermissionSession_messageType) New() protoreflect.Message {
	return new(fastReflection_PermissionSession)
}
func (x fastReflection_PermissionSession_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PermissionSession
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PermissionSession) Descriptor() protoreflect.MessageDescriptor {
	return md_PermissionSession
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PermissionSession) Type() protoreflect.MessageType {
	return _fastReflection_PermissionSession_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PermissionSession) New() protoreflect.Message {
	return new(fastReflection_PermissionSession)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PermissionSession) Interface() protoreflect.ProtoMessage {
	return (*PermissionSession)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PermissionSession) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != "" {
		value := protoreflect.ValueOfString(x.Id)
		if !f(fd_PermissionSession_id, value) {
			return
		}
	}
	if x.Controller != "" {
		value := protoreflect.ValueOfString(x.Controller)
		if !f(fd_PermissionSession_controller, value) {
			return
		}
	}
	if x.AgentPermId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AgentPermId)
		if !f(fd_PermissionSession_agent_perm_id, value) {
			return
		}
	}
	if len(x.Authz) != 0 {
		value := protoreflect.ValueOfList(&_PermissionSession_4_list{list: &x.Authz})
		if !f(fd_PermissionSession_authz, value) {
			return
		}
	}
	if x.Created != nil {
		value := protoreflect.ValueOfMessage(x.Created.ProtoReflect())
		if !f(fd_PermissionSession_created, value) {
			return
		}
	}
	if x.Modified != nil {
		value := protoreflect.ValueOfMessage(x.Modified.ProtoReflect())
		if !f(fd_PermissionSession_modified, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PermissionSession) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "veranablockchain.permission.PermissionSession.id":
		return x.Id != ""
	case "veranablockchain.permission.PermissionSession.controller":
		return x.Controller != ""
	case "veranablockchain.permission.PermissionSession.agent_perm_id":
		return x.AgentPermId != uint64(0)
	case "veranablockchain.permission.PermissionSession.authz":
		return len(x.Authz) != 0
	case "veranablockchain.permission.PermissionSession.created":
		return x.Created != nil
	case "veranablockchain.permission.PermissionSession.modified":
		return x.Modified != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.PermissionSession"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.PermissionSession does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PermissionSession) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "veranablockchain.permission.PermissionSession.id":
		x.Id = ""
	case "veranablockchain.permission.PermissionSession.controller":
		x.Controller = ""
	case "veranablockchain.permission.PermissionSession.agent_perm_id":
		x.AgentPermId = uint64(0)
	case "veranablockchain.permission.PermissionSession.authz":
		x.Authz = nil
	case "veranablockchain.permission.PermissionSession.created":
		x.Created = nil
	case "veranablockchain.permission.PermissionSession.modified":
		x.Modified = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.PermissionSession"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.PermissionSession does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PermissionSession) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "veranablockchain.permission.PermissionSession.id":
		value := x.Id
		return protoreflect.ValueOfString(value)
	case "veranablockchain.permission.PermissionSession.controller":
		value := x.Controller
		return protoreflect.ValueOfString(value)
	case "veranablockchain.permission.PermissionSession.agent_perm_id":
		value := x.AgentPermId
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.permission.PermissionSession.authz":
		if len(x.Authz) == 0 {
			return protoreflect.ValueOfList(&_PermissionSession_4_list{})
		}
		listValue := &_PermissionSession_4_list{list: &x.Authz}
		return protoreflect.ValueOfList(listValue)
	case "veranablockchain.permission.PermissionSession.created":
		value := x.Created
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "veranablockchain.permission.PermissionSession.modified":
		value := x.Modified
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.PermissionSession"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.PermissionSession does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PermissionSession) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "veranablockchain.permission.PermissionSession.id":
		x.Id = value.Interface().(string)
	case "veranablockchain.permission.PermissionSession.controller":
		x.Controller = value.Interface().(string)
	case "veranablockchain.permission.PermissionSession.agent_perm_id":
		x.AgentPermId = value.Uint()
	case "veranablockchain.permission.PermissionSession.authz":
		lv := value.List()
		clv := lv.(*_PermissionSession_4_list)
		x.Authz = *clv.list
	case "veranablockchain.permission.PermissionSession.created":
		x.Created = value.Message().Interface().(*timestamppb.Timestamp)
	case "veranablockchain.permission.PermissionSession.modified":
		x.Modified = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.PermissionSession"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.PermissionSession does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PermissionSession) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "veranablockchain.permission.PermissionSession.authz":
		if x.Authz == nil {
			x.Authz = []*SessionAuthz{}
		}
		value := &_PermissionSession_4_list{list: &x.Authz}
		return protoreflect.ValueOfList(value)
	case "veranablockchain.permission.PermissionSession.created":
		if x.Created == nil {
			x.Created = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Created.ProtoReflect())
	case "veranablockchain.permission.PermissionSession.modified":
		if x.Modified == nil {
			x.Modified = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Modified.ProtoReflect())
	case "veranablockchain.permission.PermissionSession.id":
		panic(fmt.Errorf("field id of message veranablockchain.permission.PermissionSession is not mutable"))
	case "veranablockchain.permission.PermissionSession.controller":
		panic(fmt.Errorf("field controller of message veranablockchain.permission.PermissionSession is not mutable"))
	case "veranablockchain.permission.PermissionSession.agent_perm_id":
		panic(fmt.Errorf("field agent_perm_id of message veranablockchain.permission.PermissionSession is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.PermissionSession"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.PermissionSession does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PermissionSession) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "veranablockchain.permission.PermissionSession.id":
		return protoreflect.ValueOfString("")
	case "veranablockchain.permission.PermissionSession.controller":
		return protoreflect.ValueOfString("")
	case "veranablockchain.permission.PermissionSession.agent_perm_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.permission.PermissionSession.authz":
		list := []*SessionAuthz{}
		return protoreflect.ValueOfList(&_PermissionSession_4_list{list: &list})
	case "veranablockchain.permission.PermissionSession.created":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "veranablockchain.permission.PermissionSession.modified":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.PermissionSession"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.PermissionSession does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PermissionSession) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in veranablockchain.permission.PermissionSession", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PermissionSession) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PermissionSession) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PermissionSession) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PermissionSession) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PermissionSession)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Id)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Controller)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AgentPermId != 0 {
			n += 1 + runtime.Sov(uint64(x.AgentPermId))
		}
		if len(x.Authz) > 0 {
			for _, e := range x.Authz {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Created != nil {
			l = options.Size(x.Created)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Modified != nil {
			l = options.Size(x.Modified)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PermissionSession)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Modified != nil {
			encoded, err := options.Marshal(x.Modified)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.Created != nil {
			encoded, err := options.Marshal(x.Created)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Authz) > 0 {
			for iNdEx := len(x.Authz) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Authz[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if x.AgentPermId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AgentPermId))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Controller) > 0 {
			i -= len(x.Controller)
			copy(dAtA[i:], x.Controller)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Controller)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Id) > 0 {
			i -= len(x.Id)
			copy(dAtA[i:], x.Id)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Id)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PermissionSession)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PermissionSession: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PermissionSession: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Id = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Controller = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AgentPermId", wireType)
				}
				x.AgentPermId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AgentPermId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Authz", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Authz = append(x.Authz, &SessionAuthz{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Authz[len(x.Authz)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Created == nil {
					x.Created = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Created); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Modified", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Modified == nil {
					x.Modified = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Modified); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SessionAuthz                      protoreflect.MessageDescriptor
	fd_SessionAuthz_executor_perm_id     protoreflect.FieldDescriptor
	fd_SessionAuthz_beneficiary_perm_id  protoreflect.FieldDescriptor
	fd_SessionAuthz_wallet_agent_perm_id protoreflect.FieldDescriptor
)

func init() {
	file_veranablockchain_permission_types_proto_init()
	md_SessionAuthz = File_veranablockchain_permission_types_proto.Messages().ByName("SessionAuthz")
	fd_SessionAuthz_executor_perm_id = md_SessionAuthz.Fields().ByName("executor_perm_id")
	fd_SessionAuthz_beneficiary_perm_id = md_SessionAuthz.Fields().ByName("beneficiary_perm_id")
	fd_SessionAuthz_wallet_agent_perm_id = md_SessionAuthz.Fields().ByName("wallet_agent_perm_id")
}

var _ protoreflect.Message = (*fastReflection_SessionAuthz)(nil)

type fastReflection_SessionAuthz SessionAuthz

func (x *SessionAuthz) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SessionAuthz)(x)
}

func (x *SessionAuthz) slowProtoReflect() protoreflect.Message {
	mi := &file_veranablockchain_permission_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SessionAuthz_messageType fastReflection_SessionAuthz_messageType
var _ protoreflect.MessageType = fastReflection_SessionAuthz_messageType{}

type fastReflection_SessionAuthz_messageType struct{}

func (x fastReflection_SessionAuthz_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SessionAuthz)(nil)
}
func (x fastReflection_SessionAuthz_messageType) New() protoreflect.Message {
	return new(fastReflection_SessionAuthz)
}
func (x fastReflection_SessionAuthz_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SessionAuthz
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SessionAuthz) Descriptor() protoreflect.MessageDescriptor {
	return md_SessionAuthz
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SessionAuthz) Type() protoreflect.MessageType {
	return _fastReflection_SessionAuthz_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SessionAuthz) New() protoreflect.Message {
	return new(fastReflection_SessionAuthz)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SessionAuthz) Interface() protoreflect.ProtoMessage {
	return (*SessionAuthz)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SessionAuthz) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ExecutorPermId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ExecutorPermId)
		if !f(fd_SessionAuthz_executor_perm_id, value) {
			return
		}
	}
	if x.BeneficiaryPermId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BeneficiaryPermId)
		if !f(fd_SessionAuthz_beneficiary_perm_id, value) {
			return
		}
	}
	if x.WalletAgentPermId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.WalletAgentPermId)
		if !f(fd_SessionAuthz_wallet_agent_perm_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SessionAuthz) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "veranablockchain.permission.SessionAuthz.executor_perm_id":
		return x.ExecutorPermId != uint64(0)
	case "veranablockchain.permission.SessionAuthz.beneficiary_perm_id":
		return x.BeneficiaryPermId != uint64(0)
	case "veranablockchain.permission.SessionAuthz.wallet_agent_perm_id":
		return x.WalletAgentPermId != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.SessionAuthz"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.SessionAuthz does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SessionAuthz) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "veranablockchain.permission.SessionAuthz.executor_perm_id":
		x.ExecutorPermId = uint64(0)
	case "veranablockchain.permission.SessionAuthz.beneficiary_perm_id":
		x.BeneficiaryPermId = uint64(0)
	case "veranablockchain.permission.SessionAuthz.wallet_agent_perm_id":
		x.WalletAgentPermId = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.SessionAuthz"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.SessionAuthz does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SessionAuthz) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "veranablockchain.permission.SessionAuthz.executor_perm_id":
		value := x.ExecutorPermId
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.permission.SessionAuthz.beneficiary_perm_id":
		value := x.BeneficiaryPermId
		return protoreflect.ValueOfUint64(value)
	case "veranablockchain.permission.SessionAuthz.wallet_agent_perm_id":
		value := x.WalletAgentPermId
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.SessionAuthz"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.SessionAuthz does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SessionAuthz) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "veranablockchain.permission.SessionAuthz.executor_perm_id":
		x.ExecutorPermId = value.Uint()
	case "veranablockchain.permission.SessionAuthz.beneficiary_perm_id":
		x.BeneficiaryPermId = value.Uint()
	case "veranablockchain.permission.SessionAuthz.wallet_agent_perm_id":
		x.WalletAgentPermId = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.SessionAuthz"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.SessionAuthz does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SessionAuthz) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "veranablockchain.permission.SessionAuthz.executor_perm_id":
		panic(fmt.Errorf("field executor_perm_id of message veranablockchain.permission.SessionAuthz is not mutable"))
	case "veranablockchain.permission.SessionAuthz.beneficiary_perm_id":
		panic(fmt.Errorf("field beneficiary_perm_id of message veranablockchain.permission.SessionAuthz is not mutable"))
	case "veranablockchain.permission.SessionAuthz.wallet_agent_perm_id":
		panic(fmt.Errorf("field wallet_agent_perm_id of message veranablockchain.permission.SessionAuthz is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.SessionAuthz"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.SessionAuthz does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SessionAuthz) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "veranablockchain.permission.SessionAuthz.executor_perm_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.permission.SessionAuthz.beneficiary_perm_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "veranablockchain.permission.SessionAuthz.wallet_agent_perm_id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: veranablockchain.permission.SessionAuthz"))
		}
		panic(fmt.Errorf("message veranablockchain.permission.SessionAuthz does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SessionAuthz) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in veranablockchain.permission.SessionAuthz", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SessionAuthz) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SessionAuthz) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SessionAuthz) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SessionAuthz) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SessionAuthz)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.ExecutorPermId != 0 {
			n += 1 + runtime.Sov(uint64(x.ExecutorPermId))
		}
		if x.BeneficiaryPermId != 0 {
			n += 1 + runtime.Sov(uint64(x.BeneficiaryPermId))
		}
		if x.WalletAgentPermId != 0 {
			n += 1 + runtime.Sov(uint64(x.WalletAgentPermId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SessionAuthz)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.WalletAgentPermId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.WalletAgentPermId))
			i--
			dAtA[i] = 0x18
		}
		if x.BeneficiaryPermId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BeneficiaryPermId))
			i--
			dAtA[i] = 0x10
		}
		if x.ExecutorPermId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExecutorPermId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SessionAuthz)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SessionAuthz: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SessionAuthz: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExecutorPermId", wireType)
				}
				x.ExecutorPermId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExecutorPermId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BeneficiaryPermId", wireType)
				}
				x.BeneficiaryPermId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BeneficiaryPermId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WalletAgentPermId", wireType)
				}
				x.WalletAgentPermId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.WalletAgentPermId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: veranablockchain/permission/types.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Permission types
type PermissionType int32

const (
	PermissionType_PERMISSION_TYPE_UNSPECIFIED      PermissionType = 0
	PermissionType_PERMISSION_TYPE_ISSUER           PermissionType = 1
	PermissionType_PERMISSION_TYPE_VERIFIER         PermissionType = 2
	PermissionType_PERMISSION_TYPE_ISSUER_GRANTOR   PermissionType = 3
	PermissionType_PERMISSION_TYPE_VERIFIER_GRANTOR PermissionType = 4
	PermissionType_PERMISSION_TYPE_ECOSYSTEM        PermissionType = 5 // Changed from PERMISSION_TYPE_TRUST_REGISTRY
	PermissionType_PERMISSION_TYPE_HOLDER           PermissionType = 6
)

// Enum value maps for PermissionType.
var (
	PermissionType_name = map[int32]string{
		0: "PERMISSION_TYPE_UNSPECIFIED",
		1: "PERMISSION_TYPE_ISSUER",
		2: "PERMISSION_TYPE_VERIFIER",
		3: "PERMISSION_TYPE_ISSUER_GRANTOR",
		4: "PERMISSION_TYPE_VERIFIER_GRANTOR",
		5: "PERMISSION_TYPE_ECOSYSTEM",
		6: "PERMISSION_TYPE_HOLDER",
	}
	PermissionType_value = map[string]int32{
		"PERMISSION_TYPE_UNSPECIFIED":      0,
		"PERMISSION_TYPE_ISSUER":           1,
		"PERMISSION_TYPE_VERIFIER":         2,
		"PERMISSION_TYPE_ISSUER_GRANTOR":   3,
		"PERMISSION_TYPE_VERIFIER_GRANTOR": 4,
		"PERMISSION_TYPE_ECOSYSTEM":        5,
		"PERMISSION_TYPE_HOLDER":           6,
	}
)

func (x PermissionType) Enum() *PermissionType {
	p := new(PermissionType)
	*p = x
	return p
}

func (x PermissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_veranablockchain_permission_types_proto_enumTypes[0].Descriptor()
}

func (PermissionType) Type() protoreflect.EnumType {
	return &file_veranablockchain_permission_types_proto_enumTypes[0]
}

func (x PermissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionType.Descriptor instead.
func (PermissionType) EnumDescriptor() ([]byte, []int) {
	return file_veranablockchain_permission_types_proto_rawDescGZIP(), []int{0}
}

// Validation process states
type ValidationState int32

const (
	ValidationState_VALIDATION_STATE_UNSPECIFIED           ValidationState = 0
	ValidationState_VALIDATION_STATE_PENDING               ValidationState = 1
	ValidationState_VALIDATION_STATE_VALIDATED             ValidationState = 2
	ValidationState_VALIDATION_STATE_TERMINATED            ValidationState = 3
	ValidationState_VALIDATION_STATE_TERMINATION_REQUESTED ValidationState = 4
)

// Enum value maps for ValidationState.
var (
	ValidationState_name = map[int32]string{
		0: "VALIDATION_STATE_UNSPECIFIED",
		1: "VALIDATION_STATE_PENDING",
		2: "VALIDATION_STATE_VALIDATED",
		3: "VALIDATION_STATE_TERMINATED",
		4: "VALIDATION_STATE_TERMINATION_REQUESTED",
	}
	ValidationState_value = map[string]int32{
		"VALIDATION_STATE_UNSPECIFIED":           0,
		"VALIDATION_STATE_PENDING":               1,
		"VALIDATION_STATE_VALIDATED":             2,
		"VALIDATION_STATE_TERMINATED":            3,
		"VALIDATION_STATE_TERMINATION_REQUESTED": 4,
	}
)

func (x ValidationState) Enum() *ValidationState {
	p := new(ValidationState)
	*p = x
	return p
}

func (x ValidationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidationState) Descriptor() protoreflect.EnumDescriptor {
	return file_veranablockchain_permission_types_proto_enumTypes[1].Descriptor()
}

func (ValidationState) Type() protoreflect.EnumType {
	return &file_veranablockchain_permission_types_proto_enumTypes[1]
}

func (x ValidationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidationState.Descriptor instead.
func (ValidationState) EnumDescriptor() ([]byte, []int) {
	return file_veranablockchain_permission_types_proto_rawDescGZIP(), []int{1}
}

type Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SchemaId   uint64                 `protobuf:"varint,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Type_      PermissionType         `protobuf:"varint,3,opt,name=type,proto3,enum=veranablockchain.permission.PermissionType" json:"type,omitempty"`
	Did        string                 `protobuf:"bytes,4,opt,name=did,proto3" json:"did,omitempty"`
	Grantee    string                 `protobuf:"bytes,5,opt,name=grantee,proto3" json:"grantee,omitempty"`
	Created    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy  string                 `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Extended   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=extended,proto3" json:"extended,omitempty"`
	ExtendedBy string                 `protobuf:"bytes,9,opt,name=extended_by,json=extendedBy,proto3" json:"extended_by,omitempty"`
	// NEW: Slashing related fields
	Slashed   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=slashed,proto3" json:"slashed,omitempty"`
	SlashedBy string                 `protobuf:"bytes,11,opt,name=slashed_by,json=slashedBy,proto3" json:"slashed_by,omitempty"`
	Repaid    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=repaid,proto3" json:"repaid,omitempty"`
	RepaidBy  string                 `protobuf:"bytes,13,opt,name=repaid_by,json=repaidBy,proto3" json:"repaid_by,omitempty"`
	// END NEW
	EffectiveFrom    *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=effective_from,json=effectiveFrom,proto3" json:"effective_from,omitempty"`
	EffectiveUntil   *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=effective_until,json=effectiveUntil,proto3" json:"effective_until,omitempty"`
	Modified         *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=modified,proto3" json:"modified,omitempty"`
	ValidationFees   uint64                 `protobuf:"varint,17,opt,name=validation_fees,json=validationFees,proto3" json:"validation_fees,omitempty"`
	IssuanceFees     uint64                 `protobuf:"varint,18,opt,name=issuance_fees,json=issuanceFees,proto3" json:"issuance_fees,omitempty"`
	VerificationFees uint64                 `protobuf:"varint,19,opt,name=verification_fees,json=verificationFees,proto3" json:"verification_fees,omitempty"`
	Deposit          uint64                 `protobuf:"varint,20,opt,name=deposit,proto3" json:"deposit,omitempty"`
	// NEW: Slashing deposit fields
	SlashedDeposit uint64 `protobuf:"varint,21,opt,name=slashed_deposit,json=slashedDeposit,proto3" json:"slashed_deposit,omitempty"`
	RepaidDeposit  uint64 `protobuf:"varint,22,opt,name=repaid_deposit,json=repaidDeposit,proto3" json:"repaid_deposit,omitempty"`
	// END NEW
	Revoked            *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=revoked,proto3" json:"revoked,omitempty"`
	RevokedBy          string                 `protobuf:"bytes,24,opt,name=revoked_by,json=revokedBy,proto3" json:"revoked_by,omitempty"`
	Terminated         *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=terminated,proto3" json:"terminated,omitempty"`
	TerminatedBy       string                 `protobuf:"bytes,26,opt,name=terminated_by,json=terminatedBy,proto3" json:"terminated_by,omitempty"`
	Country            string                 `protobuf:"bytes,27,opt,name=country,proto3" json:"country,omitempty"`
	ValidatorPermId    uint64                 `protobuf:"varint,28,opt,name=validator_perm_id,json=validatorPermId,proto3" json:"validator_perm_id,omitempty"`
	VpState            ValidationState        `protobuf:"varint,29,opt,name=vp_state,json=vpState,proto3,enum=veranablockchain.permission.ValidationState" json:"vp_state,omitempty"`
	VpExp              *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=vp_exp,json=vpExp,proto3" json:"vp_exp,omitempty"`
	VpLastStateChange  *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=vp_last_state_change,json=vpLastStateChange,proto3" json:"vp_last_state_change,omitempty"`
	VpValidatorDeposit uint64                 `protobuf:"varint,32,opt,name=vp_validator_deposit,json=vpValidatorDeposit,proto3" json:"vp_validator_deposit,omitempty"`
	VpCurrentFees      uint64                 `protobuf:"varint,33,opt,name=vp_current_fees,json=vpCurrentFees,proto3" json:"vp_current_fees,omitempty"`
	VpCurrentDeposit   uint64                 `protobuf:"varint,34,opt,name=vp_current_deposit,json=vpCurrentDeposit,proto3" json:"vp_current_deposit,omitempty"`
	VpSummaryDigestSri string                 `protobuf:"bytes,35,opt,name=vp_summary_digest_sri,json=vpSummaryDigestSri,proto3" json:"vp_summary_digest_sri,omitempty"`
	VpTermRequested    *timestamppb.Timestamp `protobuf:"bytes,36,opt,name=vp_term_requested,json=vpTermRequested,proto3" json:"vp_term_requested,omitempty"`
}

func (x *Permission) Reset() {
	*x = Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_veranablockchain_permission_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_veranablockchain_permission_types_proto_rawDescGZIP(), []int{0}
}

func (x *Permission) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Permission) GetSchemaId() uint64 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

func (x *Permission) GetType_() PermissionType {
	if x != nil {
		return x.Type_
	}
	return PermissionType_PERMISSION_TYPE_UNSPECIFIED
}

func (x *Permission) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *Permission) GetGrantee() string {
	if x != nil {
		return x.Grantee
	}
	return ""
}

func (x *Permission) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Permission) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Permission) GetExtended() *timestamppb.Timestamp {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *Permission) GetExtendedBy() string {
	if x != nil {
		return x.ExtendedBy
	}
	return ""
}

func (x *Permission) GetSlashed() *timestamppb.Timestamp {
	if x != nil {
		return x.Slashed
	}
	return nil
}

func (x *Permission) GetSlashedBy() string {
	if x != nil {
		return x.SlashedBy
	}
	return ""
}

func (x *Permission) GetRepaid() *timestamppb.Timestamp {
	if x != nil {
		return x.Repaid
	}
	return nil
}

func (x *Permission) GetRepaidBy() string {
	if x != nil {
		return x.RepaidBy
	}
	return ""
}

func (x *Permission) GetEffectiveFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveFrom
	}
	return nil
}

func (x *Permission) GetEffectiveUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveUntil
	}
	return nil
}

func (x *Permission) GetModified() *timestamppb.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *Permission) GetValidationFees() uint64 {
	if x != nil {
		return x.ValidationFees
	}
	return 0
}

func (x *Permission) GetIssuanceFees() uint64 {
	if x != nil {
		return x.IssuanceFees
	}
	return 0
}

func (x *Permission) GetVerificationFees() uint64 {
	if x != nil {
		return x.VerificationFees
	}
	return 0
}

func (x *Permission) GetDeposit() uint64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *Permission) GetSlashedDeposit() uint64 {
	if x != nil {
		return x.SlashedDeposit
	}
	return 0
}

func (x *Permission) GetRepaidDeposit() uint64 {
	if x != nil {
		return x.RepaidDeposit
	}
	return 0
}

func (x *Permission) GetRevoked() *timestamppb.Timestamp {
	if x != nil {
		return x.Revoked
	}
	return nil
}

func (x *Permission) GetRevokedBy() string {
	if x != nil {
		return x.RevokedBy
	}
	return ""
}

func (x *Permission) GetTerminated() *timestamppb.Timestamp {
	if x != nil {
		return x.Terminated
	}
	return nil
}

func (x *Permission) GetTerminatedBy() string {
	if x != nil {
		return x.TerminatedBy
	}
	return ""
}

func (x *Permission) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Permission) GetValidatorPermId() uint64 {
	if x != nil {
		return x.ValidatorPermId
	}
	return 0
}

func (x *Permission) GetVpState() ValidationState {
	if x != nil {
		return x.VpState
	}
	return ValidationState_VALIDATION_STATE_UNSPECIFIED
}

func (x *Permission) GetVpExp() *timestamppb.Timestamp {
	if x != nil {
		return x.VpExp
	}
	return nil
}

func (x *Permission) GetVpLastStateChange() *timestamppb.Timestamp {
	if x != nil {
		return x.VpLastStateChange
	}
	return nil
}

func (x *Permission) GetVpValidatorDeposit() uint64 {
	if x != nil {
		return x.VpValidatorDeposit
	}
	return 0
}

func (x *Permission) GetVpCurrentFees() uint64 {
	if x != nil {
		return x.VpCurrentFees
	}
	return 0
}

func (x *Permission) GetVpCurrentDeposit() uint64 {
	if x != nil {
		return x.VpCurrentDeposit
	}
	return 0
}

func (x *Permission) GetVpSummaryDigestSri() string {
	if x != nil {
		return x.VpSummaryDigestSri
	}
	return ""
}

func (x *Permission) GetVpTermRequested() *timestamppb.Timestamp {
	if x != nil {
		return x.VpTermRequested
	}
	return nil
}

type PermissionSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Controller  string                 `protobuf:"bytes,2,opt,name=controller,proto3" json:"controller,omitempty"`
	AgentPermId uint64                 `protobuf:"varint,3,opt,name=agent_perm_id,json=agentPermId,proto3" json:"agent_perm_id,omitempty"`
	Authz       []*SessionAuthz        `protobuf:"bytes,4,rep,name=authz,proto3" json:"authz,omitempty"`
	Created     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	Modified    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (x *PermissionSession) Reset() {
	*x = PermissionSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_veranablockchain_permission_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionSession) ProtoMessage() {}

// Deprecated: Use PermissionSession.ProtoReflect.Descriptor instead.
func (*PermissionSession) Descriptor() ([]byte, []int) {
	return file_veranablockchain_permission_types_proto_rawDescGZIP(), []int{1}
}

func (x *PermissionSession) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PermissionSession) GetController() string {
	if x != nil {
		return x.Controller
	}
	return ""
}

func (x *PermissionSession) GetAgentPermId() uint64 {
	if x != nil {
		return x.AgentPermId
	}
	return 0
}

func (x *PermissionSession) GetAuthz() []*SessionAuthz {
	if x != nil {
		return x.Authz
	}
	return nil
}

func (x *PermissionSession) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PermissionSession) GetModified() *timestamppb.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

type SessionAuthz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutorPermId    uint64 `protobuf:"varint,1,opt,name=executor_perm_id,json=executorPermId,proto3" json:"executor_perm_id,omitempty"`
	BeneficiaryPermId uint64 `protobuf:"varint,2,opt,name=beneficiary_perm_id,json=beneficiaryPermId,proto3" json:"beneficiary_perm_id,omitempty"`
	WalletAgentPermId uint64 `protobuf:"varint,3,opt,name=wallet_agent_perm_id,json=walletAgentPermId,proto3" json:"wallet_agent_perm_id,omitempty"`
}

func (x *SessionAuthz) Reset() {
	*x = SessionAuthz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_veranablockchain_permission_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionAuthz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionAuthz) ProtoMessage() {}

// Deprecated: Use SessionAuthz.ProtoReflect.Descriptor instead.
func (*SessionAuthz) Descriptor() ([]byte, []int) {
	return file_veranablockchain_permission_types_proto_rawDescGZIP(), []int{2}
}

func (x *SessionAuthz) GetExecutorPermId() uint64 {
	if x != nil {
		return x.ExecutorPermId
	}
	return 0
}

func (x *SessionAuthz) GetBeneficiaryPermId() uint64 {
	if x != nil {
		return x.BeneficiaryPermId
	}
	return 0
}

func (x *SessionAuthz) GetWalletAgentPermId() uint64 {
	if x != nil {
		return x.WalletAgentPermId
	}
	return 0
}

var File_veranablockchain_permission_types_proto protoreflect.FileDescriptor

var file_veranablockchain_permission_types_proto_rawDesc = []byte{
	0x0a, 0x27, 0x76, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x76, 0x65, 0x72, 0x61, 0x6e,
	0x61, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d,
	0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x0e, 0x0a, 0x0a,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x76, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d,
	0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f,
	0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3a, 0x0a, 0x07,
	0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52,
	0x07, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x6c, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4,
	0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90,
	0xdf, 0x1f, 0x01, 0x52, 0x06, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64,
	0x42, 0x79, 0x12, 0x47, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0d, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x49, 0x0a, 0x0f, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x65,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6c, 0x61,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x61,
	0x69, 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x07, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x09, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x12, 0x40,
	0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04,
	0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x3d, 0x0a, 0x0d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x76, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x76, 0x65, 0x72, 0x61, 0x6e, 0x61,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x76, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37,
	0x0a, 0x06, 0x76, 0x70, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01,
	0x52, 0x05, 0x76, 0x70, 0x45, 0x78, 0x70, 0x12, 0x51, 0x0a, 0x14, 0x76, 0x70, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x11, 0x76, 0x70, 0x4c, 0x61, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x76, 0x70, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x76, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x76, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x65, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x76, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x76, 0x70, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x72, 0x69, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x76, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x53, 0x72, 0x69, 0x12, 0x4c, 0x0a, 0x11, 0x76, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf,
	0x1f, 0x01, 0x52, 0x0f, 0x76, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x22, 0xa2, 0x02, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x05, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76,
	0x65, 0x72, 0x61, 0x6e, 0x61, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x52, 0x05, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x12, 0x3a,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f,
	0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x50, 0x65, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x49, 0x64, 0x2a, 0xf0, 0x01, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x53, 0x55,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x41,
	0x4e, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49,
	0x45, 0x52, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x43, 0x4f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48,
	0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x06, 0x2a, 0xbe, 0x01, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x04, 0x42, 0x84, 0x02, 0x0a, 0x1f, 0x63, 0x6f, 0x6d,
	0x2e, 0x76, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x2d, 0x6c, 0x61,
	0x62, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0xa2, 0x02, 0x03, 0x56, 0x50, 0x58, 0xaa, 0x02, 0x1b, 0x56, 0x65, 0x72,
	0x61, 0x6e, 0x61, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0xca, 0x02, 0x1b, 0x56, 0x65, 0x72, 0x61, 0x6e,
	0x61, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0xe2, 0x02, 0x27, 0x56, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x1c, 0x56, 0x65, 0x72, 0x61, 0x6e, 0x61, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_veranablockchain_permission_types_proto_rawDescOnce sync.Once
	file_veranablockchain_permission_types_proto_rawDescData = file_veranablockchain_permission_types_proto_rawDesc
)

func file_veranablockchain_permission_types_proto_rawDescGZIP() []byte {
	file_veranablockchain_permission_types_proto_rawDescOnce.Do(func() {
		file_veranablockchain_permission_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_veranablockchain_permission_types_proto_rawDescData)
	})
	return file_veranablockchain_permission_types_proto_rawDescData
}

var file_veranablockchain_permission_types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_veranablockchain_permission_types_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_veranablockchain_permission_types_proto_goTypes = []interface{}{
	(PermissionType)(0),           // 0: veranablockchain.permission.PermissionType
	(ValidationState)(0),          // 1: veranablockchain.permission.ValidationState
	(*Permission)(nil),            // 2: veranablockchain.permission.Permission
	(*PermissionSession)(nil),     // 3: veranablockchain.permission.PermissionSession
	(*SessionAuthz)(nil),          // 4: veranablockchain.permission.SessionAuthz
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_veranablockchain_permission_types_proto_depIdxs = []int32{
	0,  // 0: veranablockchain.permission.Permission.type:type_name -> veranablockchain.permission.PermissionType
	5,  // 1: veranablockchain.permission.Permission.created:type_name -> google.protobuf.Timestamp
	5,  // 2: veranablockchain.permission.Permission.extended:type_name -> google.protobuf.Timestamp
	5,  // 3: veranablockchain.permission.Permission.slashed:type_name -> google.protobuf.Timestamp
	5,  // 4: veranablockchain.permission.Permission.repaid:type_name -> google.protobuf.Timestamp
	5,  // 5: veranablockchain.permission.Permission.effective_from:type_name -> google.protobuf.Timestamp
	5,  // 6: veranablockchain.permission.Permission.effective_until:type_name -> google.protobuf.Timestamp
	5,  // 7: veranablockchain.permission.Permission.modified:type_name -> google.protobuf.Timestamp
	5,  // 8: veranablockchain.permission.Permission.revoked:type_name -> google.protobuf.Timestamp
	5,  // 9: veranablockchain.permission.Permission.terminated:type_name -> google.protobuf.Timestamp
	1,  // 10: veranablockchain.permission.Permission.vp_state:type_name -> veranablockchain.permission.ValidationState
	5,  // 11: veranablockchain.permission.Permission.vp_exp:type_name -> google.protobuf.Timestamp
	5,  // 12: veranablockchain.permission.Permission.vp_last_state_change:type_name -> google.protobuf.Timestamp
	5,  // 13: veranablockchain.permission.Permission.vp_term_requested:type_name -> google.protobuf.Timestamp
	4,  // 14: veranablockchain.permission.PermissionSession.authz:type_name -> veranablockchain.permission.SessionAuthz
	5,  // 15: veranablockchain.permission.PermissionSession.created:type_name -> google.protobuf.Timestamp
	5,  // 16: veranablockchain.permission.PermissionSession.modified:type_name -> google.protobuf.Timestamp
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_veranablockchain_permission_types_proto_init() }
func file_veranablockchain_permission_types_proto_init() {
	if File_veranablockchain_permission_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_veranablockchain_permission_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_veranablockchain_permission_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_veranablockchain_permission_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionAuthz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_veranablockchain_permission_types_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_veranablockchain_permission_types_proto_goTypes,
		DependencyIndexes: file_veranablockchain_permission_types_proto_depIdxs,
		EnumInfos:         file_veranablockchain_permission_types_proto_enumTypes,
		MessageInfos:      file_veranablockchain_permission_types_proto_msgTypes,
	}.Build()
	File_veranablockchain_permission_types_proto = out.File
	file_veranablockchain_permission_types_proto_rawDesc = nil
	file_veranablockchain_permission_types_proto_goTypes = nil
	file_veranablockchain_permission_types_proto_depIdxs = nil
}
