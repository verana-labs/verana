// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: veranablockchain/permission/tx.proto

package permission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName                    = "/veranablockchain.permission.Msg/UpdateParams"
	Msg_StartPermissionVP_FullMethodName               = "/veranablockchain.permission.Msg/StartPermissionVP"
	Msg_RenewPermissionVP_FullMethodName               = "/veranablockchain.permission.Msg/RenewPermissionVP"
	Msg_SetPermissionVPToValidated_FullMethodName      = "/veranablockchain.permission.Msg/SetPermissionVPToValidated"
	Msg_RequestPermissionVPTermination_FullMethodName  = "/veranablockchain.permission.Msg/RequestPermissionVPTermination"
	Msg_ConfirmPermissionVPTermination_FullMethodName  = "/veranablockchain.permission.Msg/ConfirmPermissionVPTermination"
	Msg_CancelPermissionVPLastRequest_FullMethodName   = "/veranablockchain.permission.Msg/CancelPermissionVPLastRequest"
	Msg_CreateRootPermission_FullMethodName            = "/veranablockchain.permission.Msg/CreateRootPermission"
	Msg_ExtendPermission_FullMethodName                = "/veranablockchain.permission.Msg/ExtendPermission"
	Msg_RevokePermission_FullMethodName                = "/veranablockchain.permission.Msg/RevokePermission"
	Msg_CreateOrUpdatePermissionSession_FullMethodName = "/veranablockchain.permission.Msg/CreateOrUpdatePermissionSession"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	StartPermissionVP(ctx context.Context, in *MsgStartPermissionVP, opts ...grpc.CallOption) (*MsgStartPermissionVPResponse, error)
	RenewPermissionVP(ctx context.Context, in *MsgRenewPermissionVP, opts ...grpc.CallOption) (*MsgRenewPermissionVPResponse, error)
	SetPermissionVPToValidated(ctx context.Context, in *MsgSetPermissionVPToValidated, opts ...grpc.CallOption) (*MsgSetPermissionVPToValidatedResponse, error)
	RequestPermissionVPTermination(ctx context.Context, in *MsgRequestPermissionVPTermination, opts ...grpc.CallOption) (*MsgRequestPermissionVPTerminationResponse, error)
	ConfirmPermissionVPTermination(ctx context.Context, in *MsgConfirmPermissionVPTermination, opts ...grpc.CallOption) (*MsgConfirmPermissionVPTerminationResponse, error)
	CancelPermissionVPLastRequest(ctx context.Context, in *MsgCancelPermissionVPLastRequest, opts ...grpc.CallOption) (*MsgCancelPermissionVPLastRequestResponse, error)
	CreateRootPermission(ctx context.Context, in *MsgCreateRootPermission, opts ...grpc.CallOption) (*MsgCreateRootPermissionResponse, error)
	ExtendPermission(ctx context.Context, in *MsgExtendPermission, opts ...grpc.CallOption) (*MsgExtendPermissionResponse, error)
	RevokePermission(ctx context.Context, in *MsgRevokePermission, opts ...grpc.CallOption) (*MsgRevokePermissionResponse, error)
	CreateOrUpdatePermissionSession(ctx context.Context, in *MsgCreateOrUpdatePermissionSession, opts ...grpc.CallOption) (*MsgCreateOrUpdatePermissionSessionResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StartPermissionVP(ctx context.Context, in *MsgStartPermissionVP, opts ...grpc.CallOption) (*MsgStartPermissionVPResponse, error) {
	out := new(MsgStartPermissionVPResponse)
	err := c.cc.Invoke(ctx, Msg_StartPermissionVP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RenewPermissionVP(ctx context.Context, in *MsgRenewPermissionVP, opts ...grpc.CallOption) (*MsgRenewPermissionVPResponse, error) {
	out := new(MsgRenewPermissionVPResponse)
	err := c.cc.Invoke(ctx, Msg_RenewPermissionVP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetPermissionVPToValidated(ctx context.Context, in *MsgSetPermissionVPToValidated, opts ...grpc.CallOption) (*MsgSetPermissionVPToValidatedResponse, error) {
	out := new(MsgSetPermissionVPToValidatedResponse)
	err := c.cc.Invoke(ctx, Msg_SetPermissionVPToValidated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestPermissionVPTermination(ctx context.Context, in *MsgRequestPermissionVPTermination, opts ...grpc.CallOption) (*MsgRequestPermissionVPTerminationResponse, error) {
	out := new(MsgRequestPermissionVPTerminationResponse)
	err := c.cc.Invoke(ctx, Msg_RequestPermissionVPTermination_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConfirmPermissionVPTermination(ctx context.Context, in *MsgConfirmPermissionVPTermination, opts ...grpc.CallOption) (*MsgConfirmPermissionVPTerminationResponse, error) {
	out := new(MsgConfirmPermissionVPTerminationResponse)
	err := c.cc.Invoke(ctx, Msg_ConfirmPermissionVPTermination_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelPermissionVPLastRequest(ctx context.Context, in *MsgCancelPermissionVPLastRequest, opts ...grpc.CallOption) (*MsgCancelPermissionVPLastRequestResponse, error) {
	out := new(MsgCancelPermissionVPLastRequestResponse)
	err := c.cc.Invoke(ctx, Msg_CancelPermissionVPLastRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateRootPermission(ctx context.Context, in *MsgCreateRootPermission, opts ...grpc.CallOption) (*MsgCreateRootPermissionResponse, error) {
	out := new(MsgCreateRootPermissionResponse)
	err := c.cc.Invoke(ctx, Msg_CreateRootPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExtendPermission(ctx context.Context, in *MsgExtendPermission, opts ...grpc.CallOption) (*MsgExtendPermissionResponse, error) {
	out := new(MsgExtendPermissionResponse)
	err := c.cc.Invoke(ctx, Msg_ExtendPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokePermission(ctx context.Context, in *MsgRevokePermission, opts ...grpc.CallOption) (*MsgRevokePermissionResponse, error) {
	out := new(MsgRevokePermissionResponse)
	err := c.cc.Invoke(ctx, Msg_RevokePermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateOrUpdatePermissionSession(ctx context.Context, in *MsgCreateOrUpdatePermissionSession, opts ...grpc.CallOption) (*MsgCreateOrUpdatePermissionSessionResponse, error) {
	out := new(MsgCreateOrUpdatePermissionSessionResponse)
	err := c.cc.Invoke(ctx, Msg_CreateOrUpdatePermissionSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	StartPermissionVP(context.Context, *MsgStartPermissionVP) (*MsgStartPermissionVPResponse, error)
	RenewPermissionVP(context.Context, *MsgRenewPermissionVP) (*MsgRenewPermissionVPResponse, error)
	SetPermissionVPToValidated(context.Context, *MsgSetPermissionVPToValidated) (*MsgSetPermissionVPToValidatedResponse, error)
	RequestPermissionVPTermination(context.Context, *MsgRequestPermissionVPTermination) (*MsgRequestPermissionVPTerminationResponse, error)
	ConfirmPermissionVPTermination(context.Context, *MsgConfirmPermissionVPTermination) (*MsgConfirmPermissionVPTerminationResponse, error)
	CancelPermissionVPLastRequest(context.Context, *MsgCancelPermissionVPLastRequest) (*MsgCancelPermissionVPLastRequestResponse, error)
	CreateRootPermission(context.Context, *MsgCreateRootPermission) (*MsgCreateRootPermissionResponse, error)
	ExtendPermission(context.Context, *MsgExtendPermission) (*MsgExtendPermissionResponse, error)
	RevokePermission(context.Context, *MsgRevokePermission) (*MsgRevokePermissionResponse, error)
	CreateOrUpdatePermissionSession(context.Context, *MsgCreateOrUpdatePermissionSession) (*MsgCreateOrUpdatePermissionSessionResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) StartPermissionVP(context.Context, *MsgStartPermissionVP) (*MsgStartPermissionVPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPermissionVP not implemented")
}
func (UnimplementedMsgServer) RenewPermissionVP(context.Context, *MsgRenewPermissionVP) (*MsgRenewPermissionVPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewPermissionVP not implemented")
}
func (UnimplementedMsgServer) SetPermissionVPToValidated(context.Context, *MsgSetPermissionVPToValidated) (*MsgSetPermissionVPToValidatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPermissionVPToValidated not implemented")
}
func (UnimplementedMsgServer) RequestPermissionVPTermination(context.Context, *MsgRequestPermissionVPTermination) (*MsgRequestPermissionVPTerminationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPermissionVPTermination not implemented")
}
func (UnimplementedMsgServer) ConfirmPermissionVPTermination(context.Context, *MsgConfirmPermissionVPTermination) (*MsgConfirmPermissionVPTerminationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmPermissionVPTermination not implemented")
}
func (UnimplementedMsgServer) CancelPermissionVPLastRequest(context.Context, *MsgCancelPermissionVPLastRequest) (*MsgCancelPermissionVPLastRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPermissionVPLastRequest not implemented")
}
func (UnimplementedMsgServer) CreateRootPermission(context.Context, *MsgCreateRootPermission) (*MsgCreateRootPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRootPermission not implemented")
}
func (UnimplementedMsgServer) ExtendPermission(context.Context, *MsgExtendPermission) (*MsgExtendPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendPermission not implemented")
}
func (UnimplementedMsgServer) RevokePermission(context.Context, *MsgRevokePermission) (*MsgRevokePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokePermission not implemented")
}
func (UnimplementedMsgServer) CreateOrUpdatePermissionSession(context.Context, *MsgCreateOrUpdatePermissionSession) (*MsgCreateOrUpdatePermissionSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdatePermissionSession not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StartPermissionVP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartPermissionVP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StartPermissionVP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StartPermissionVP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StartPermissionVP(ctx, req.(*MsgStartPermissionVP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RenewPermissionVP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRenewPermissionVP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RenewPermissionVP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RenewPermissionVP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RenewPermissionVP(ctx, req.(*MsgRenewPermissionVP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetPermissionVPToValidated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetPermissionVPToValidated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetPermissionVPToValidated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetPermissionVPToValidated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetPermissionVPToValidated(ctx, req.(*MsgSetPermissionVPToValidated))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestPermissionVPTermination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestPermissionVPTermination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestPermissionVPTermination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RequestPermissionVPTermination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestPermissionVPTermination(ctx, req.(*MsgRequestPermissionVPTermination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConfirmPermissionVPTermination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmPermissionVPTermination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmPermissionVPTermination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ConfirmPermissionVPTermination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmPermissionVPTermination(ctx, req.(*MsgConfirmPermissionVPTermination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelPermissionVPLastRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelPermissionVPLastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelPermissionVPLastRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CancelPermissionVPLastRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelPermissionVPLastRequest(ctx, req.(*MsgCancelPermissionVPLastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateRootPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateRootPermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateRootPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateRootPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateRootPermission(ctx, req.(*MsgCreateRootPermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExtendPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExtendPermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExtendPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ExtendPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExtendPermission(ctx, req.(*MsgExtendPermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokePermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RevokePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokePermission(ctx, req.(*MsgRevokePermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateOrUpdatePermissionSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateOrUpdatePermissionSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateOrUpdatePermissionSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateOrUpdatePermissionSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateOrUpdatePermissionSession(ctx, req.(*MsgCreateOrUpdatePermissionSession))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "veranablockchain.permission.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "StartPermissionVP",
			Handler:    _Msg_StartPermissionVP_Handler,
		},
		{
			MethodName: "RenewPermissionVP",
			Handler:    _Msg_RenewPermissionVP_Handler,
		},
		{
			MethodName: "SetPermissionVPToValidated",
			Handler:    _Msg_SetPermissionVPToValidated_Handler,
		},
		{
			MethodName: "RequestPermissionVPTermination",
			Handler:    _Msg_RequestPermissionVPTermination_Handler,
		},
		{
			MethodName: "ConfirmPermissionVPTermination",
			Handler:    _Msg_ConfirmPermissionVPTermination_Handler,
		},
		{
			MethodName: "CancelPermissionVPLastRequest",
			Handler:    _Msg_CancelPermissionVPLastRequest_Handler,
		},
		{
			MethodName: "CreateRootPermission",
			Handler:    _Msg_CreateRootPermission_Handler,
		},
		{
			MethodName: "ExtendPermission",
			Handler:    _Msg_ExtendPermission_Handler,
		},
		{
			MethodName: "RevokePermission",
			Handler:    _Msg_RevokePermission_Handler,
		},
		{
			MethodName: "CreateOrUpdatePermissionSession",
			Handler:    _Msg_CreateOrUpdatePermissionSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "veranablockchain/permission/tx.proto",
}
