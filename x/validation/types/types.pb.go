// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: veranablockchain/validation/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValidationType int32

const (
	ValidationType_TYPE_UNSPECIFIED ValidationType = 0
	ValidationType_ISSUER_GRANTOR   ValidationType = 1
	ValidationType_VERIFIER_GRANTOR ValidationType = 2
	ValidationType_ISSUER           ValidationType = 3
	ValidationType_VERIFIER         ValidationType = 4
	ValidationType_HOLDER           ValidationType = 5
)

var ValidationType_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "ISSUER_GRANTOR",
	2: "VERIFIER_GRANTOR",
	3: "ISSUER",
	4: "VERIFIER",
	5: "HOLDER",
}

var ValidationType_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"ISSUER_GRANTOR":   1,
	"VERIFIER_GRANTOR": 2,
	"ISSUER":           3,
	"VERIFIER":         4,
	"HOLDER":           5,
}

func (x ValidationType) String() string {
	return proto.EnumName(ValidationType_name, int32(x))
}

func (ValidationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5fbe0ed46278613d, []int{0}
}

type ValidationState int32

const (
	ValidationState_STATE_UNSPECIFIED ValidationState = 0
	ValidationState_PENDING           ValidationState = 1
	ValidationState_VALIDATED         ValidationState = 2
	ValidationState_TERMINATED        ValidationState = 3
)

var ValidationState_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "PENDING",
	2: "VALIDATED",
	3: "TERMINATED",
}

var ValidationState_value = map[string]int32{
	"STATE_UNSPECIFIED": 0,
	"PENDING":           1,
	"VALIDATED":         2,
	"TERMINATED":        3,
}

func (x ValidationState) String() string {
	return proto.EnumName(ValidationState_name, int32(x))
}

func (ValidationState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5fbe0ed46278613d, []int{1}
}

type ValidatorDeposit struct {
	ValidatorPermId uint64 `protobuf:"varint,1,opt,name=validator_perm_id,json=validatorPermId,proto3" json:"validator_perm_id,omitempty"`
	Amount          int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *ValidatorDeposit) Reset()         { *m = ValidatorDeposit{} }
func (m *ValidatorDeposit) String() string { return proto.CompactTextString(m) }
func (*ValidatorDeposit) ProtoMessage()    {}
func (*ValidatorDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fbe0ed46278613d, []int{0}
}
func (m *ValidatorDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorDeposit.Merge(m, src)
}
func (m *ValidatorDeposit) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorDeposit proto.InternalMessageInfo

func (m *ValidatorDeposit) GetValidatorPermId() uint64 {
	if m != nil {
		return m.ValidatorPermId
	}
	return 0
}

func (m *ValidatorDeposit) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type Validation struct {
	Id                uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Applicant         string             `protobuf:"bytes,2,opt,name=applicant,proto3" json:"applicant,omitempty"`
	Type              ValidationType     `protobuf:"varint,3,opt,name=type,proto3,enum=veranablockchain.validation.ValidationType" json:"type,omitempty"`
	Created           time.Time          `protobuf:"bytes,4,opt,name=created,proto3,stdtime" json:"created"`
	ValidatorPermId   uint64             `protobuf:"varint,5,opt,name=validator_perm_id,json=validatorPermId,proto3" json:"validator_perm_id,omitempty"`
	State             ValidationState    `protobuf:"varint,6,opt,name=state,proto3,enum=veranablockchain.validation.ValidationState" json:"state,omitempty"`
	Exp               *time.Time         `protobuf:"bytes,7,opt,name=exp,proto3,stdtime" json:"exp,omitempty"`
	LastStateChange   time.Time          `protobuf:"bytes,8,opt,name=last_state_change,json=lastStateChange,proto3,stdtime" json:"last_state_change"`
	ApplicantDeposit  int64              `protobuf:"varint,9,opt,name=applicant_deposit,json=applicantDeposit,proto3" json:"applicant_deposit,omitempty"`
	ValidatorDeposits []ValidatorDeposit `protobuf:"bytes,10,rep,name=validator_deposits,json=validatorDeposits,proto3" json:"validator_deposits"`
	CurrentFees       int64              `protobuf:"varint,11,opt,name=current_fees,json=currentFees,proto3" json:"current_fees,omitempty"`
	CurrentDeposit    int64              `protobuf:"varint,12,opt,name=current_deposit,json=currentDeposit,proto3" json:"current_deposit,omitempty"`
	SummaryHash       string             `protobuf:"bytes,13,opt,name=summary_hash,json=summaryHash,proto3" json:"summary_hash,omitempty"`
	TermRequested     *time.Time         `protobuf:"bytes,14,opt,name=term_requested,json=termRequested,proto3,stdtime" json:"term_requested,omitempty"`
}

func (m *Validation) Reset()         { *m = Validation{} }
func (m *Validation) String() string { return proto.CompactTextString(m) }
func (*Validation) ProtoMessage()    {}
func (*Validation) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fbe0ed46278613d, []int{1}
}
func (m *Validation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validation.Merge(m, src)
}
func (m *Validation) XXX_Size() int {
	return m.Size()
}
func (m *Validation) XXX_DiscardUnknown() {
	xxx_messageInfo_Validation.DiscardUnknown(m)
}

var xxx_messageInfo_Validation proto.InternalMessageInfo

func (m *Validation) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Validation) GetApplicant() string {
	if m != nil {
		return m.Applicant
	}
	return ""
}

func (m *Validation) GetType() ValidationType {
	if m != nil {
		return m.Type
	}
	return ValidationType_TYPE_UNSPECIFIED
}

func (m *Validation) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *Validation) GetValidatorPermId() uint64 {
	if m != nil {
		return m.ValidatorPermId
	}
	return 0
}

func (m *Validation) GetState() ValidationState {
	if m != nil {
		return m.State
	}
	return ValidationState_STATE_UNSPECIFIED
}

func (m *Validation) GetExp() *time.Time {
	if m != nil {
		return m.Exp
	}
	return nil
}

func (m *Validation) GetLastStateChange() time.Time {
	if m != nil {
		return m.LastStateChange
	}
	return time.Time{}
}

func (m *Validation) GetApplicantDeposit() int64 {
	if m != nil {
		return m.ApplicantDeposit
	}
	return 0
}

func (m *Validation) GetValidatorDeposits() []ValidatorDeposit {
	if m != nil {
		return m.ValidatorDeposits
	}
	return nil
}

func (m *Validation) GetCurrentFees() int64 {
	if m != nil {
		return m.CurrentFees
	}
	return 0
}

func (m *Validation) GetCurrentDeposit() int64 {
	if m != nil {
		return m.CurrentDeposit
	}
	return 0
}

func (m *Validation) GetSummaryHash() string {
	if m != nil {
		return m.SummaryHash
	}
	return ""
}

func (m *Validation) GetTermRequested() *time.Time {
	if m != nil {
		return m.TermRequested
	}
	return nil
}

func init() {
	proto.RegisterEnum("veranablockchain.validation.ValidationType", ValidationType_name, ValidationType_value)
	proto.RegisterEnum("veranablockchain.validation.ValidationState", ValidationState_name, ValidationState_value)
	proto.RegisterType((*ValidatorDeposit)(nil), "veranablockchain.validation.ValidatorDeposit")
	proto.RegisterType((*Validation)(nil), "veranablockchain.validation.Validation")
}

func init() {
	proto.RegisterFile("veranablockchain/validation/types.proto", fileDescriptor_5fbe0ed46278613d)
}

var fileDescriptor_5fbe0ed46278613d = []byte{
	// 704 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x4e, 0xe3, 0x46,
	0x14, 0x8e, 0x93, 0x10, 0xc8, 0x49, 0x70, 0x9c, 0x11, 0xad, 0x5c, 0x2a, 0x85, 0xc0, 0x0d, 0x11,
	0x14, 0x47, 0xa2, 0x12, 0x37, 0x95, 0x5a, 0x25, 0xc4, 0x40, 0x54, 0x1a, 0xa2, 0x89, 0x89, 0xd4,
	0xde, 0x58, 0x13, 0x7b, 0x48, 0xac, 0xc6, 0x1e, 0xaf, 0x67, 0x12, 0xc1, 0x5b, 0xf0, 0x00, 0xfb,
	0x18, 0xfb, 0x10, 0x5c, 0xa2, 0xbd, 0xda, 0xab, 0xdd, 0x15, 0xbc, 0xc8, 0xca, 0x7f, 0xc9, 0x2e,
	0x8b, 0x56, 0x70, 0x63, 0xcd, 0x39, 0xe7, 0xfb, 0x3c, 0x9f, 0xbf, 0xf3, 0xc9, 0xb0, 0x3b, 0xa7,
	0x01, 0xf1, 0xc8, 0x68, 0xca, 0xac, 0xff, 0xad, 0x09, 0x71, 0xbc, 0xe6, 0x9c, 0x4c, 0x1d, 0x9b,
	0x08, 0x87, 0x79, 0x4d, 0x71, 0xe3, 0x53, 0xae, 0xf9, 0x01, 0x13, 0x0c, 0xfd, 0xfa, 0x14, 0xa8,
	0x2d, 0x81, 0x9b, 0x55, 0xe2, 0x3a, 0x1e, 0x6b, 0x46, 0xcf, 0x18, 0xbf, 0xb9, 0x31, 0x66, 0x63,
	0x16, 0x1d, 0x9b, 0xe1, 0x29, 0xe9, 0xfe, 0x62, 0x31, 0xee, 0x32, 0x6e, 0xc6, 0x83, 0xb8, 0x48,
	0x46, 0x5b, 0x63, 0xc6, 0xc6, 0x53, 0xda, 0x8c, 0xaa, 0xd1, 0xec, 0xaa, 0x29, 0x1c, 0x97, 0x72,
	0x41, 0x5c, 0x3f, 0x06, 0xec, 0x0c, 0x41, 0x19, 0xc6, 0x57, 0xb2, 0xa0, 0x43, 0x7d, 0xc6, 0x1d,
	0x81, 0xf6, 0xa0, 0x3a, 0x4f, 0x7b, 0xa6, 0x4f, 0x03, 0xd7, 0x74, 0x6c, 0x55, 0xaa, 0x4b, 0x8d,
	0x3c, 0xae, 0x2c, 0x06, 0x7d, 0x1a, 0xb8, 0x5d, 0x1b, 0xfd, 0x0c, 0x05, 0xe2, 0xb2, 0x99, 0x27,
	0xd4, 0x6c, 0x5d, 0x6a, 0xe4, 0x70, 0x52, 0xed, 0xbc, 0x2d, 0x00, 0x0c, 0x17, 0xdf, 0x82, 0x64,
	0xc8, 0x2e, 0xde, 0x91, 0x75, 0x6c, 0x74, 0x04, 0x45, 0xe2, 0xfb, 0x53, 0xc7, 0x22, 0x09, 0xb3,
	0xd8, 0x56, 0xdf, 0xbf, 0x3b, 0xd8, 0x48, 0xc4, 0xb7, 0x6c, 0x3b, 0xa0, 0x9c, 0x0f, 0x44, 0xe0,
	0x78, 0x63, 0xbc, 0x84, 0xa2, 0xbf, 0x20, 0x1f, 0xfa, 0xa7, 0xe6, 0xea, 0x52, 0x43, 0x3e, 0xdc,
	0xd7, 0x7e, 0xe0, 0x9f, 0xb6, 0xbc, 0xde, 0xb8, 0xf1, 0x29, 0x8e, 0x88, 0xe8, 0x4f, 0x58, 0xb5,
	0x02, 0x4a, 0x04, 0xb5, 0xd5, 0x7c, 0x5d, 0x6a, 0x94, 0x0e, 0x37, 0xb5, 0xd8, 0x22, 0x2d, 0xb5,
	0x48, 0x33, 0x52, 0x8b, 0xda, 0x6b, 0x77, 0x1f, 0xb7, 0x32, 0xb7, 0x9f, 0xb6, 0x24, 0x9c, 0x92,
	0x9e, 0xf7, 0x66, 0xe5, 0x79, 0x6f, 0xda, 0xb0, 0xc2, 0x05, 0x11, 0x54, 0x2d, 0x44, 0x6a, 0x7f,
	0x7b, 0xa1, 0xda, 0x41, 0xc8, 0xc1, 0x31, 0x15, 0x1d, 0x41, 0x8e, 0x5e, 0xfb, 0xea, 0xea, 0x8b,
	0xb4, 0x4a, 0x91, 0xd6, 0x90, 0x80, 0xfa, 0x50, 0x9d, 0x12, 0x2e, 0xcc, 0xe8, 0x2d, 0xa6, 0x35,
	0x21, 0xde, 0x98, 0xaa, 0x6b, 0xaf, 0xf8, 0xe2, 0x4a, 0x48, 0x8f, 0xa4, 0x1c, 0x47, 0x64, 0xb4,
	0x0f, 0xd5, 0xc5, 0x1e, 0x4c, 0x3b, 0x8e, 0x8a, 0x5a, 0x8c, 0x96, 0xae, 0x2c, 0x06, 0x69, 0x84,
	0x46, 0x80, 0x96, 0x36, 0x25, 0x60, 0xae, 0x42, 0x3d, 0xd7, 0x28, 0x1d, 0x1e, 0xbc, 0xc4, 0x87,
	0x45, 0x1a, 0xdb, 0xf9, 0x50, 0x12, 0x5e, 0xba, 0x9e, 0xf4, 0x39, 0xda, 0x86, 0xb2, 0x35, 0x0b,
	0x02, 0xea, 0x09, 0xf3, 0x8a, 0x52, 0xae, 0x96, 0x22, 0x2d, 0xa5, 0xa4, 0x77, 0x42, 0x29, 0x47,
	0xbb, 0x50, 0x49, 0x21, 0xa9, 0xe2, 0x72, 0x84, 0x92, 0x93, 0x76, 0xaa, 0x77, 0x1b, 0xca, 0x7c,
	0xe6, 0xba, 0x24, 0xb8, 0x31, 0x27, 0x84, 0x4f, 0xd4, 0xf5, 0x30, 0x92, 0xb8, 0x94, 0xf4, 0xce,
	0x08, 0x9f, 0xa0, 0xbf, 0x41, 0x16, 0xe1, 0xbe, 0x03, 0xfa, 0x66, 0x46, 0x79, 0x18, 0x20, 0xf9,
	0x15, 0x4b, 0x59, 0x0f, 0xb9, 0x38, 0xa5, 0xee, 0xcd, 0x41, 0xfe, 0x36, 0x9e, 0x68, 0x03, 0x14,
	0xe3, 0xdf, 0xbe, 0x6e, 0x5e, 0xf6, 0x06, 0x7d, 0xfd, 0xb8, 0x7b, 0xd2, 0xd5, 0x3b, 0x4a, 0x06,
	0x21, 0x90, 0xbb, 0x83, 0xc1, 0xa5, 0x8e, 0xcd, 0x53, 0xdc, 0xea, 0x19, 0x17, 0x58, 0x91, 0x42,
	0xe4, 0x50, 0xc7, 0x21, 0x62, 0xd9, 0xcd, 0x22, 0x80, 0x42, 0x8c, 0x54, 0x72, 0xa8, 0x0c, 0x6b,
	0x29, 0x42, 0xc9, 0x87, 0x93, 0xb3, 0x8b, 0xf3, 0x8e, 0x8e, 0x95, 0x95, 0x3d, 0x03, 0x2a, 0x4f,
	0x82, 0x86, 0x7e, 0x82, 0xea, 0xc0, 0x68, 0x19, 0x4f, 0x6f, 0x2e, 0xc1, 0x6a, 0x5f, 0xef, 0x75,
	0xba, 0xbd, 0x53, 0x45, 0x42, 0xeb, 0x50, 0x1c, 0xb6, 0xce, 0xbb, 0x9d, 0x96, 0xa1, 0x77, 0x94,
	0x2c, 0x92, 0x01, 0x0c, 0x1d, 0xff, 0xd3, 0xed, 0x45, 0x75, 0xae, 0x7d, 0x79, 0xf7, 0x50, 0x93,
	0xee, 0x1f, 0x6a, 0xd2, 0xe7, 0x87, 0x9a, 0x74, 0xfb, 0x58, 0xcb, 0xdc, 0x3f, 0xd6, 0x32, 0x1f,
	0x1e, 0x6b, 0x99, 0xff, 0xfe, 0x18, 0x3b, 0x62, 0x32, 0x1b, 0x69, 0x16, 0x73, 0x9b, 0xf1, 0xd6,
	0x0f, 0xa6, 0x64, 0xc4, 0xd3, 0xf3, 0x57, 0x7f, 0xc8, 0xeb, 0xef, 0xfe, 0x91, 0xa3, 0x42, 0xe4,
	0xe8, 0xef, 0x5f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x54, 0x6b, 0x05, 0x4f, 0x05, 0x00, 0x00,
}

func (m *ValidatorDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.ValidatorPermId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidatorPermId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Validation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TermRequested != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.TermRequested, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.TermRequested):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintTypes(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x72
	}
	if len(m.SummaryHash) > 0 {
		i -= len(m.SummaryHash)
		copy(dAtA[i:], m.SummaryHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SummaryHash)))
		i--
		dAtA[i] = 0x6a
	}
	if m.CurrentDeposit != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CurrentDeposit))
		i--
		dAtA[i] = 0x60
	}
	if m.CurrentFees != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CurrentFees))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ValidatorDeposits) > 0 {
		for iNdEx := len(m.ValidatorDeposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorDeposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.ApplicantDeposit != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ApplicantDeposit))
		i--
		dAtA[i] = 0x48
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastStateChange, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastStateChange):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTypes(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x42
	if m.Exp != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.Exp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Exp):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintTypes(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x3a
	}
	if m.State != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	if m.ValidatorPermId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidatorPermId))
		i--
		dAtA[i] = 0x28
	}
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Created):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintTypes(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Applicant) > 0 {
		i -= len(m.Applicant)
		copy(dAtA[i:], m.Applicant)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Applicant)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorPermId != 0 {
		n += 1 + sovTypes(uint64(m.ValidatorPermId))
	}
	if m.Amount != 0 {
		n += 1 + sovTypes(uint64(m.Amount))
	}
	return n
}

func (m *Validation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	l = len(m.Applicant)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovTypes(uint64(l))
	if m.ValidatorPermId != 0 {
		n += 1 + sovTypes(uint64(m.ValidatorPermId))
	}
	if m.State != 0 {
		n += 1 + sovTypes(uint64(m.State))
	}
	if m.Exp != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Exp)
		n += 1 + l + sovTypes(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastStateChange)
	n += 1 + l + sovTypes(uint64(l))
	if m.ApplicantDeposit != 0 {
		n += 1 + sovTypes(uint64(m.ApplicantDeposit))
	}
	if len(m.ValidatorDeposits) > 0 {
		for _, e := range m.ValidatorDeposits {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CurrentFees != 0 {
		n += 1 + sovTypes(uint64(m.CurrentFees))
	}
	if m.CurrentDeposit != 0 {
		n += 1 + sovTypes(uint64(m.CurrentDeposit))
	}
	l = len(m.SummaryHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.TermRequested != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.TermRequested)
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPermId", wireType)
			}
			m.ValidatorPermId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorPermId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applicant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Applicant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ValidationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPermId", wireType)
			}
			m.ValidatorPermId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorPermId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ValidationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exp == nil {
				m.Exp = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.Exp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStateChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastStateChange, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicantDeposit", wireType)
			}
			m.ApplicantDeposit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplicantDeposit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorDeposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorDeposits = append(m.ValidatorDeposits, ValidatorDeposit{})
			if err := m.ValidatorDeposits[len(m.ValidatorDeposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentFees", wireType)
			}
			m.CurrentFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentFees |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentDeposit", wireType)
			}
			m.CurrentDeposit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentDeposit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SummaryHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SummaryHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermRequested", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TermRequested == nil {
				m.TermRequested = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.TermRequested, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
