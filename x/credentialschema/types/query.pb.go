// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: veranablockchain/credentialschema/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc2dfc1bf61ae30, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc2dfc1bf61ae30, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryListCredentialSchemasRequest struct {
	TrId            uint64     `protobuf:"varint,1,opt,name=tr_id,json=trId,proto3" json:"tr_id,omitempty"`
	CreatedAfter    *time.Time `protobuf:"bytes,2,opt,name=created_after,json=createdAfter,proto3,stdtime" json:"created_after,omitempty"`
	ResponseMaxSize uint32     `protobuf:"varint,3,opt,name=response_max_size,json=responseMaxSize,proto3" json:"response_max_size,omitempty"`
}

func (m *QueryListCredentialSchemasRequest) Reset()         { *m = QueryListCredentialSchemasRequest{} }
func (m *QueryListCredentialSchemasRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListCredentialSchemasRequest) ProtoMessage()    {}
func (*QueryListCredentialSchemasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc2dfc1bf61ae30, []int{2}
}
func (m *QueryListCredentialSchemasRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListCredentialSchemasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListCredentialSchemasRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListCredentialSchemasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListCredentialSchemasRequest.Merge(m, src)
}
func (m *QueryListCredentialSchemasRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListCredentialSchemasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListCredentialSchemasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListCredentialSchemasRequest proto.InternalMessageInfo

func (m *QueryListCredentialSchemasRequest) GetTrId() uint64 {
	if m != nil {
		return m.TrId
	}
	return 0
}

func (m *QueryListCredentialSchemasRequest) GetCreatedAfter() *time.Time {
	if m != nil {
		return m.CreatedAfter
	}
	return nil
}

func (m *QueryListCredentialSchemasRequest) GetResponseMaxSize() uint32 {
	if m != nil {
		return m.ResponseMaxSize
	}
	return 0
}

type QueryListCredentialSchemasResponse struct {
	Schemas []CredentialSchema `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas"`
}

func (m *QueryListCredentialSchemasResponse) Reset()         { *m = QueryListCredentialSchemasResponse{} }
func (m *QueryListCredentialSchemasResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListCredentialSchemasResponse) ProtoMessage()    {}
func (*QueryListCredentialSchemasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc2dfc1bf61ae30, []int{3}
}
func (m *QueryListCredentialSchemasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListCredentialSchemasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListCredentialSchemasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListCredentialSchemasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListCredentialSchemasResponse.Merge(m, src)
}
func (m *QueryListCredentialSchemasResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListCredentialSchemasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListCredentialSchemasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListCredentialSchemasResponse proto.InternalMessageInfo

func (m *QueryListCredentialSchemasResponse) GetSchemas() []CredentialSchema {
	if m != nil {
		return m.Schemas
	}
	return nil
}

type QueryGetCredentialSchemaRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCredentialSchemaRequest) Reset()         { *m = QueryGetCredentialSchemaRequest{} }
func (m *QueryGetCredentialSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCredentialSchemaRequest) ProtoMessage()    {}
func (*QueryGetCredentialSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc2dfc1bf61ae30, []int{4}
}
func (m *QueryGetCredentialSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCredentialSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCredentialSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCredentialSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCredentialSchemaRequest.Merge(m, src)
}
func (m *QueryGetCredentialSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCredentialSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCredentialSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCredentialSchemaRequest proto.InternalMessageInfo

func (m *QueryGetCredentialSchemaRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCredentialSchemaResponse struct {
	Schema CredentialSchema `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema"`
}

func (m *QueryGetCredentialSchemaResponse) Reset()         { *m = QueryGetCredentialSchemaResponse{} }
func (m *QueryGetCredentialSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCredentialSchemaResponse) ProtoMessage()    {}
func (*QueryGetCredentialSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc2dfc1bf61ae30, []int{5}
}
func (m *QueryGetCredentialSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCredentialSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCredentialSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCredentialSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCredentialSchemaResponse.Merge(m, src)
}
func (m *QueryGetCredentialSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCredentialSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCredentialSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCredentialSchemaResponse proto.InternalMessageInfo

func (m *QueryGetCredentialSchemaResponse) GetSchema() CredentialSchema {
	if m != nil {
		return m.Schema
	}
	return CredentialSchema{}
}

type QueryRenderJsonSchemaRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryRenderJsonSchemaRequest) Reset()         { *m = QueryRenderJsonSchemaRequest{} }
func (m *QueryRenderJsonSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRenderJsonSchemaRequest) ProtoMessage()    {}
func (*QueryRenderJsonSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc2dfc1bf61ae30, []int{6}
}
func (m *QueryRenderJsonSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRenderJsonSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRenderJsonSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRenderJsonSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRenderJsonSchemaRequest.Merge(m, src)
}
func (m *QueryRenderJsonSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRenderJsonSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRenderJsonSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRenderJsonSchemaRequest proto.InternalMessageInfo

func (m *QueryRenderJsonSchemaRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryRenderJsonSchemaResponse struct {
	Schema string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (m *QueryRenderJsonSchemaResponse) Reset()         { *m = QueryRenderJsonSchemaResponse{} }
func (m *QueryRenderJsonSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRenderJsonSchemaResponse) ProtoMessage()    {}
func (*QueryRenderJsonSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_abc2dfc1bf61ae30, []int{7}
}
func (m *QueryRenderJsonSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRenderJsonSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRenderJsonSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRenderJsonSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRenderJsonSchemaResponse.Merge(m, src)
}
func (m *QueryRenderJsonSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRenderJsonSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRenderJsonSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRenderJsonSchemaResponse proto.InternalMessageInfo

func (m *QueryRenderJsonSchemaResponse) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "veranablockchain.credentialschema.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "veranablockchain.credentialschema.QueryParamsResponse")
	proto.RegisterType((*QueryListCredentialSchemasRequest)(nil), "veranablockchain.credentialschema.QueryListCredentialSchemasRequest")
	proto.RegisterType((*QueryListCredentialSchemasResponse)(nil), "veranablockchain.credentialschema.QueryListCredentialSchemasResponse")
	proto.RegisterType((*QueryGetCredentialSchemaRequest)(nil), "veranablockchain.credentialschema.QueryGetCredentialSchemaRequest")
	proto.RegisterType((*QueryGetCredentialSchemaResponse)(nil), "veranablockchain.credentialschema.QueryGetCredentialSchemaResponse")
	proto.RegisterType((*QueryRenderJsonSchemaRequest)(nil), "veranablockchain.credentialschema.QueryRenderJsonSchemaRequest")
	proto.RegisterType((*QueryRenderJsonSchemaResponse)(nil), "veranablockchain.credentialschema.QueryRenderJsonSchemaResponse")
}

func init() {
	proto.RegisterFile("veranablockchain/credentialschema/query.proto", fileDescriptor_abc2dfc1bf61ae30)
}

var fileDescriptor_abc2dfc1bf61ae30 = []byte{
	// 677 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x41, 0x4f, 0x13, 0x41,
	0x14, 0xc7, 0x3b, 0x05, 0xaa, 0x0c, 0x22, 0x76, 0x0a, 0x8a, 0x2b, 0xb6, 0xb0, 0x27, 0x24, 0x61,
	0x27, 0x85, 0xa8, 0x47, 0xa5, 0x68, 0x0c, 0x06, 0x13, 0x59, 0x3c, 0xe9, 0xa1, 0x99, 0xdd, 0x1d,
	0x96, 0xd1, 0xee, 0xce, 0xb2, 0x33, 0x6d, 0x00, 0xe3, 0xc5, 0x4f, 0x40, 0xf4, 0x4b, 0x78, 0x53,
	0xcf, 0xc6, 0x3b, 0x27, 0x43, 0xe2, 0xc5, 0x13, 0x1a, 0x30, 0xf1, 0x6b, 0x98, 0xce, 0xce, 0x92,
	0x52, 0x28, 0x54, 0x7b, 0x69, 0xa6, 0xbb, 0xef, 0xfd, 0xff, 0xbf, 0xff, 0xeb, 0xdb, 0x2e, 0x9c,
	0x6d, 0xd0, 0x98, 0x84, 0xc4, 0xa9, 0x71, 0xf7, 0x95, 0xbb, 0x4e, 0x58, 0x88, 0xdd, 0x98, 0x7a,
	0x34, 0x94, 0x8c, 0xd4, 0x84, 0xbb, 0x4e, 0x03, 0x82, 0x37, 0xea, 0x34, 0xde, 0xb2, 0xa2, 0x98,
	0x4b, 0x8e, 0xa6, 0xda, 0xcb, 0xad, 0xf6, 0x72, 0x23, 0x4f, 0x02, 0x16, 0x72, 0xac, 0x3e, 0x93,
	0x2e, 0x63, 0xd4, 0xe7, 0x3e, 0x57, 0x47, 0xdc, 0x3c, 0xe9, 0xab, 0x13, 0x3e, 0xe7, 0x7e, 0x8d,
	0x62, 0x12, 0x31, 0x4c, 0xc2, 0x90, 0x4b, 0x22, 0x19, 0x0f, 0x85, 0xbe, 0x3b, 0xe3, 0x72, 0x11,
	0x70, 0x81, 0x1d, 0x22, 0x68, 0x82, 0x80, 0x1b, 0x65, 0x87, 0x4a, 0x52, 0xc6, 0x11, 0xf1, 0x59,
	0xa8, 0x8a, 0x75, 0xad, 0x75, 0x7e, 0x88, 0x88, 0xc4, 0x24, 0x48, 0xb5, 0xbb, 0x08, 0x2d, 0xb7,
	0x22, 0x9a, 0x96, 0x97, 0x34, 0xa8, 0xfa, 0xe6, 0xd4, 0xd7, 0xb0, 0x64, 0x01, 0x15, 0x92, 0x04,
	0x51, 0x52, 0x60, 0x8e, 0x42, 0xb4, 0xd2, 0x24, 0x7c, 0xaa, 0x4c, 0x6c, 0xba, 0x51, 0xa7, 0x42,
	0x9a, 0x2e, 0x2c, 0x1c, 0xbb, 0x2a, 0x22, 0x1e, 0x0a, 0x8a, 0x96, 0x61, 0x2e, 0x81, 0x19, 0x07,
	0x93, 0x60, 0x7a, 0x68, 0xee, 0x96, 0x75, 0xee, 0x4c, 0xad, 0x44, 0xa2, 0x32, 0xb8, 0xbb, 0x5f,
	0xca, 0x7c, 0xf8, 0xf3, 0x69, 0x06, 0xd8, 0x5a, 0xc3, 0xfc, 0x08, 0xe0, 0x94, 0x72, 0x59, 0x66,
	0x42, 0x2e, 0x1e, 0xf5, 0xad, 0xaa, 0xbe, 0x14, 0x05, 0x15, 0xe0, 0x80, 0x8c, 0xab, 0xcc, 0x53,
	0x96, 0xfd, 0x76, 0xbf, 0x8c, 0x97, 0x3c, 0xb4, 0x04, 0x87, 0xdd, 0x98, 0x12, 0x49, 0xbd, 0x2a,
	0x59, 0x93, 0x34, 0x1e, 0xcf, 0x2a, 0x1e, 0xc3, 0x4a, 0xe2, 0x5a, 0x69, 0x5c, 0xeb, 0x59, 0x1a,
	0xb7, 0x72, 0x71, 0x77, 0xbf, 0x04, 0x76, 0x7e, 0x96, 0x80, 0x7d, 0x49, 0xb7, 0x2e, 0x34, 0x3b,
	0xd1, 0x0c, 0xcc, 0xc7, 0x3a, 0x5f, 0x35, 0x20, 0x9b, 0x55, 0xc1, 0xb6, 0xe9, 0x78, 0xdf, 0x24,
	0x98, 0x1e, 0xb6, 0x47, 0xd2, 0x1b, 0x4f, 0xc8, 0xe6, 0x2a, 0xdb, 0xa6, 0xe6, 0x16, 0x34, 0xcf,
	0x02, 0xd6, 0x53, 0x5a, 0x85, 0x17, 0x92, 0xec, 0xcd, 0x31, 0xf5, 0x4d, 0x0f, 0xcd, 0xcd, 0x77,
	0x31, 0xa6, 0x76, 0xb9, 0x4a, 0x7f, 0x73, 0x60, 0x76, 0xaa, 0x64, 0x96, 0x61, 0x49, 0x59, 0x3f,
	0xa2, 0x27, 0x9c, 0xd3, 0x49, 0x5d, 0x86, 0xd9, 0xa3, 0x31, 0x65, 0x99, 0x67, 0xd6, 0xe1, 0x64,
	0xe7, 0x16, 0xcd, 0xba, 0x02, 0x73, 0x89, 0x83, 0xfe, 0x45, 0x7b, 0x40, 0xd5, 0x42, 0xa6, 0x05,
	0x27, 0x94, 0xad, 0x4d, 0x43, 0x8f, 0xc6, 0x8f, 0x05, 0x0f, 0xcf, 0xc6, 0xbc, 0x0b, 0x6f, 0x76,
	0xa8, 0xd7, 0x8c, 0x57, 0x8f, 0x31, 0x0e, 0xa6, 0x46, 0x73, 0xdf, 0x06, 0xe0, 0x80, 0xea, 0x44,
	0xef, 0x00, 0xcc, 0x25, 0x7b, 0x86, 0x6e, 0x77, 0x11, 0xe0, 0xe4, 0xc2, 0x1b, 0x77, 0xfe, 0xb5,
	0x2d, 0x61, 0x33, 0xaf, 0xbf, 0xfd, 0xfe, 0xfb, 0x7d, 0xb6, 0x80, 0xf2, 0xb8, 0x11, 0xc5, 0xb8,
	0x51, 0xc6, 0xae, 0xd0, 0xcf, 0x2b, 0xfa, 0x0a, 0xe0, 0xd8, 0xa9, 0x8b, 0x82, 0x1e, 0x74, 0x6b,
	0x76, 0xd6, 0x83, 0x61, 0x3c, 0xec, 0x51, 0x45, 0x27, 0xb8, 0xa6, 0x12, 0xe4, 0xd1, 0x48, 0x4b,
	0x82, 0x1a, 0x13, 0x12, 0x7d, 0x01, 0xb0, 0x70, 0xca, 0xea, 0xa0, 0x4a, 0xb7, 0xbe, 0x9d, 0x57,
	0xd5, 0x58, 0xec, 0x49, 0x43, 0x93, 0xdf, 0x50, 0xe4, 0x63, 0xa8, 0xd0, 0x42, 0xee, 0x53, 0x89,
	0x5f, 0x33, 0xef, 0x0d, 0xfa, 0x0c, 0xe0, 0x95, 0xf6, 0x8d, 0x42, 0xf7, 0xba, 0xb5, 0xed, 0xb0,
	0xbb, 0xc6, 0xfd, 0xff, 0x17, 0xd0, 0xd0, 0x86, 0x82, 0x1e, 0x45, 0xa8, 0x05, 0xfa, 0xa5, 0x50,
	0xcc, 0x95, 0x17, 0xbb, 0x07, 0x45, 0xb0, 0x77, 0x50, 0x04, 0xbf, 0x0e, 0x8a, 0x60, 0xe7, 0xb0,
	0x98, 0xd9, 0x3b, 0x2c, 0x66, 0x7e, 0x1c, 0x16, 0x33, 0xcf, 0x17, 0x7c, 0x26, 0xd7, 0xeb, 0x8e,
	0xe5, 0xf2, 0x00, 0x27, 0x04, 0xb3, 0x35, 0xe2, 0x88, 0xf4, 0xdc, 0xf2, 0x36, 0xd8, 0xec, 0xf0,
	0x3e, 0x70, 0x72, 0xea, 0x3f, 0x71, 0xfe, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x8c, 0x66,
	0x1a, 0x36, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ListCredentialSchemas queries a list of CredentialSchema items.
	ListCredentialSchemas(ctx context.Context, in *QueryListCredentialSchemasRequest, opts ...grpc.CallOption) (*QueryListCredentialSchemasResponse, error)
	// GetCredentialSchema returns a credential schema by ID
	GetCredentialSchema(ctx context.Context, in *QueryGetCredentialSchemaRequest, opts ...grpc.CallOption) (*QueryGetCredentialSchemaResponse, error)
	// RenderJsonSchema returns the JSON schema definition
	RenderJsonSchema(ctx context.Context, in *QueryRenderJsonSchemaRequest, opts ...grpc.CallOption) (*QueryRenderJsonSchemaResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.credentialschema.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListCredentialSchemas(ctx context.Context, in *QueryListCredentialSchemasRequest, opts ...grpc.CallOption) (*QueryListCredentialSchemasResponse, error) {
	out := new(QueryListCredentialSchemasResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.credentialschema.Query/ListCredentialSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCredentialSchema(ctx context.Context, in *QueryGetCredentialSchemaRequest, opts ...grpc.CallOption) (*QueryGetCredentialSchemaResponse, error) {
	out := new(QueryGetCredentialSchemaResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.credentialschema.Query/GetCredentialSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RenderJsonSchema(ctx context.Context, in *QueryRenderJsonSchemaRequest, opts ...grpc.CallOption) (*QueryRenderJsonSchemaResponse, error) {
	out := new(QueryRenderJsonSchemaResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.credentialschema.Query/RenderJsonSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ListCredentialSchemas queries a list of CredentialSchema items.
	ListCredentialSchemas(context.Context, *QueryListCredentialSchemasRequest) (*QueryListCredentialSchemasResponse, error)
	// GetCredentialSchema returns a credential schema by ID
	GetCredentialSchema(context.Context, *QueryGetCredentialSchemaRequest) (*QueryGetCredentialSchemaResponse, error)
	// RenderJsonSchema returns the JSON schema definition
	RenderJsonSchema(context.Context, *QueryRenderJsonSchemaRequest) (*QueryRenderJsonSchemaResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ListCredentialSchemas(ctx context.Context, req *QueryListCredentialSchemasRequest) (*QueryListCredentialSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredentialSchemas not implemented")
}
func (*UnimplementedQueryServer) GetCredentialSchema(ctx context.Context, req *QueryGetCredentialSchemaRequest) (*QueryGetCredentialSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialSchema not implemented")
}
func (*UnimplementedQueryServer) RenderJsonSchema(ctx context.Context, req *QueryRenderJsonSchemaRequest) (*QueryRenderJsonSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderJsonSchema not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.credentialschema.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListCredentialSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListCredentialSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListCredentialSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.credentialschema.Query/ListCredentialSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListCredentialSchemas(ctx, req.(*QueryListCredentialSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCredentialSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCredentialSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCredentialSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.credentialschema.Query/GetCredentialSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCredentialSchema(ctx, req.(*QueryGetCredentialSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RenderJsonSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRenderJsonSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RenderJsonSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.credentialschema.Query/RenderJsonSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RenderJsonSchema(ctx, req.(*QueryRenderJsonSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veranablockchain.credentialschema.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ListCredentialSchemas",
			Handler:    _Query_ListCredentialSchemas_Handler,
		},
		{
			MethodName: "GetCredentialSchema",
			Handler:    _Query_GetCredentialSchema_Handler,
		},
		{
			MethodName: "RenderJsonSchema",
			Handler:    _Query_RenderJsonSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "veranablockchain/credentialschema/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListCredentialSchemasRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListCredentialSchemasRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListCredentialSchemasRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResponseMaxSize != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ResponseMaxSize))
		i--
		dAtA[i] = 0x18
	}
	if m.CreatedAfter != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.CreatedAfter, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CreatedAfter):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintQuery(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x12
	}
	if m.TrId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TrId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryListCredentialSchemasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListCredentialSchemasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListCredentialSchemasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		for iNdEx := len(m.Schemas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Schemas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCredentialSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCredentialSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCredentialSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCredentialSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCredentialSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCredentialSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Schema.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRenderJsonSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRenderJsonSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRenderJsonSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRenderJsonSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRenderJsonSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRenderJsonSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListCredentialSchemasRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrId != 0 {
		n += 1 + sovQuery(uint64(m.TrId))
	}
	if m.CreatedAfter != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.CreatedAfter)
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ResponseMaxSize != 0 {
		n += 1 + sovQuery(uint64(m.ResponseMaxSize))
	}
	return n
}

func (m *QueryListCredentialSchemasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Schemas) > 0 {
		for _, e := range m.Schemas {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetCredentialSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCredentialSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Schema.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRenderJsonSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryRenderJsonSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListCredentialSchemasRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListCredentialSchemasRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListCredentialSchemasRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrId", wireType)
			}
			m.TrId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAfter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAfter == nil {
				m.CreatedAfter = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.CreatedAfter, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseMaxSize", wireType)
			}
			m.ResponseMaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseMaxSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListCredentialSchemasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListCredentialSchemasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListCredentialSchemasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schemas = append(m.Schemas, CredentialSchema{})
			if err := m.Schemas[len(m.Schemas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCredentialSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCredentialSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCredentialSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCredentialSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCredentialSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCredentialSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRenderJsonSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRenderJsonSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRenderJsonSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRenderJsonSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRenderJsonSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRenderJsonSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
