// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: veranablockchain/credentialschema/types.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CredentialSchemaPermManagementMode defines how permissions are managed
type CredentialSchemaPermManagementMode int32

const (
	// Default to prevent accidental omission
	CredentialSchemaPermManagementMode_PERM_MANAGEMENT_MODE_UNSPECIFIED CredentialSchemaPermManagementMode = 0
	// Anyone can create their own permission
	CredentialSchemaPermManagementMode_PERM_MANAGEMENT_MODE_OPEN CredentialSchemaPermManagementMode = 1
	// Requires validation from a grantor
	CredentialSchemaPermManagementMode_PERM_MANAGEMENT_MODE_GRANTOR_VALIDATION CredentialSchemaPermManagementMode = 2
	// Requires validation from trust registry
	CredentialSchemaPermManagementMode_PERM_MANAGEMENT_MODE_TRUST_REGISTRY_VALIDATION CredentialSchemaPermManagementMode = 3
)

var CredentialSchemaPermManagementMode_name = map[int32]string{
	0: "PERM_MANAGEMENT_MODE_UNSPECIFIED",
	1: "PERM_MANAGEMENT_MODE_OPEN",
	2: "PERM_MANAGEMENT_MODE_GRANTOR_VALIDATION",
	3: "PERM_MANAGEMENT_MODE_TRUST_REGISTRY_VALIDATION",
}

var CredentialSchemaPermManagementMode_value = map[string]int32{
	"PERM_MANAGEMENT_MODE_UNSPECIFIED":               0,
	"PERM_MANAGEMENT_MODE_OPEN":                      1,
	"PERM_MANAGEMENT_MODE_GRANTOR_VALIDATION":        2,
	"PERM_MANAGEMENT_MODE_TRUST_REGISTRY_VALIDATION": 3,
}

func (x CredentialSchemaPermManagementMode) String() string {
	return proto.EnumName(CredentialSchemaPermManagementMode_name, int32(x))
}

func (CredentialSchemaPermManagementMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c3fce670cd1c45d, []int{0}
}

// CredentialSchema defines the structure for a credential schema
type CredentialSchema struct {
	Id                                      uint64                             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TrId                                    uint64                             `protobuf:"varint,2,opt,name=tr_id,json=trId,proto3" json:"tr_id,omitempty"`
	Created                                 time.Time                          `protobuf:"bytes,3,opt,name=created,proto3,stdtime" json:"created"`
	Deposit                                 uint64                             `protobuf:"varint,4,opt,name=deposit,proto3" json:"deposit,omitempty"`
	JsonSchema                              string                             `protobuf:"bytes,5,opt,name=json_schema,json=jsonSchema,proto3" json:"json_schema,omitempty"`
	IssuerGrantorValidationValidityPeriod   uint32                             `protobuf:"varint,6,opt,name=issuer_grantor_validation_validity_period,json=issuerGrantorValidationValidityPeriod,proto3" json:"issuer_grantor_validation_validity_period,omitempty"`
	VerifierGrantorValidationValidityPeriod uint32                             `protobuf:"varint,7,opt,name=verifier_grantor_validation_validity_period,json=verifierGrantorValidationValidityPeriod,proto3" json:"verifier_grantor_validation_validity_period,omitempty"`
	IssuerValidationValidityPeriod          uint32                             `protobuf:"varint,8,opt,name=issuer_validation_validity_period,json=issuerValidationValidityPeriod,proto3" json:"issuer_validation_validity_period,omitempty"`
	VerifierValidationValidityPeriod        uint32                             `protobuf:"varint,9,opt,name=verifier_validation_validity_period,json=verifierValidationValidityPeriod,proto3" json:"verifier_validation_validity_period,omitempty"`
	HolderValidationValidityPeriod          uint32                             `protobuf:"varint,10,opt,name=holder_validation_validity_period,json=holderValidationValidityPeriod,proto3" json:"holder_validation_validity_period,omitempty"`
	IssuerPermManagementMode                CredentialSchemaPermManagementMode `protobuf:"varint,11,opt,name=issuer_perm_management_mode,json=issuerPermManagementMode,proto3,enum=veranablockchain.credentialschema.CredentialSchemaPermManagementMode" json:"issuer_perm_management_mode,omitempty"`
	VerifierPermManagementMode              CredentialSchemaPermManagementMode `protobuf:"varint,12,opt,name=verifier_perm_management_mode,json=verifierPermManagementMode,proto3,enum=veranablockchain.credentialschema.CredentialSchemaPermManagementMode" json:"verifier_perm_management_mode,omitempty"`
}

func (m *CredentialSchema) Reset()         { *m = CredentialSchema{} }
func (m *CredentialSchema) String() string { return proto.CompactTextString(m) }
func (*CredentialSchema) ProtoMessage()    {}
func (*CredentialSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3fce670cd1c45d, []int{0}
}
func (m *CredentialSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialSchema.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialSchema.Merge(m, src)
}
func (m *CredentialSchema) XXX_Size() int {
	return m.Size()
}
func (m *CredentialSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialSchema.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialSchema proto.InternalMessageInfo

func (m *CredentialSchema) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CredentialSchema) GetTrId() uint64 {
	if m != nil {
		return m.TrId
	}
	return 0
}

func (m *CredentialSchema) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *CredentialSchema) GetDeposit() uint64 {
	if m != nil {
		return m.Deposit
	}
	return 0
}

func (m *CredentialSchema) GetJsonSchema() string {
	if m != nil {
		return m.JsonSchema
	}
	return ""
}

func (m *CredentialSchema) GetIssuerGrantorValidationValidityPeriod() uint32 {
	if m != nil {
		return m.IssuerGrantorValidationValidityPeriod
	}
	return 0
}

func (m *CredentialSchema) GetVerifierGrantorValidationValidityPeriod() uint32 {
	if m != nil {
		return m.VerifierGrantorValidationValidityPeriod
	}
	return 0
}

func (m *CredentialSchema) GetIssuerValidationValidityPeriod() uint32 {
	if m != nil {
		return m.IssuerValidationValidityPeriod
	}
	return 0
}

func (m *CredentialSchema) GetVerifierValidationValidityPeriod() uint32 {
	if m != nil {
		return m.VerifierValidationValidityPeriod
	}
	return 0
}

func (m *CredentialSchema) GetHolderValidationValidityPeriod() uint32 {
	if m != nil {
		return m.HolderValidationValidityPeriod
	}
	return 0
}

func (m *CredentialSchema) GetIssuerPermManagementMode() CredentialSchemaPermManagementMode {
	if m != nil {
		return m.IssuerPermManagementMode
	}
	return CredentialSchemaPermManagementMode_PERM_MANAGEMENT_MODE_UNSPECIFIED
}

func (m *CredentialSchema) GetVerifierPermManagementMode() CredentialSchemaPermManagementMode {
	if m != nil {
		return m.VerifierPermManagementMode
	}
	return CredentialSchemaPermManagementMode_PERM_MANAGEMENT_MODE_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("veranablockchain.credentialschema.CredentialSchemaPermManagementMode", CredentialSchemaPermManagementMode_name, CredentialSchemaPermManagementMode_value)
	proto.RegisterType((*CredentialSchema)(nil), "veranablockchain.credentialschema.CredentialSchema")
}

func init() {
	proto.RegisterFile("veranablockchain/credentialschema/types.proto", fileDescriptor_0c3fce670cd1c45d)
}

var fileDescriptor_0c3fce670cd1c45d = []byte{
	// 606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcd, 0x4f, 0xdb, 0x30,
	0x18, 0xc6, 0xeb, 0xf2, 0x6d, 0x36, 0xd4, 0x65, 0x3b, 0x84, 0x4e, 0xa4, 0x81, 0x6d, 0xa2, 0x1b,
	0x22, 0x91, 0xd8, 0x7d, 0x52, 0x81, 0xac, 0x8a, 0xb4, 0xb4, 0x55, 0x1a, 0xd0, 0xbe, 0x24, 0xcb,
	0x8d, 0x4d, 0xea, 0xad, 0x89, 0x2b, 0xc7, 0xa0, 0x71, 0xdf, 0x61, 0x47, 0xfe, 0x2c, 0xb4, 0x13,
	0xc7, 0x9d, 0xf6, 0x01, 0xff, 0xc8, 0x44, 0x9c, 0x54, 0x08, 0x4a, 0xd9, 0x61, 0x97, 0xe8, 0xb5,
	0xdf, 0xe7, 0xf9, 0xbd, 0x4f, 0xac, 0xc4, 0x70, 0xf3, 0x88, 0x0a, 0x9c, 0xe0, 0xde, 0x80, 0x87,
	0x9f, 0xc3, 0x3e, 0x66, 0x89, 0x1d, 0x0a, 0x4a, 0x68, 0x22, 0x19, 0x1e, 0xa4, 0x61, 0x9f, 0xc6,
	0xd8, 0x96, 0xc7, 0x43, 0x9a, 0x5a, 0x43, 0xc1, 0x25, 0xd7, 0x56, 0xaf, 0xcb, 0xad, 0xeb, 0xf2,
	0xea, 0x03, 0x1c, 0xb3, 0x84, 0xdb, 0xd9, 0x53, 0xb9, 0xaa, 0x8f, 0x22, 0x1e, 0xf1, 0xac, 0xb4,
	0x2f, 0xab, 0x7c, 0xb7, 0x16, 0x71, 0x1e, 0x0d, 0xa8, 0x9d, 0xad, 0x7a, 0x87, 0x07, 0xb6, 0x64,
	0x31, 0x4d, 0x25, 0x8e, 0x87, 0xb9, 0x60, 0x39, 0xe4, 0x69, 0xcc, 0x53, 0xa4, 0x9c, 0x6a, 0xa1,
	0x5a, 0x6b, 0x7f, 0x66, 0x61, 0x65, 0x67, 0x34, 0xb9, 0x9b, 0x4d, 0xd6, 0x96, 0x60, 0x99, 0x11,
	0x1d, 0x98, 0xa0, 0x3e, 0xed, 0x97, 0x19, 0xd1, 0x1e, 0xc2, 0x19, 0x29, 0x10, 0x23, 0x7a, 0x39,
	0xdb, 0x9a, 0x96, 0xc2, 0x25, 0xda, 0x2b, 0x38, 0x17, 0x0a, 0x8a, 0x25, 0x25, 0xfa, 0x94, 0x09,
	0xea, 0x8b, 0x5b, 0x55, 0x4b, 0xe5, 0xb0, 0x8a, 0x1c, 0x56, 0x50, 0xe4, 0xd8, 0x9e, 0x3f, 0xfd,
	0x59, 0x2b, 0x9d, 0xfc, 0xaa, 0x01, 0xbf, 0x30, 0x69, 0x3a, 0x9c, 0x23, 0x74, 0xc8, 0x53, 0x26,
	0xf5, 0xe9, 0x0c, 0x5b, 0x2c, 0xb5, 0x1a, 0x5c, 0xfc, 0x94, 0xf2, 0x04, 0xa9, 0x73, 0xd0, 0x67,
	0x4c, 0x50, 0x5f, 0xf0, 0xe1, 0xe5, 0x56, 0x9e, 0xef, 0x2d, 0x7c, 0xce, 0xd2, 0xf4, 0x90, 0x0a,
	0x14, 0x09, 0x9c, 0x48, 0x2e, 0xd0, 0x11, 0x1e, 0x30, 0x82, 0x25, 0xe3, 0x89, 0x2a, 0x99, 0x3c,
	0x46, 0x43, 0x2a, 0x18, 0x27, 0xfa, 0xac, 0x09, 0xea, 0xf7, 0xfd, 0x67, 0xca, 0xd0, 0x54, 0xfa,
	0xfd, 0x91, 0x7c, 0x3f, 0x57, 0x77, 0x32, 0xb1, 0xf6, 0x11, 0x6e, 0x1c, 0x51, 0xc1, 0x0e, 0xd8,
	0xbf, 0xb1, 0xe7, 0x32, 0xf6, 0x7a, 0x61, 0xb9, 0x8b, 0xee, 0xc2, 0xd5, 0x3c, 0xf7, 0x04, 0xe6,
	0x7c, 0xc6, 0x34, 0x94, 0xf0, 0x56, 0x94, 0x07, 0x9f, 0x8c, 0x82, 0x4e, 0x80, 0x2d, 0x64, 0x30,
	0xb3, 0x90, 0x4e, 0x4a, 0xd6, 0xe7, 0x03, 0x32, 0x19, 0x06, 0x55, 0x32, 0x25, 0xbc, 0x15, 0xf5,
	0x15, 0xc0, 0xc7, 0xf9, 0x5b, 0x0e, 0xa9, 0x88, 0x51, 0x8c, 0x13, 0x1c, 0xd1, 0x98, 0x26, 0x12,
	0xc5, 0x9c, 0x50, 0x7d, 0xd1, 0x04, 0xf5, 0xa5, 0x2d, 0xc7, 0xba, 0xf3, 0x07, 0xb0, 0xae, 0x7f,
	0x97, 0x1d, 0x2a, 0x62, 0x6f, 0x44, 0xf3, 0x38, 0xa1, 0xbe, 0xae, 0x26, 0xdd, 0xec, 0x68, 0xdf,
	0x00, 0x5c, 0x19, 0x9d, 0xd0, 0xd8, 0x20, 0xf7, 0xfe, 0x67, 0x90, 0x6a, 0x31, 0xeb, 0x66, 0xef,
	0xc5, 0x77, 0x00, 0xd7, 0xee, 0x46, 0x68, 0x4f, 0xa1, 0xd9, 0x71, 0x7c, 0x0f, 0x79, 0x8d, 0x56,
	0xa3, 0xe9, 0x78, 0x4e, 0x2b, 0x40, 0x5e, 0x7b, 0xd7, 0x41, 0x7b, 0xad, 0x6e, 0xc7, 0xd9, 0x71,
	0x5f, 0xbb, 0xce, 0x6e, 0xa5, 0xa4, 0xad, 0xc0, 0xe5, 0xb1, 0xaa, 0x76, 0xc7, 0x69, 0x55, 0x80,
	0xb6, 0x01, 0xd7, 0xc7, 0xb6, 0x9b, 0x7e, 0xa3, 0x15, 0xb4, 0x7d, 0xb4, 0xdf, 0x78, 0xe3, 0xee,
	0x36, 0x02, 0xb7, 0xdd, 0xaa, 0x94, 0xb5, 0x2d, 0x68, 0x8d, 0x15, 0x07, 0xfe, 0x5e, 0x37, 0x40,
	0xbe, 0xd3, 0x74, 0xbb, 0x81, 0xff, 0xee, 0xaa, 0x67, 0x6a, 0xfb, 0xc3, 0xe9, 0xb9, 0x01, 0xce,
	0xce, 0x0d, 0xf0, 0xfb, 0xdc, 0x00, 0x27, 0x17, 0x46, 0xe9, 0xec, 0xc2, 0x28, 0xfd, 0xb8, 0x30,
	0x4a, 0xef, 0x1b, 0x11, 0x93, 0xfd, 0xc3, 0x9e, 0x15, 0xf2, 0xd8, 0x56, 0x67, 0xba, 0x39, 0xc0,
	0xbd, 0xb4, 0xa8, 0xaf, 0xdc, 0x8c, 0x5f, 0x6e, 0xb9, 0x1b, 0x7b, 0xb3, 0xd9, 0xd5, 0xf1, 0xf2,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x79, 0x3b, 0xa4, 0xae, 0x4d, 0x05, 0x00, 0x00,
}

func (m *CredentialSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VerifierPermManagementMode != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VerifierPermManagementMode))
		i--
		dAtA[i] = 0x60
	}
	if m.IssuerPermManagementMode != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IssuerPermManagementMode))
		i--
		dAtA[i] = 0x58
	}
	if m.HolderValidationValidityPeriod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HolderValidationValidityPeriod))
		i--
		dAtA[i] = 0x50
	}
	if m.VerifierValidationValidityPeriod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VerifierValidationValidityPeriod))
		i--
		dAtA[i] = 0x48
	}
	if m.IssuerValidationValidityPeriod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IssuerValidationValidityPeriod))
		i--
		dAtA[i] = 0x40
	}
	if m.VerifierGrantorValidationValidityPeriod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VerifierGrantorValidationValidityPeriod))
		i--
		dAtA[i] = 0x38
	}
	if m.IssuerGrantorValidationValidityPeriod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IssuerGrantorValidationValidityPeriod))
		i--
		dAtA[i] = 0x30
	}
	if len(m.JsonSchema) > 0 {
		i -= len(m.JsonSchema)
		copy(dAtA[i:], m.JsonSchema)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.JsonSchema)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Deposit != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Deposit))
		i--
		dAtA[i] = 0x20
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Created):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTypes(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if m.TrId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TrId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CredentialSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.TrId != 0 {
		n += 1 + sovTypes(uint64(m.TrId))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovTypes(uint64(l))
	if m.Deposit != 0 {
		n += 1 + sovTypes(uint64(m.Deposit))
	}
	l = len(m.JsonSchema)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.IssuerGrantorValidationValidityPeriod != 0 {
		n += 1 + sovTypes(uint64(m.IssuerGrantorValidationValidityPeriod))
	}
	if m.VerifierGrantorValidationValidityPeriod != 0 {
		n += 1 + sovTypes(uint64(m.VerifierGrantorValidationValidityPeriod))
	}
	if m.IssuerValidationValidityPeriod != 0 {
		n += 1 + sovTypes(uint64(m.IssuerValidationValidityPeriod))
	}
	if m.VerifierValidationValidityPeriod != 0 {
		n += 1 + sovTypes(uint64(m.VerifierValidationValidityPeriod))
	}
	if m.HolderValidationValidityPeriod != 0 {
		n += 1 + sovTypes(uint64(m.HolderValidationValidityPeriod))
	}
	if m.IssuerPermManagementMode != 0 {
		n += 1 + sovTypes(uint64(m.IssuerPermManagementMode))
	}
	if m.VerifierPermManagementMode != 0 {
		n += 1 + sovTypes(uint64(m.VerifierPermManagementMode))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CredentialSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrId", wireType)
			}
			m.TrId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			m.Deposit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deposit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonSchema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonSchema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerGrantorValidationValidityPeriod", wireType)
			}
			m.IssuerGrantorValidationValidityPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuerGrantorValidationValidityPeriod |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifierGrantorValidationValidityPeriod", wireType)
			}
			m.VerifierGrantorValidationValidityPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifierGrantorValidationValidityPeriod |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerValidationValidityPeriod", wireType)
			}
			m.IssuerValidationValidityPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuerValidationValidityPeriod |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifierValidationValidityPeriod", wireType)
			}
			m.VerifierValidationValidityPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifierValidationValidityPeriod |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HolderValidationValidityPeriod", wireType)
			}
			m.HolderValidationValidityPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HolderValidationValidityPeriod |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerPermManagementMode", wireType)
			}
			m.IssuerPermManagementMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuerPermManagementMode |= CredentialSchemaPermManagementMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifierPermManagementMode", wireType)
			}
			m.VerifierPermManagementMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifierPermManagementMode |= CredentialSchemaPermManagementMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
