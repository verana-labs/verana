// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: veranablockchain/permission/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the module parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_9be78fdf8430a9d2, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9be78fdf8430a9d2, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgStartPermissionVP represents a message to start a permission validation process
type MsgStartPermissionVP struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Type            uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	ValidatorPermId uint64 `protobuf:"varint,3,opt,name=validator_perm_id,json=validatorPermId,proto3" json:"validator_perm_id,omitempty"`
	Country         string `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Did             string `protobuf:"bytes,5,opt,name=did,proto3" json:"did,omitempty"`
}

func (m *MsgStartPermissionVP) Reset()         { *m = MsgStartPermissionVP{} }
func (m *MsgStartPermissionVP) String() string { return proto.CompactTextString(m) }
func (*MsgStartPermissionVP) ProtoMessage()    {}
func (*MsgStartPermissionVP) Descriptor() ([]byte, []int) {
	return fileDescriptor_9be78fdf8430a9d2, []int{2}
}
func (m *MsgStartPermissionVP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartPermissionVP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartPermissionVP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartPermissionVP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartPermissionVP.Merge(m, src)
}
func (m *MsgStartPermissionVP) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartPermissionVP) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartPermissionVP.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartPermissionVP proto.InternalMessageInfo

func (m *MsgStartPermissionVP) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgStartPermissionVP) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *MsgStartPermissionVP) GetValidatorPermId() uint64 {
	if m != nil {
		return m.ValidatorPermId
	}
	return 0
}

func (m *MsgStartPermissionVP) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *MsgStartPermissionVP) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

// MsgStartPermissionVPResponse defines the Msg/StartPermissionVP response type
type MsgStartPermissionVPResponse struct {
	PermissionId uint64 `protobuf:"varint,1,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
}

func (m *MsgStartPermissionVPResponse) Reset()         { *m = MsgStartPermissionVPResponse{} }
func (m *MsgStartPermissionVPResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStartPermissionVPResponse) ProtoMessage()    {}
func (*MsgStartPermissionVPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9be78fdf8430a9d2, []int{3}
}
func (m *MsgStartPermissionVPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartPermissionVPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartPermissionVPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartPermissionVPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartPermissionVPResponse.Merge(m, src)
}
func (m *MsgStartPermissionVPResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartPermissionVPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartPermissionVPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartPermissionVPResponse proto.InternalMessageInfo

func (m *MsgStartPermissionVPResponse) GetPermissionId() uint64 {
	if m != nil {
		return m.PermissionId
	}
	return 0
}

// MsgRenewPermissionVP represents a message to renew a permission validation process
type MsgRenewPermissionVP struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgRenewPermissionVP) Reset()         { *m = MsgRenewPermissionVP{} }
func (m *MsgRenewPermissionVP) String() string { return proto.CompactTextString(m) }
func (*MsgRenewPermissionVP) ProtoMessage()    {}
func (*MsgRenewPermissionVP) Descriptor() ([]byte, []int) {
	return fileDescriptor_9be78fdf8430a9d2, []int{4}
}
func (m *MsgRenewPermissionVP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRenewPermissionVP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRenewPermissionVP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRenewPermissionVP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRenewPermissionVP.Merge(m, src)
}
func (m *MsgRenewPermissionVP) XXX_Size() int {
	return m.Size()
}
func (m *MsgRenewPermissionVP) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRenewPermissionVP.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRenewPermissionVP proto.InternalMessageInfo

func (m *MsgRenewPermissionVP) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRenewPermissionVP) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// MsgRenewPermissionVPResponse defines the Msg/RenewPermissionVP response type
type MsgRenewPermissionVPResponse struct {
}

func (m *MsgRenewPermissionVPResponse) Reset()         { *m = MsgRenewPermissionVPResponse{} }
func (m *MsgRenewPermissionVPResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRenewPermissionVPResponse) ProtoMessage()    {}
func (*MsgRenewPermissionVPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9be78fdf8430a9d2, []int{5}
}
func (m *MsgRenewPermissionVPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRenewPermissionVPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRenewPermissionVPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRenewPermissionVPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRenewPermissionVPResponse.Merge(m, src)
}
func (m *MsgRenewPermissionVPResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRenewPermissionVPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRenewPermissionVPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRenewPermissionVPResponse proto.InternalMessageInfo

// MsgSetPermissionVPToValidated represents a message to set a permission validation process to validated state
type MsgSetPermissionVPToValidated struct {
	Creator            string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                 uint64     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	EffectiveUntil     *time.Time `protobuf:"bytes,3,opt,name=effective_until,json=effectiveUntil,proto3,stdtime" json:"effective_until,omitempty"`
	ValidationFees     uint64     `protobuf:"varint,4,opt,name=validation_fees,json=validationFees,proto3" json:"validation_fees,omitempty"`
	IssuanceFees       uint64     `protobuf:"varint,5,opt,name=issuance_fees,json=issuanceFees,proto3" json:"issuance_fees,omitempty"`
	VerificationFees   uint64     `protobuf:"varint,6,opt,name=verification_fees,json=verificationFees,proto3" json:"verification_fees,omitempty"`
	Country            string     `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	VpSummaryDigestSri string     `protobuf:"bytes,8,opt,name=vp_summary_digest_sri,json=vpSummaryDigestSri,proto3" json:"vp_summary_digest_sri,omitempty"`
}

func (m *MsgSetPermissionVPToValidated) Reset()         { *m = MsgSetPermissionVPToValidated{} }
func (m *MsgSetPermissionVPToValidated) String() string { return proto.CompactTextString(m) }
func (*MsgSetPermissionVPToValidated) ProtoMessage()    {}
func (*MsgSetPermissionVPToValidated) Descriptor() ([]byte, []int) {
	return fileDescriptor_9be78fdf8430a9d2, []int{6}
}
func (m *MsgSetPermissionVPToValidated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPermissionVPToValidated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPermissionVPToValidated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPermissionVPToValidated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPermissionVPToValidated.Merge(m, src)
}
func (m *MsgSetPermissionVPToValidated) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPermissionVPToValidated) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPermissionVPToValidated.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPermissionVPToValidated proto.InternalMessageInfo

func (m *MsgSetPermissionVPToValidated) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetPermissionVPToValidated) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgSetPermissionVPToValidated) GetEffectiveUntil() *time.Time {
	if m != nil {
		return m.EffectiveUntil
	}
	return nil
}

func (m *MsgSetPermissionVPToValidated) GetValidationFees() uint64 {
	if m != nil {
		return m.ValidationFees
	}
	return 0
}

func (m *MsgSetPermissionVPToValidated) GetIssuanceFees() uint64 {
	if m != nil {
		return m.IssuanceFees
	}
	return 0
}

func (m *MsgSetPermissionVPToValidated) GetVerificationFees() uint64 {
	if m != nil {
		return m.VerificationFees
	}
	return 0
}

func (m *MsgSetPermissionVPToValidated) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *MsgSetPermissionVPToValidated) GetVpSummaryDigestSri() string {
	if m != nil {
		return m.VpSummaryDigestSri
	}
	return ""
}

// MsgSetPermissionVPToValidatedResponse defines the Msg/SetPermissionVPToValidated response type
type MsgSetPermissionVPToValidatedResponse struct {
}

func (m *MsgSetPermissionVPToValidatedResponse) Reset()         { *m = MsgSetPermissionVPToValidatedResponse{} }
func (m *MsgSetPermissionVPToValidatedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetPermissionVPToValidatedResponse) ProtoMessage()    {}
func (*MsgSetPermissionVPToValidatedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9be78fdf8430a9d2, []int{7}
}
func (m *MsgSetPermissionVPToValidatedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPermissionVPToValidatedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPermissionVPToValidatedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPermissionVPToValidatedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPermissionVPToValidatedResponse.Merge(m, src)
}
func (m *MsgSetPermissionVPToValidatedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPermissionVPToValidatedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPermissionVPToValidatedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPermissionVPToValidatedResponse proto.InternalMessageInfo

// MsgRequestPermissionVPTermination represents a message to request termination of a permission validation process
type MsgRequestPermissionVPTermination struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgRequestPermissionVPTermination) Reset()         { *m = MsgRequestPermissionVPTermination{} }
func (m *MsgRequestPermissionVPTermination) String() string { return proto.CompactTextString(m) }
func (*MsgRequestPermissionVPTermination) ProtoMessage()    {}
func (*MsgRequestPermissionVPTermination) Descriptor() ([]byte, []int) {
	return fileDescriptor_9be78fdf8430a9d2, []int{8}
}
func (m *MsgRequestPermissionVPTermination) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestPermissionVPTermination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestPermissionVPTermination.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestPermissionVPTermination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestPermissionVPTermination.Merge(m, src)
}
func (m *MsgRequestPermissionVPTermination) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestPermissionVPTermination) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestPermissionVPTermination.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestPermissionVPTermination proto.InternalMessageInfo

func (m *MsgRequestPermissionVPTermination) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRequestPermissionVPTermination) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// MsgRequestPermissionVPTerminationResponse defines the Msg/RequestPermissionVPTermination response type
type MsgRequestPermissionVPTerminationResponse struct {
}

func (m *MsgRequestPermissionVPTerminationResponse) Reset() {
	*m = MsgRequestPermissionVPTerminationResponse{}
}
func (m *MsgRequestPermissionVPTerminationResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgRequestPermissionVPTerminationResponse) ProtoMessage() {}
func (*MsgRequestPermissionVPTerminationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9be78fdf8430a9d2, []int{9}
}
func (m *MsgRequestPermissionVPTerminationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestPermissionVPTerminationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestPermissionVPTerminationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestPermissionVPTerminationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestPermissionVPTerminationResponse.Merge(m, src)
}
func (m *MsgRequestPermissionVPTerminationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestPermissionVPTerminationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestPermissionVPTerminationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestPermissionVPTerminationResponse proto.InternalMessageInfo

type MsgConfirmPermissionVPTermination struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgConfirmPermissionVPTermination) Reset()         { *m = MsgConfirmPermissionVPTermination{} }
func (m *MsgConfirmPermissionVPTermination) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmPermissionVPTermination) ProtoMessage()    {}
func (*MsgConfirmPermissionVPTermination) Descriptor() ([]byte, []int) {
	return fileDescriptor_9be78fdf8430a9d2, []int{10}
}
func (m *MsgConfirmPermissionVPTermination) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmPermissionVPTermination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmPermissionVPTermination.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmPermissionVPTermination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmPermissionVPTermination.Merge(m, src)
}
func (m *MsgConfirmPermissionVPTermination) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmPermissionVPTermination) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmPermissionVPTermination.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmPermissionVPTermination proto.InternalMessageInfo

func (m *MsgConfirmPermissionVPTermination) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgConfirmPermissionVPTermination) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgConfirmPermissionVPTerminationResponse struct {
}

func (m *MsgConfirmPermissionVPTerminationResponse) Reset() {
	*m = MsgConfirmPermissionVPTerminationResponse{}
}
func (m *MsgConfirmPermissionVPTerminationResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgConfirmPermissionVPTerminationResponse) ProtoMessage() {}
func (*MsgConfirmPermissionVPTerminationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9be78fdf8430a9d2, []int{11}
}
func (m *MsgConfirmPermissionVPTerminationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmPermissionVPTerminationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmPermissionVPTerminationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmPermissionVPTerminationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmPermissionVPTerminationResponse.Merge(m, src)
}
func (m *MsgConfirmPermissionVPTerminationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmPermissionVPTerminationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmPermissionVPTerminationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmPermissionVPTerminationResponse proto.InternalMessageInfo

type MsgCancelPermissionVPLastRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCancelPermissionVPLastRequest) Reset()         { *m = MsgCancelPermissionVPLastRequest{} }
func (m *MsgCancelPermissionVPLastRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCancelPermissionVPLastRequest) ProtoMessage()    {}
func (*MsgCancelPermissionVPLastRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9be78fdf8430a9d2, []int{12}
}
func (m *MsgCancelPermissionVPLastRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelPermissionVPLastRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelPermissionVPLastRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelPermissionVPLastRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelPermissionVPLastRequest.Merge(m, src)
}
func (m *MsgCancelPermissionVPLastRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelPermissionVPLastRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelPermissionVPLastRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelPermissionVPLastRequest proto.InternalMessageInfo

func (m *MsgCancelPermissionVPLastRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCancelPermissionVPLastRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgCancelPermissionVPLastRequestResponse struct {
}

func (m *MsgCancelPermissionVPLastRequestResponse) Reset() {
	*m = MsgCancelPermissionVPLastRequestResponse{}
}
func (m *MsgCancelPermissionVPLastRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelPermissionVPLastRequestResponse) ProtoMessage()    {}
func (*MsgCancelPermissionVPLastRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9be78fdf8430a9d2, []int{13}
}
func (m *MsgCancelPermissionVPLastRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelPermissionVPLastRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelPermissionVPLastRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelPermissionVPLastRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelPermissionVPLastRequestResponse.Merge(m, src)
}
func (m *MsgCancelPermissionVPLastRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelPermissionVPLastRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelPermissionVPLastRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelPermissionVPLastRequestResponse proto.InternalMessageInfo

type MsgCreateRootPermission struct {
	Creator          string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SchemaId         uint64     `protobuf:"varint,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Did              string     `protobuf:"bytes,3,opt,name=did,proto3" json:"did,omitempty"`
	Country          string     `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	EffectiveFrom    *time.Time `protobuf:"bytes,5,opt,name=effective_from,json=effectiveFrom,proto3,stdtime" json:"effective_from,omitempty"`
	EffectiveUntil   *time.Time `protobuf:"bytes,6,opt,name=effective_until,json=effectiveUntil,proto3,stdtime" json:"effective_until,omitempty"`
	ValidationFees   uint64     `protobuf:"varint,7,opt,name=validation_fees,json=validationFees,proto3" json:"validation_fees,omitempty"`
	IssuanceFees     uint64     `protobuf:"varint,8,opt,name=issuance_fees,json=issuanceFees,proto3" json:"issuance_fees,omitempty"`
	VerificationFees uint64     `protobuf:"varint,9,opt,name=verification_fees,json=verificationFees,proto3" json:"verification_fees,omitempty"`
}

func (m *MsgCreateRootPermission) Reset()         { *m = MsgCreateRootPermission{} }
func (m *MsgCreateRootPermission) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRootPermission) ProtoMessage()    {}
func (*MsgCreateRootPermission) Descriptor() ([]byte, []int) {
	return fileDescriptor_9be78fdf8430a9d2, []int{14}
}
func (m *MsgCreateRootPermission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRootPermission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRootPermission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRootPermission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRootPermission.Merge(m, src)
}
func (m *MsgCreateRootPermission) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRootPermission) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRootPermission.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRootPermission proto.InternalMessageInfo

func (m *MsgCreateRootPermission) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateRootPermission) GetSchemaId() uint64 {
	if m != nil {
		return m.SchemaId
	}
	return 0
}

func (m *MsgCreateRootPermission) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *MsgCreateRootPermission) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *MsgCreateRootPermission) GetEffectiveFrom() *time.Time {
	if m != nil {
		return m.EffectiveFrom
	}
	return nil
}

func (m *MsgCreateRootPermission) GetEffectiveUntil() *time.Time {
	if m != nil {
		return m.EffectiveUntil
	}
	return nil
}

func (m *MsgCreateRootPermission) GetValidationFees() uint64 {
	if m != nil {
		return m.ValidationFees
	}
	return 0
}

func (m *MsgCreateRootPermission) GetIssuanceFees() uint64 {
	if m != nil {
		return m.IssuanceFees
	}
	return 0
}

func (m *MsgCreateRootPermission) GetVerificationFees() uint64 {
	if m != nil {
		return m.VerificationFees
	}
	return 0
}

type MsgCreateRootPermissionResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateRootPermissionResponse) Reset()         { *m = MsgCreateRootPermissionResponse{} }
func (m *MsgCreateRootPermissionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRootPermissionResponse) ProtoMessage()    {}
func (*MsgCreateRootPermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9be78fdf8430a9d2, []int{15}
}
func (m *MsgCreateRootPermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRootPermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRootPermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRootPermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRootPermissionResponse.Merge(m, src)
}
func (m *MsgCreateRootPermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRootPermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRootPermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRootPermissionResponse proto.InternalMessageInfo

func (m *MsgCreateRootPermissionResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "veranablockchain.permission.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "veranablockchain.permission.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgStartPermissionVP)(nil), "veranablockchain.permission.MsgStartPermissionVP")
	proto.RegisterType((*MsgStartPermissionVPResponse)(nil), "veranablockchain.permission.MsgStartPermissionVPResponse")
	proto.RegisterType((*MsgRenewPermissionVP)(nil), "veranablockchain.permission.MsgRenewPermissionVP")
	proto.RegisterType((*MsgRenewPermissionVPResponse)(nil), "veranablockchain.permission.MsgRenewPermissionVPResponse")
	proto.RegisterType((*MsgSetPermissionVPToValidated)(nil), "veranablockchain.permission.MsgSetPermissionVPToValidated")
	proto.RegisterType((*MsgSetPermissionVPToValidatedResponse)(nil), "veranablockchain.permission.MsgSetPermissionVPToValidatedResponse")
	proto.RegisterType((*MsgRequestPermissionVPTermination)(nil), "veranablockchain.permission.MsgRequestPermissionVPTermination")
	proto.RegisterType((*MsgRequestPermissionVPTerminationResponse)(nil), "veranablockchain.permission.MsgRequestPermissionVPTerminationResponse")
	proto.RegisterType((*MsgConfirmPermissionVPTermination)(nil), "veranablockchain.permission.MsgConfirmPermissionVPTermination")
	proto.RegisterType((*MsgConfirmPermissionVPTerminationResponse)(nil), "veranablockchain.permission.MsgConfirmPermissionVPTerminationResponse")
	proto.RegisterType((*MsgCancelPermissionVPLastRequest)(nil), "veranablockchain.permission.MsgCancelPermissionVPLastRequest")
	proto.RegisterType((*MsgCancelPermissionVPLastRequestResponse)(nil), "veranablockchain.permission.MsgCancelPermissionVPLastRequestResponse")
	proto.RegisterType((*MsgCreateRootPermission)(nil), "veranablockchain.permission.MsgCreateRootPermission")
	proto.RegisterType((*MsgCreateRootPermissionResponse)(nil), "veranablockchain.permission.MsgCreateRootPermissionResponse")
}

func init() {
	proto.RegisterFile("veranablockchain/permission/tx.proto", fileDescriptor_9be78fdf8430a9d2)
}

var fileDescriptor_9be78fdf8430a9d2 = []byte{
	// 1005 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xc4, 0xce, 0x87, 0xa7, 0xf9, 0x68, 0x56, 0x81, 0xba, 0x5b, 0x6a, 0x07, 0x17, 0x14,
	0xe3, 0x12, 0x5b, 0x09, 0x08, 0x89, 0xf0, 0x21, 0x70, 0x20, 0x52, 0x04, 0x91, 0xa2, 0x4d, 0xd3,
	0x03, 0x97, 0xd5, 0x78, 0x77, 0xbc, 0x1e, 0xe1, 0xdd, 0x59, 0x66, 0x66, 0x4d, 0x73, 0x03, 0x4e,
	0xa8, 0xa7, 0xfe, 0x01, 0x5c, 0x91, 0x7a, 0x8c, 0x10, 0x37, 0xfe, 0x81, 0x88, 0x53, 0x05, 0x17,
	0x4e, 0x05, 0x25, 0x87, 0xfc, 0x1b, 0x68, 0x66, 0xbd, 0xeb, 0xcf, 0xec, 0xa6, 0x49, 0xd3, 0x4b,
	0x32, 0xfb, 0xe6, 0xf7, 0xdb, 0xf7, 0x7b, 0xef, 0xcd, 0xbc, 0xe7, 0x85, 0x6f, 0x75, 0x30, 0x43,
	0x1e, 0x6a, 0xb4, 0xa9, 0xf5, 0xad, 0xd5, 0x42, 0xc4, 0xab, 0xf9, 0x98, 0xb9, 0x84, 0x73, 0x42,
	0xbd, 0x9a, 0x78, 0x54, 0xf5, 0x19, 0x15, 0x54, 0xbb, 0x33, 0x8c, 0xaa, 0xf6, 0x50, 0xfa, 0x12,
	0x72, 0x89, 0x47, 0x6b, 0xea, 0x6f, 0x88, 0xd7, 0x6f, 0x59, 0x94, 0xbb, 0x94, 0xd7, 0x5c, 0xee,
	0xd4, 0x3a, 0xeb, 0xf2, 0x5f, 0x77, 0xe3, 0x76, 0xb8, 0x61, 0xaa, 0xa7, 0x5a, 0xf8, 0xd0, 0xdd,
	0x5a, 0x76, 0xa8, 0x43, 0x43, 0xbb, 0x5c, 0x75, 0xad, 0xe5, 0x24, 0x7d, 0x3e, 0x62, 0xc8, 0x8d,
	0xf8, 0xab, 0x89, 0x91, 0x1c, 0xfa, 0x38, 0x02, 0x16, 0x1d, 0x4a, 0x9d, 0x36, 0xae, 0xa9, 0xa7,
	0x46, 0xd0, 0xac, 0x09, 0xe2, 0x62, 0x2e, 0x90, 0xeb, 0x87, 0x80, 0xd2, 0xdf, 0x00, 0x2e, 0xee,
	0x72, 0xe7, 0xc0, 0xb7, 0x91, 0xc0, 0x7b, 0xca, 0x87, 0xf6, 0x01, 0xcc, 0xa1, 0x40, 0xb4, 0x28,
	0x23, 0xe2, 0x30, 0x0f, 0x56, 0x40, 0x39, 0x57, 0xcf, 0xff, 0xf5, 0xfb, 0xda, 0x72, 0x37, 0x84,
	0xcf, 0x6d, 0x9b, 0x61, 0xce, 0xf7, 0x05, 0x23, 0x9e, 0x63, 0xf4, 0xa0, 0xda, 0x36, 0x9c, 0x0e,
	0x55, 0xe6, 0x27, 0x57, 0x40, 0xf9, 0xc6, 0xc6, 0xbd, 0x6a, 0x42, 0x2a, 0xab, 0xa1, 0xb3, 0x7a,
	0xee, 0xf8, 0x79, 0x71, 0xe2, 0xe9, 0xd9, 0x51, 0x05, 0x18, 0x5d, 0xf6, 0xe6, 0x67, 0x3f, 0x9d,
	0x1d, 0x55, 0x7a, 0xef, 0x7d, 0x7c, 0x76, 0x54, 0x59, 0x1b, 0x09, 0xf8, 0x51, 0x7f, 0xc8, 0x43,
	0x11, 0x94, 0x6e, 0xc3, 0x5b, 0x43, 0x26, 0x03, 0x73, 0x9f, 0x7a, 0x1c, 0x97, 0xfe, 0x04, 0x70,
	0x79, 0x97, 0x3b, 0xfb, 0x02, 0x31, 0xb1, 0x17, 0xbf, 0xe1, 0xe1, 0x9e, 0xb6, 0x01, 0x67, 0x2c,
	0x86, 0x91, 0xa0, 0x2c, 0x35, 0xe6, 0x08, 0xa8, 0x69, 0x30, 0x2b, 0xb3, 0xad, 0xe2, 0x9d, 0x37,
	0xd4, 0x5a, 0xab, 0xc0, 0xa5, 0x0e, 0x6a, 0x13, 0x5b, 0x02, 0x4c, 0xa9, 0xd1, 0x24, 0x76, 0x3e,
	0xb3, 0x02, 0xca, 0x59, 0x63, 0x31, 0xde, 0x90, 0x9e, 0x77, 0x6c, 0x2d, 0x0f, 0x67, 0x2c, 0x1a,
	0x78, 0x82, 0x1d, 0xe6, 0xb3, 0xd2, 0xa7, 0x11, 0x3d, 0x6a, 0xaf, 0xc3, 0x8c, 0x4d, 0xec, 0xfc,
	0x94, 0x52, 0x92, 0x3d, 0x7e, 0x5e, 0x04, 0x86, 0x34, 0x6c, 0xce, 0xc9, 0xdc, 0x44, 0xfe, 0x4b,
	0x5b, 0xf0, 0x8d, 0x71, 0xb1, 0x44, 0xc1, 0x6a, 0xf7, 0xe0, 0x7c, 0x2f, 0x4b, 0x52, 0x07, 0x50,
	0x3a, 0xe6, 0x7a, 0xc6, 0x1d, 0xbb, 0xd4, 0x52, 0x09, 0x31, 0xb0, 0x87, 0xbf, 0xbf, 0x72, 0x42,
	0x16, 0xe0, 0x24, 0xb1, 0x55, 0x3a, 0xb2, 0xc6, 0xe4, 0x88, 0xdc, 0x82, 0x92, 0x3b, 0xe2, 0x29,
	0xae, 0xcd, 0xcf, 0x19, 0x78, 0x57, 0xc6, 0x83, 0x07, 0xa2, 0x79, 0x40, 0x1f, 0x86, 0x69, 0xc3,
	0xf6, 0xcb, 0xd0, 0xa4, 0xed, 0xc2, 0x45, 0xdc, 0x6c, 0x62, 0x4b, 0x90, 0x0e, 0x36, 0x03, 0x4f,
	0x90, 0xb6, 0x2a, 0xcf, 0x8d, 0x0d, 0xbd, 0x1a, 0xde, 0x96, 0x6a, 0x74, 0x5b, 0xaa, 0x0f, 0xa2,
	0xdb, 0x52, 0x9f, 0x95, 0x25, 0x78, 0xf2, 0x6f, 0x11, 0x18, 0x0b, 0x31, 0xf9, 0x40, 0x72, 0xb5,
	0x55, 0x18, 0x95, 0x55, 0xe6, 0xb8, 0x89, 0x31, 0x57, 0xb5, 0xcc, 0x1a, 0x0b, 0x3d, 0xf3, 0x36,
	0xc6, 0x5c, 0x16, 0x83, 0x70, 0x1e, 0x20, 0xcf, 0xc2, 0x21, 0x6c, 0x2a, 0x2c, 0x46, 0x64, 0x54,
	0xa0, 0xfb, 0x70, 0xa9, 0x83, 0x19, 0x69, 0x12, 0xab, 0xef, 0x7d, 0xd3, 0x0a, 0x78, 0xb3, 0x7f,
	0x43, 0x81, 0xfb, 0x8e, 0xcf, 0xcc, 0xe0, 0xf1, 0x59, 0x87, 0xaf, 0x75, 0x7c, 0x93, 0x07, 0xae,
	0x8b, 0xd8, 0xa1, 0x69, 0x13, 0x07, 0x73, 0x61, 0x72, 0x46, 0xf2, 0xb3, 0x0a, 0xa7, 0x75, 0xfc,
	0xfd, 0x70, 0xef, 0x0b, 0xb5, 0xb5, 0xcf, 0xc8, 0x50, 0xa9, 0x56, 0xe1, 0xdb, 0x89, 0x95, 0x88,
	0x6b, 0x16, 0xc0, 0x37, 0x55, 0x4d, 0xbf, 0x0b, 0x30, 0x1f, 0x04, 0xcb, 0xb5, 0xa7, 0xc4, 0x5e,
	0xc3, 0x51, 0xba, 0x0f, 0xdf, 0x49, 0x75, 0x3b, 0xa4, 0x71, 0x8b, 0x7a, 0x4d, 0xc2, 0xdc, 0x57,
	0xad, 0x31, 0xd9, 0x6d, 0xac, 0x51, 0xc0, 0x15, 0x09, 0x96, 0x07, 0xa1, 0xdd, 0x8f, 0xfd, 0x1a,
	0x71, 0xd1, 0x0d, 0xf3, 0x1a, 0x24, 0x56, 0x60, 0x39, 0xcd, 0x6b, 0xac, 0xf0, 0x8f, 0x8c, 0xea,
	0xaa, 0x5b, 0x92, 0x8a, 0x0d, 0x4a, 0xfb, 0xd2, 0x7e, 0x29, 0x65, 0x77, 0x60, 0x8e, 0x5b, 0x2d,
	0xec, 0x22, 0x33, 0x16, 0x38, 0x1b, 0x1a, 0x76, 0x6c, 0xed, 0x66, 0xd8, 0xff, 0x32, 0xea, 0xb8,
	0xca, 0x65, 0x42, 0xaf, 0xfc, 0x0a, 0xf6, 0xee, 0xa4, 0xd9, 0x64, 0xd4, 0x55, 0x37, 0xeb, 0xa2,
	0xf7, 0x79, 0x3e, 0xe6, 0x6e, 0x33, 0xea, 0x8e, 0xeb, 0x0e, 0xd3, 0x2f, 0xb7, 0x3b, 0xcc, 0x5c,
	0xac, 0x3b, 0xcc, 0x5e, 0xb4, 0x3b, 0xe4, 0xc6, 0x77, 0x87, 0xa1, 0x4a, 0xaf, 0xc3, 0xe2, 0x39,
	0xc5, 0x8b, 0xa7, 0x45, 0x78, 0x54, 0x40, 0x74, 0x54, 0x36, 0x7e, 0xcb, 0xc1, 0xcc, 0x2e, 0x77,
	0x34, 0x06, 0xe7, 0x06, 0x7e, 0x1f, 0xbc, 0x9b, 0x38, 0xd7, 0x87, 0x06, 0xaf, 0xfe, 0xfe, 0x8b,
	0xa0, 0x63, 0x2d, 0x3f, 0x02, 0xb8, 0x34, 0x3a, 0xa3, 0xd7, 0xd3, 0xde, 0x35, 0x42, 0xd1, 0x3f,
	0x7c, 0x61, 0xca, 0x80, 0x86, 0xd1, 0xb1, 0x98, 0xaa, 0x61, 0x84, 0x92, 0xae, 0xe1, 0xdc, 0x91,
	0xa8, 0xfd, 0x02, 0xa0, 0x9e, 0x30, 0x0f, 0x37, 0x53, 0xa3, 0x3b, 0x97, 0xab, 0xd7, 0x2f, 0xcf,
	0x8d, 0xe5, 0x3d, 0x05, 0xb0, 0x90, 0xd2, 0xfb, 0x3f, 0x4d, 0x0f, 0x3e, 0x89, 0xaf, 0x6f, 0x5f,
	0x8d, 0x3f, 0x20, 0x35, 0x65, 0x04, 0xa4, 0x4a, 0x4d, 0xe6, 0xa7, 0x4b, 0xbd, 0xd8, 0x2c, 0xd0,
	0x7e, 0x05, 0xf0, 0x6e, 0xf2, 0x24, 0xf8, 0x24, 0xd5, 0x53, 0x12, 0x5d, 0xff, 0xf2, 0x4a, 0xf4,
	0x58, 0xe7, 0x63, 0x00, 0x97, 0xc7, 0x8e, 0x83, 0xd4, 0x3b, 0x3f, 0x8e, 0xa5, 0x7f, 0x7c, 0x19,
	0x56, 0x24, 0x46, 0x9f, 0xfa, 0x41, 0x7e, 0x44, 0xd4, 0x0f, 0x8e, 0x4f, 0x0a, 0xe0, 0xd9, 0x49,
	0x01, 0xfc, 0x77, 0x52, 0x00, 0x4f, 0x4e, 0x0b, 0x13, 0xcf, 0x4e, 0x0b, 0x13, 0xff, 0x9c, 0x16,
	0x26, 0xbe, 0xf9, 0xc8, 0x21, 0xa2, 0x15, 0x34, 0xaa, 0x16, 0x75, 0x6b, 0xa1, 0xa3, 0xb5, 0x36,
	0x6a, 0xf0, 0x68, 0x7d, 0xde, 0xb7, 0x85, 0xfa, 0x9c, 0x6a, 0x4c, 0xab, 0xae, 0xff, 0xde, 0xff,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xa4, 0x08, 0x9b, 0x44, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	StartPermissionVP(ctx context.Context, in *MsgStartPermissionVP, opts ...grpc.CallOption) (*MsgStartPermissionVPResponse, error)
	RenewPermissionVP(ctx context.Context, in *MsgRenewPermissionVP, opts ...grpc.CallOption) (*MsgRenewPermissionVPResponse, error)
	SetPermissionVPToValidated(ctx context.Context, in *MsgSetPermissionVPToValidated, opts ...grpc.CallOption) (*MsgSetPermissionVPToValidatedResponse, error)
	RequestPermissionVPTermination(ctx context.Context, in *MsgRequestPermissionVPTermination, opts ...grpc.CallOption) (*MsgRequestPermissionVPTerminationResponse, error)
	ConfirmPermissionVPTermination(ctx context.Context, in *MsgConfirmPermissionVPTermination, opts ...grpc.CallOption) (*MsgConfirmPermissionVPTerminationResponse, error)
	CancelPermissionVPLastRequest(ctx context.Context, in *MsgCancelPermissionVPLastRequest, opts ...grpc.CallOption) (*MsgCancelPermissionVPLastRequestResponse, error)
	CreateRootPermission(ctx context.Context, in *MsgCreateRootPermission, opts ...grpc.CallOption) (*MsgCreateRootPermissionResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.permission.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StartPermissionVP(ctx context.Context, in *MsgStartPermissionVP, opts ...grpc.CallOption) (*MsgStartPermissionVPResponse, error) {
	out := new(MsgStartPermissionVPResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.permission.Msg/StartPermissionVP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RenewPermissionVP(ctx context.Context, in *MsgRenewPermissionVP, opts ...grpc.CallOption) (*MsgRenewPermissionVPResponse, error) {
	out := new(MsgRenewPermissionVPResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.permission.Msg/RenewPermissionVP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetPermissionVPToValidated(ctx context.Context, in *MsgSetPermissionVPToValidated, opts ...grpc.CallOption) (*MsgSetPermissionVPToValidatedResponse, error) {
	out := new(MsgSetPermissionVPToValidatedResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.permission.Msg/SetPermissionVPToValidated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestPermissionVPTermination(ctx context.Context, in *MsgRequestPermissionVPTermination, opts ...grpc.CallOption) (*MsgRequestPermissionVPTerminationResponse, error) {
	out := new(MsgRequestPermissionVPTerminationResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.permission.Msg/RequestPermissionVPTermination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConfirmPermissionVPTermination(ctx context.Context, in *MsgConfirmPermissionVPTermination, opts ...grpc.CallOption) (*MsgConfirmPermissionVPTerminationResponse, error) {
	out := new(MsgConfirmPermissionVPTerminationResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.permission.Msg/ConfirmPermissionVPTermination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelPermissionVPLastRequest(ctx context.Context, in *MsgCancelPermissionVPLastRequest, opts ...grpc.CallOption) (*MsgCancelPermissionVPLastRequestResponse, error) {
	out := new(MsgCancelPermissionVPLastRequestResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.permission.Msg/CancelPermissionVPLastRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateRootPermission(ctx context.Context, in *MsgCreateRootPermission, opts ...grpc.CallOption) (*MsgCreateRootPermissionResponse, error) {
	out := new(MsgCreateRootPermissionResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.permission.Msg/CreateRootPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	StartPermissionVP(context.Context, *MsgStartPermissionVP) (*MsgStartPermissionVPResponse, error)
	RenewPermissionVP(context.Context, *MsgRenewPermissionVP) (*MsgRenewPermissionVPResponse, error)
	SetPermissionVPToValidated(context.Context, *MsgSetPermissionVPToValidated) (*MsgSetPermissionVPToValidatedResponse, error)
	RequestPermissionVPTermination(context.Context, *MsgRequestPermissionVPTermination) (*MsgRequestPermissionVPTerminationResponse, error)
	ConfirmPermissionVPTermination(context.Context, *MsgConfirmPermissionVPTermination) (*MsgConfirmPermissionVPTerminationResponse, error)
	CancelPermissionVPLastRequest(context.Context, *MsgCancelPermissionVPLastRequest) (*MsgCancelPermissionVPLastRequestResponse, error)
	CreateRootPermission(context.Context, *MsgCreateRootPermission) (*MsgCreateRootPermissionResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) StartPermissionVP(ctx context.Context, req *MsgStartPermissionVP) (*MsgStartPermissionVPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPermissionVP not implemented")
}
func (*UnimplementedMsgServer) RenewPermissionVP(ctx context.Context, req *MsgRenewPermissionVP) (*MsgRenewPermissionVPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewPermissionVP not implemented")
}
func (*UnimplementedMsgServer) SetPermissionVPToValidated(ctx context.Context, req *MsgSetPermissionVPToValidated) (*MsgSetPermissionVPToValidatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPermissionVPToValidated not implemented")
}
func (*UnimplementedMsgServer) RequestPermissionVPTermination(ctx context.Context, req *MsgRequestPermissionVPTermination) (*MsgRequestPermissionVPTerminationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPermissionVPTermination not implemented")
}
func (*UnimplementedMsgServer) ConfirmPermissionVPTermination(ctx context.Context, req *MsgConfirmPermissionVPTermination) (*MsgConfirmPermissionVPTerminationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmPermissionVPTermination not implemented")
}
func (*UnimplementedMsgServer) CancelPermissionVPLastRequest(ctx context.Context, req *MsgCancelPermissionVPLastRequest) (*MsgCancelPermissionVPLastRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPermissionVPLastRequest not implemented")
}
func (*UnimplementedMsgServer) CreateRootPermission(ctx context.Context, req *MsgCreateRootPermission) (*MsgCreateRootPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRootPermission not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.permission.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StartPermissionVP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartPermissionVP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StartPermissionVP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.permission.Msg/StartPermissionVP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StartPermissionVP(ctx, req.(*MsgStartPermissionVP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RenewPermissionVP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRenewPermissionVP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RenewPermissionVP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.permission.Msg/RenewPermissionVP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RenewPermissionVP(ctx, req.(*MsgRenewPermissionVP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetPermissionVPToValidated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetPermissionVPToValidated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetPermissionVPToValidated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.permission.Msg/SetPermissionVPToValidated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetPermissionVPToValidated(ctx, req.(*MsgSetPermissionVPToValidated))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestPermissionVPTermination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestPermissionVPTermination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestPermissionVPTermination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.permission.Msg/RequestPermissionVPTermination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestPermissionVPTermination(ctx, req.(*MsgRequestPermissionVPTermination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConfirmPermissionVPTermination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmPermissionVPTermination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmPermissionVPTermination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.permission.Msg/ConfirmPermissionVPTermination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmPermissionVPTermination(ctx, req.(*MsgConfirmPermissionVPTermination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelPermissionVPLastRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelPermissionVPLastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelPermissionVPLastRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.permission.Msg/CancelPermissionVPLastRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelPermissionVPLastRequest(ctx, req.(*MsgCancelPermissionVPLastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateRootPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateRootPermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateRootPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.permission.Msg/CreateRootPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateRootPermission(ctx, req.(*MsgCreateRootPermission))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veranablockchain.permission.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "StartPermissionVP",
			Handler:    _Msg_StartPermissionVP_Handler,
		},
		{
			MethodName: "RenewPermissionVP",
			Handler:    _Msg_RenewPermissionVP_Handler,
		},
		{
			MethodName: "SetPermissionVPToValidated",
			Handler:    _Msg_SetPermissionVPToValidated_Handler,
		},
		{
			MethodName: "RequestPermissionVPTermination",
			Handler:    _Msg_RequestPermissionVPTermination_Handler,
		},
		{
			MethodName: "ConfirmPermissionVPTermination",
			Handler:    _Msg_ConfirmPermissionVPTermination_Handler,
		},
		{
			MethodName: "CancelPermissionVPLastRequest",
			Handler:    _Msg_CancelPermissionVPLastRequest_Handler,
		},
		{
			MethodName: "CreateRootPermission",
			Handler:    _Msg_CreateRootPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "veranablockchain/permission/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgStartPermissionVP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartPermissionVP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartPermissionVP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x22
	}
	if m.ValidatorPermId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ValidatorPermId))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartPermissionVPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartPermissionVPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartPermissionVPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PermissionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PermissionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRenewPermissionVP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRenewPermissionVP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRenewPermissionVP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRenewPermissionVPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRenewPermissionVPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRenewPermissionVPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetPermissionVPToValidated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPermissionVPToValidated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPermissionVPToValidated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VpSummaryDigestSri) > 0 {
		i -= len(m.VpSummaryDigestSri)
		copy(dAtA[i:], m.VpSummaryDigestSri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VpSummaryDigestSri)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x3a
	}
	if m.VerificationFees != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VerificationFees))
		i--
		dAtA[i] = 0x30
	}
	if m.IssuanceFees != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.IssuanceFees))
		i--
		dAtA[i] = 0x28
	}
	if m.ValidationFees != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ValidationFees))
		i--
		dAtA[i] = 0x20
	}
	if m.EffectiveUntil != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.EffectiveUntil, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EffectiveUntil):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintTx(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetPermissionVPToValidatedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPermissionVPToValidatedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPermissionVPToValidatedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestPermissionVPTermination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestPermissionVPTermination) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestPermissionVPTermination) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestPermissionVPTerminationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestPermissionVPTerminationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestPermissionVPTerminationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConfirmPermissionVPTermination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmPermissionVPTermination) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmPermissionVPTermination) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfirmPermissionVPTerminationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmPermissionVPTerminationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmPermissionVPTerminationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelPermissionVPLastRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelPermissionVPLastRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelPermissionVPLastRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelPermissionVPLastRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelPermissionVPLastRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelPermissionVPLastRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateRootPermission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRootPermission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRootPermission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VerificationFees != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VerificationFees))
		i--
		dAtA[i] = 0x48
	}
	if m.IssuanceFees != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.IssuanceFees))
		i--
		dAtA[i] = 0x40
	}
	if m.ValidationFees != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ValidationFees))
		i--
		dAtA[i] = 0x38
	}
	if m.EffectiveUntil != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.EffectiveUntil, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EffectiveUntil):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintTx(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x32
	}
	if m.EffectiveFrom != nil {
		n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.EffectiveFrom, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EffectiveFrom):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintTx(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SchemaId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SchemaId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateRootPermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRootPermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRootPermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgStartPermissionVP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTx(uint64(m.Type))
	}
	if m.ValidatorPermId != 0 {
		n += 1 + sovTx(uint64(m.ValidatorPermId))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgStartPermissionVPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PermissionId != 0 {
		n += 1 + sovTx(uint64(m.PermissionId))
	}
	return n
}

func (m *MsgRenewPermissionVP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgRenewPermissionVPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetPermissionVPToValidated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	if m.EffectiveUntil != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EffectiveUntil)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ValidationFees != 0 {
		n += 1 + sovTx(uint64(m.ValidationFees))
	}
	if m.IssuanceFees != 0 {
		n += 1 + sovTx(uint64(m.IssuanceFees))
	}
	if m.VerificationFees != 0 {
		n += 1 + sovTx(uint64(m.VerificationFees))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VpSummaryDigestSri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetPermissionVPToValidatedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestPermissionVPTermination) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgRequestPermissionVPTerminationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConfirmPermissionVPTermination) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgConfirmPermissionVPTerminationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelPermissionVPLastRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgCancelPermissionVPLastRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateRootPermission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SchemaId != 0 {
		n += 1 + sovTx(uint64(m.SchemaId))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EffectiveFrom != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EffectiveFrom)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EffectiveUntil != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EffectiveUntil)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ValidationFees != 0 {
		n += 1 + sovTx(uint64(m.ValidationFees))
	}
	if m.IssuanceFees != 0 {
		n += 1 + sovTx(uint64(m.IssuanceFees))
	}
	if m.VerificationFees != 0 {
		n += 1 + sovTx(uint64(m.VerificationFees))
	}
	return n
}

func (m *MsgCreateRootPermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartPermissionVP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartPermissionVP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartPermissionVP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPermId", wireType)
			}
			m.ValidatorPermId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorPermId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartPermissionVPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartPermissionVPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartPermissionVPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionId", wireType)
			}
			m.PermissionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PermissionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRenewPermissionVP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRenewPermissionVP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRenewPermissionVP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRenewPermissionVPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRenewPermissionVPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRenewPermissionVPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPermissionVPToValidated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPermissionVPToValidated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPermissionVPToValidated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveUntil == nil {
				m.EffectiveUntil = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.EffectiveUntil, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationFees", wireType)
			}
			m.ValidationFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidationFees |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuanceFees", wireType)
			}
			m.IssuanceFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuanceFees |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationFees", wireType)
			}
			m.VerificationFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerificationFees |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpSummaryDigestSri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpSummaryDigestSri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPermissionVPToValidatedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPermissionVPToValidatedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPermissionVPToValidatedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestPermissionVPTermination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestPermissionVPTermination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestPermissionVPTermination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestPermissionVPTerminationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestPermissionVPTerminationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestPermissionVPTerminationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmPermissionVPTermination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmPermissionVPTermination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmPermissionVPTermination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmPermissionVPTerminationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmPermissionVPTerminationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmPermissionVPTerminationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelPermissionVPLastRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelPermissionVPLastRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelPermissionVPLastRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelPermissionVPLastRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelPermissionVPLastRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelPermissionVPLastRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateRootPermission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRootPermission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRootPermission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaId", wireType)
			}
			m.SchemaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveFrom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveFrom == nil {
				m.EffectiveFrom = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.EffectiveFrom, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveUntil == nil {
				m.EffectiveUntil = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.EffectiveUntil, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationFees", wireType)
			}
			m.ValidationFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidationFees |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuanceFees", wireType)
			}
			m.IssuanceFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuanceFees |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationFees", wireType)
			}
			m.VerificationFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerificationFees |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateRootPermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRootPermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRootPermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
