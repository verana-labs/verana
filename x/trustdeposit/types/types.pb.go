// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: verana/td/v1/types.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TrustDeposit represents an account's trust deposit
type TrustDeposit struct {
	Account   string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Share     uint64 `protobuf:"varint,2,opt,name=share,proto3" json:"share,omitempty"`
	Amount    uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Claimable uint64 `protobuf:"varint,4,opt,name=claimable,proto3" json:"claimable,omitempty"`
	// NEW v2 fields: Slashing related
	SlashedDeposit uint64     `protobuf:"varint,5,opt,name=slashed_deposit,json=slashedDeposit,proto3" json:"slashed_deposit,omitempty"`
	RepaidDeposit  uint64     `protobuf:"varint,6,opt,name=repaid_deposit,json=repaidDeposit,proto3" json:"repaid_deposit,omitempty"`
	LastSlashed    *time.Time `protobuf:"bytes,7,opt,name=last_slashed,json=lastSlashed,proto3,stdtime" json:"last_slashed,omitempty"`
	LastRepaid     *time.Time `protobuf:"bytes,8,opt,name=last_repaid,json=lastRepaid,proto3,stdtime" json:"last_repaid,omitempty"`
	SlashCount     uint64     `protobuf:"varint,9,opt,name=slash_count,json=slashCount,proto3" json:"slash_count,omitempty"`
	LastRepaidBy   string     `protobuf:"bytes,10,opt,name=last_repaid_by,json=lastRepaidBy,proto3" json:"last_repaid_by,omitempty"`
}

func (m *TrustDeposit) Reset()         { *m = TrustDeposit{} }
func (m *TrustDeposit) String() string { return proto.CompactTextString(m) }
func (*TrustDeposit) ProtoMessage()    {}
func (*TrustDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffd0c7b737037a10, []int{0}
}
func (m *TrustDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrustDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrustDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrustDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrustDeposit.Merge(m, src)
}
func (m *TrustDeposit) XXX_Size() int {
	return m.Size()
}
func (m *TrustDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_TrustDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_TrustDeposit proto.InternalMessageInfo

func (m *TrustDeposit) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *TrustDeposit) GetShare() uint64 {
	if m != nil {
		return m.Share
	}
	return 0
}

func (m *TrustDeposit) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TrustDeposit) GetClaimable() uint64 {
	if m != nil {
		return m.Claimable
	}
	return 0
}

func (m *TrustDeposit) GetSlashedDeposit() uint64 {
	if m != nil {
		return m.SlashedDeposit
	}
	return 0
}

func (m *TrustDeposit) GetRepaidDeposit() uint64 {
	if m != nil {
		return m.RepaidDeposit
	}
	return 0
}

func (m *TrustDeposit) GetLastSlashed() *time.Time {
	if m != nil {
		return m.LastSlashed
	}
	return nil
}

func (m *TrustDeposit) GetLastRepaid() *time.Time {
	if m != nil {
		return m.LastRepaid
	}
	return nil
}

func (m *TrustDeposit) GetSlashCount() uint64 {
	if m != nil {
		return m.SlashCount
	}
	return 0
}

func (m *TrustDeposit) GetLastRepaidBy() string {
	if m != nil {
		return m.LastRepaidBy
	}
	return ""
}

type SlashTrustDepositProposal struct {
	Title       string                `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Description string                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	Account     string                `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty" yaml:"account"`
	Amount      cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount" yaml:"amount"`
}

func (m *SlashTrustDepositProposal) Reset()         { *m = SlashTrustDepositProposal{} }
func (m *SlashTrustDepositProposal) String() string { return proto.CompactTextString(m) }
func (*SlashTrustDepositProposal) ProtoMessage()    {}
func (*SlashTrustDepositProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffd0c7b737037a10, []int{1}
}
func (m *SlashTrustDepositProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlashTrustDepositProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlashTrustDepositProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlashTrustDepositProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlashTrustDepositProposal.Merge(m, src)
}
func (m *SlashTrustDepositProposal) XXX_Size() int {
	return m.Size()
}
func (m *SlashTrustDepositProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_SlashTrustDepositProposal.DiscardUnknown(m)
}

var xxx_messageInfo_SlashTrustDepositProposal proto.InternalMessageInfo

func (m *SlashTrustDepositProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SlashTrustDepositProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SlashTrustDepositProposal) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func init() {
	proto.RegisterType((*TrustDeposit)(nil), "verana.td.v1.TrustDeposit")
	proto.RegisterType((*SlashTrustDepositProposal)(nil), "verana.td.v1.SlashTrustDepositProposal")
}

func init() { proto.RegisterFile("verana/td/v1/types.proto", fileDescriptor_ffd0c7b737037a10) }

var fileDescriptor_ffd0c7b737037a10 = []byte{
	// 566 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcf, 0x6e, 0xd3, 0x30,
	0x18, 0x6f, 0x58, 0xd7, 0x51, 0xb7, 0x2b, 0x60, 0x95, 0x91, 0x55, 0x28, 0xa9, 0x22, 0x01, 0x3d,
	0xb0, 0x58, 0x1b, 0x17, 0x84, 0x04, 0xd2, 0x3a, 0x84, 0xc4, 0x0d, 0x65, 0x93, 0x90, 0xb8, 0x44,
	0x4e, 0x62, 0x52, 0x6b, 0x71, 0x1c, 0xc5, 0x6e, 0x45, 0xdf, 0x62, 0x0f, 0xc3, 0x3b, 0xb0, 0xe3,
	0xc4, 0x09, 0x71, 0x08, 0xa8, 0x7d, 0x83, 0xf2, 0x02, 0xa8, 0xb6, 0x43, 0xcb, 0x09, 0x2e, 0x95,
	0xbf, 0xdf, 0xbf, 0x7e, 0xfd, 0xbe, 0xaf, 0xc0, 0x9e, 0x91, 0x12, 0xe7, 0x18, 0xc9, 0x04, 0xcd,
	0x8e, 0x91, 0x9c, 0x17, 0x44, 0xf8, 0x45, 0xc9, 0x25, 0x87, 0x5d, 0xcd, 0xf8, 0x32, 0xf1, 0x67,
	0xc7, 0x83, 0x7b, 0x98, 0xd1, 0x9c, 0x23, 0xf5, 0xa9, 0x05, 0x83, 0x07, 0x31, 0x17, 0x8c, 0x0b,
	0xc4, 0x44, 0xba, 0xf6, 0x32, 0x91, 0x1a, 0xe2, 0x50, 0x13, 0xa1, 0xaa, 0x90, 0x2e, 0x0c, 0xd5,
	0x4f, 0x79, 0xca, 0x35, 0xbe, 0x7e, 0x19, 0xd4, 0x4d, 0x39, 0x4f, 0x33, 0x82, 0x54, 0x15, 0x4d,
	0x3f, 0x22, 0x49, 0x19, 0x11, 0x12, 0xb3, 0xa2, 0x4e, 0xfc, 0xab, 0xcb, 0x02, 0x97, 0x98, 0x99,
	0x44, 0xef, 0xcb, 0x0e, 0xe8, 0x5e, 0x94, 0x53, 0x21, 0x5f, 0x93, 0x82, 0x0b, 0x2a, 0xe1, 0x09,
	0xd8, 0xc3, 0x71, 0xcc, 0xa7, 0xb9, 0xb4, 0xad, 0xa1, 0x35, 0x6a, 0x8f, 0xed, 0xaf, 0x9f, 0x8f,
	0xfa, 0xa6, 0x8b, 0xd3, 0x24, 0x29, 0x89, 0x10, 0xe7, 0xb2, 0xa4, 0x79, 0x1a, 0xd4, 0x42, 0xd8,
	0x07, 0xbb, 0x62, 0x82, 0x4b, 0x62, 0xdf, 0x1a, 0x5a, 0xa3, 0x66, 0xa0, 0x0b, 0x78, 0x00, 0x5a,
	0x98, 0xa9, 0xa0, 0x1d, 0x05, 0x9b, 0x0a, 0x3e, 0x04, 0xed, 0x38, 0xc3, 0x94, 0xe1, 0x28, 0x23,
	0x76, 0x53, 0x51, 0x1b, 0x00, 0x3e, 0x01, 0x77, 0x44, 0x86, 0xc5, 0x84, 0x24, 0x61, 0xa2, 0x5b,
	0xb2, 0x77, 0x95, 0xa6, 0x67, 0xe0, 0xba, 0xd1, 0x47, 0xa0, 0x57, 0x92, 0x02, 0xd3, 0x8d, 0xae,
	0xa5, 0x74, 0xfb, 0x1a, 0xad, 0x65, 0x67, 0xa0, 0x9b, 0x61, 0x21, 0x43, 0xe3, 0xb6, 0xf7, 0x86,
	0xd6, 0xa8, 0x73, 0x32, 0xf0, 0xf5, 0xcc, 0xfc, 0x7a, 0x66, 0xfe, 0x45, 0x3d, 0xb3, 0x71, 0xf3,
	0xea, 0x87, 0x6b, 0x05, 0x9d, 0xb5, 0xeb, 0x5c, 0x9b, 0xe0, 0x29, 0x50, 0x65, 0xa8, 0xa3, 0xed,
	0xdb, 0xff, 0x99, 0x01, 0xd6, 0xa6, 0x40, 0x79, 0xa0, 0x0b, 0x3a, 0xaa, 0x85, 0x50, 0xcf, 0xb6,
	0xad, 0x7a, 0x05, 0x0a, 0x3a, 0x53, 0x63, 0x79, 0x05, 0x7a, 0x5b, 0xdf, 0x11, 0x46, 0x73, 0x1b,
	0xfc, 0x63, 0xfe, 0xdd, 0x4d, 0xfc, 0x78, 0xee, 0xfd, 0xb2, 0xc0, 0xa1, 0xea, 0x77, 0x7b, 0x9d,
	0xef, 0x4a, 0x5e, 0x70, 0x81, 0x33, 0xf8, 0x18, 0xec, 0x4a, 0x2a, 0x33, 0x62, 0x96, 0x7a, 0x77,
	0x55, 0xb9, 0xdd, 0x39, 0x66, 0xd9, 0x0b, 0x4f, 0xc1, 0x5e, 0xa0, 0x69, 0xf8, 0x1c, 0x74, 0x12,
	0x22, 0xe2, 0x92, 0x16, 0x92, 0xf2, 0x5c, 0x2d, 0xb4, 0x3d, 0x3e, 0x58, 0x55, 0x2e, 0xd4, 0xea,
	0x2d, 0xd2, 0x0b, 0xb6, 0xa5, 0xf0, 0xe9, 0xe6, 0x70, 0x76, 0x94, 0x0b, 0xae, 0x2a, 0xb7, 0xa7,
	0x5d, 0x86, 0xf0, 0x36, 0x27, 0xf3, 0xe6, 0xcf, 0x71, 0x34, 0x95, 0xd8, 0xbf, 0xae, 0xdc, 0xc6,
	0xf7, 0xca, 0xbd, 0xaf, 0x7f, 0xa9, 0x48, 0x2e, 0x7d, 0xca, 0x11, 0xc3, 0x72, 0xe2, 0xbf, 0xcd,
	0xe5, 0xaa, 0x72, 0xf7, 0x4d, 0x12, 0xd3, 0x41, 0xc6, 0x3d, 0x7e, 0x7f, 0xbd, 0x70, 0xac, 0x9b,
	0x85, 0x63, 0xfd, 0x5c, 0x38, 0xd6, 0xd5, 0xd2, 0x69, 0xdc, 0x2c, 0x9d, 0xc6, 0xb7, 0xa5, 0xd3,
	0xf8, 0xf0, 0x32, 0xa5, 0x72, 0x32, 0x8d, 0xfc, 0x98, 0x33, 0xa4, 0xef, 0xff, 0x28, 0xc3, 0x91,
	0xa8, 0xdf, 0x51, 0xc6, 0xe3, 0xcb, 0x78, 0x82, 0x69, 0x8e, 0x3e, 0x21, 0xb9, 0x1e, 0x99, 0x39,
	0x23, 0xfd, 0x2f, 0x8e, 0x5a, 0x6a, 0xab, 0xcf, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x81, 0xf2,
	0x7c, 0x2f, 0xe2, 0x03, 0x00, 0x00,
}

func (m *TrustDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrustDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrustDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastRepaidBy) > 0 {
		i -= len(m.LastRepaidBy)
		copy(dAtA[i:], m.LastRepaidBy)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LastRepaidBy)))
		i--
		dAtA[i] = 0x52
	}
	if m.SlashCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SlashCount))
		i--
		dAtA[i] = 0x48
	}
	if m.LastRepaid != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.LastRepaid, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastRepaid):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintTypes(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x42
	}
	if m.LastSlashed != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.LastSlashed, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastSlashed):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintTypes(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x3a
	}
	if m.RepaidDeposit != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RepaidDeposit))
		i--
		dAtA[i] = 0x30
	}
	if m.SlashedDeposit != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SlashedDeposit))
		i--
		dAtA[i] = 0x28
	}
	if m.Claimable != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Claimable))
		i--
		dAtA[i] = 0x20
	}
	if m.Amount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.Share != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Share))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SlashTrustDepositProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlashTrustDepositProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlashTrustDepositProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TrustDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Share != 0 {
		n += 1 + sovTypes(uint64(m.Share))
	}
	if m.Amount != 0 {
		n += 1 + sovTypes(uint64(m.Amount))
	}
	if m.Claimable != 0 {
		n += 1 + sovTypes(uint64(m.Claimable))
	}
	if m.SlashedDeposit != 0 {
		n += 1 + sovTypes(uint64(m.SlashedDeposit))
	}
	if m.RepaidDeposit != 0 {
		n += 1 + sovTypes(uint64(m.RepaidDeposit))
	}
	if m.LastSlashed != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastSlashed)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LastRepaid != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastRepaid)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SlashCount != 0 {
		n += 1 + sovTypes(uint64(m.SlashCount))
	}
	l = len(m.LastRepaidBy)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *SlashTrustDepositProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TrustDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrustDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrustDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			m.Share = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Share |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimable", wireType)
			}
			m.Claimable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Claimable |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashedDeposit", wireType)
			}
			m.SlashedDeposit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashedDeposit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepaidDeposit", wireType)
			}
			m.RepaidDeposit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RepaidDeposit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSlashed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSlashed == nil {
				m.LastSlashed = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.LastSlashed, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRepaid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastRepaid == nil {
				m.LastRepaid = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.LastRepaid, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashCount", wireType)
			}
			m.SlashCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRepaidBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastRepaidBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlashTrustDepositProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlashTrustDepositProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlashTrustDepositProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
