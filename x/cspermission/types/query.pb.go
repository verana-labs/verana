// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: veranablockchain/cspermission/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Authorization status enum
type AuthorizationStatus int32

const (
	AuthorizationStatus_AUTHORIZED       AuthorizationStatus = 0
	AuthorizationStatus_FORBIDDEN        AuthorizationStatus = 1
	AuthorizationStatus_SESSION_REQUIRED AuthorizationStatus = 2
)

var AuthorizationStatus_name = map[int32]string{
	0: "AUTHORIZED",
	1: "FORBIDDEN",
	2: "SESSION_REQUIRED",
}

var AuthorizationStatus_value = map[string]int32{
	"AUTHORIZED":       0,
	"FORBIDDEN":        1,
	"SESSION_REQUIRED": 2,
}

func (x AuthorizationStatus) String() string {
	return proto.EnumName(AuthorizationStatus_name, int32(x))
}

func (AuthorizationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_29a73d8333a035c1, []int{0}
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a73d8333a035c1, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a73d8333a035c1, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryListCSPRequest is the request type for Query/ListCSP method.
type QueryListCSPRequest struct {
	SchemaId        uint64                   `protobuf:"varint,1,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Creator         string                   `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Grantee         string                   `protobuf:"bytes,3,opt,name=grantee,proto3" json:"grantee,omitempty"`
	Did             string                   `protobuf:"bytes,4,opt,name=did,proto3" json:"did,omitempty"`
	Type            CredentialSchemaPermType `protobuf:"varint,5,opt,name=type,proto3,enum=veranablockchain.cspermission.CredentialSchemaPermType" json:"type,omitempty"`
	ResponseMaxSize uint32                   `protobuf:"varint,6,opt,name=response_max_size,json=responseMaxSize,proto3" json:"response_max_size,omitempty"`
}

func (m *QueryListCSPRequest) Reset()         { *m = QueryListCSPRequest{} }
func (m *QueryListCSPRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListCSPRequest) ProtoMessage()    {}
func (*QueryListCSPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a73d8333a035c1, []int{2}
}
func (m *QueryListCSPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListCSPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListCSPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListCSPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListCSPRequest.Merge(m, src)
}
func (m *QueryListCSPRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListCSPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListCSPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListCSPRequest proto.InternalMessageInfo

func (m *QueryListCSPRequest) GetSchemaId() uint64 {
	if m != nil {
		return m.SchemaId
	}
	return 0
}

func (m *QueryListCSPRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryListCSPRequest) GetGrantee() string {
	if m != nil {
		return m.Grantee
	}
	return ""
}

func (m *QueryListCSPRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *QueryListCSPRequest) GetType() CredentialSchemaPermType {
	if m != nil {
		return m.Type
	}
	return CredentialSchemaPermType_CREDENTIAL_SCHEMA_PERM_TYPE_UNSPECIFIED
}

func (m *QueryListCSPRequest) GetResponseMaxSize() uint32 {
	if m != nil {
		return m.ResponseMaxSize
	}
	return 0
}

// QueryListCSPResponse is the response type for Query/ListCSP method.
type QueryListCSPResponse struct {
	Permissions []CredentialSchemaPerm `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions"`
}

func (m *QueryListCSPResponse) Reset()         { *m = QueryListCSPResponse{} }
func (m *QueryListCSPResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListCSPResponse) ProtoMessage()    {}
func (*QueryListCSPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a73d8333a035c1, []int{3}
}
func (m *QueryListCSPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListCSPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListCSPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListCSPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListCSPResponse.Merge(m, src)
}
func (m *QueryListCSPResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListCSPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListCSPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListCSPResponse proto.InternalMessageInfo

func (m *QueryListCSPResponse) GetPermissions() []CredentialSchemaPerm {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// QueryGetCSPRequest is request type for Query/GetCSP
type QueryGetCSPRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCSPRequest) Reset()         { *m = QueryGetCSPRequest{} }
func (m *QueryGetCSPRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCSPRequest) ProtoMessage()    {}
func (*QueryGetCSPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a73d8333a035c1, []int{4}
}
func (m *QueryGetCSPRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCSPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCSPRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCSPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCSPRequest.Merge(m, src)
}
func (m *QueryGetCSPRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCSPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCSPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCSPRequest proto.InternalMessageInfo

func (m *QueryGetCSPRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryGetCSPResponse is response type for Query/GetCSP
type QueryGetCSPResponse struct {
	Permission CredentialSchemaPerm `protobuf:"bytes,1,opt,name=permission,proto3" json:"permission"`
}

func (m *QueryGetCSPResponse) Reset()         { *m = QueryGetCSPResponse{} }
func (m *QueryGetCSPResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCSPResponse) ProtoMessage()    {}
func (*QueryGetCSPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a73d8333a035c1, []int{5}
}
func (m *QueryGetCSPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCSPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCSPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCSPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCSPResponse.Merge(m, src)
}
func (m *QueryGetCSPResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCSPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCSPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCSPResponse proto.InternalMessageInfo

func (m *QueryGetCSPResponse) GetPermission() CredentialSchemaPerm {
	if m != nil {
		return m.Permission
	}
	return CredentialSchemaPerm{}
}

// QueryIsAuthorizedIssuerRequest is request type for Query/IsAuthorizedIssuer method
type QueryIsAuthorizedIssuerRequest struct {
	IssuerDid          string     `protobuf:"bytes,1,opt,name=issuer_did,json=issuerDid,proto3" json:"issuer_did,omitempty"`
	UserAgentDid       string     `protobuf:"bytes,2,opt,name=user_agent_did,json=userAgentDid,proto3" json:"user_agent_did,omitempty"`
	WalletUserAgentDid string     `protobuf:"bytes,3,opt,name=wallet_user_agent_did,json=walletUserAgentDid,proto3" json:"wallet_user_agent_did,omitempty"`
	SchemaId           uint64     `protobuf:"varint,4,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Country            string     `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	When               *time.Time `protobuf:"bytes,6,opt,name=when,proto3,stdtime" json:"when,omitempty"`
	SessionId          uint64     `protobuf:"varint,7,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (m *QueryIsAuthorizedIssuerRequest) Reset()         { *m = QueryIsAuthorizedIssuerRequest{} }
func (m *QueryIsAuthorizedIssuerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsAuthorizedIssuerRequest) ProtoMessage()    {}
func (*QueryIsAuthorizedIssuerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a73d8333a035c1, []int{6}
}
func (m *QueryIsAuthorizedIssuerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsAuthorizedIssuerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsAuthorizedIssuerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsAuthorizedIssuerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsAuthorizedIssuerRequest.Merge(m, src)
}
func (m *QueryIsAuthorizedIssuerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsAuthorizedIssuerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsAuthorizedIssuerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsAuthorizedIssuerRequest proto.InternalMessageInfo

func (m *QueryIsAuthorizedIssuerRequest) GetIssuerDid() string {
	if m != nil {
		return m.IssuerDid
	}
	return ""
}

func (m *QueryIsAuthorizedIssuerRequest) GetUserAgentDid() string {
	if m != nil {
		return m.UserAgentDid
	}
	return ""
}

func (m *QueryIsAuthorizedIssuerRequest) GetWalletUserAgentDid() string {
	if m != nil {
		return m.WalletUserAgentDid
	}
	return ""
}

func (m *QueryIsAuthorizedIssuerRequest) GetSchemaId() uint64 {
	if m != nil {
		return m.SchemaId
	}
	return 0
}

func (m *QueryIsAuthorizedIssuerRequest) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *QueryIsAuthorizedIssuerRequest) GetWhen() *time.Time {
	if m != nil {
		return m.When
	}
	return nil
}

func (m *QueryIsAuthorizedIssuerRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

// QueryIsAuthorizedIssuerResponse is response type for Query/IsAuthorizedIssuer method
type QueryIsAuthorizedIssuerResponse struct {
	Status AuthorizationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=veranablockchain.cspermission.AuthorizationStatus" json:"status,omitempty"`
}

func (m *QueryIsAuthorizedIssuerResponse) Reset()         { *m = QueryIsAuthorizedIssuerResponse{} }
func (m *QueryIsAuthorizedIssuerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsAuthorizedIssuerResponse) ProtoMessage()    {}
func (*QueryIsAuthorizedIssuerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a73d8333a035c1, []int{7}
}
func (m *QueryIsAuthorizedIssuerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsAuthorizedIssuerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsAuthorizedIssuerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsAuthorizedIssuerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsAuthorizedIssuerResponse.Merge(m, src)
}
func (m *QueryIsAuthorizedIssuerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsAuthorizedIssuerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsAuthorizedIssuerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsAuthorizedIssuerResponse proto.InternalMessageInfo

func (m *QueryIsAuthorizedIssuerResponse) GetStatus() AuthorizationStatus {
	if m != nil {
		return m.Status
	}
	return AuthorizationStatus_AUTHORIZED
}

type QueryIsAuthorizedVerifierRequest struct {
	VerifierDid        string     `protobuf:"bytes,1,opt,name=verifier_did,json=verifierDid,proto3" json:"verifier_did,omitempty"`
	IssuerDid          string     `protobuf:"bytes,2,opt,name=issuer_did,json=issuerDid,proto3" json:"issuer_did,omitempty"`
	UserAgentDid       string     `protobuf:"bytes,3,opt,name=user_agent_did,json=userAgentDid,proto3" json:"user_agent_did,omitempty"`
	WalletUserAgentDid string     `protobuf:"bytes,4,opt,name=wallet_user_agent_did,json=walletUserAgentDid,proto3" json:"wallet_user_agent_did,omitempty"`
	SchemaId           uint64     `protobuf:"varint,5,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Country            string     `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	When               *time.Time `protobuf:"bytes,7,opt,name=when,proto3,stdtime" json:"when,omitempty"`
	SessionId          uint64     `protobuf:"varint,8,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (m *QueryIsAuthorizedVerifierRequest) Reset()         { *m = QueryIsAuthorizedVerifierRequest{} }
func (m *QueryIsAuthorizedVerifierRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsAuthorizedVerifierRequest) ProtoMessage()    {}
func (*QueryIsAuthorizedVerifierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a73d8333a035c1, []int{8}
}
func (m *QueryIsAuthorizedVerifierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsAuthorizedVerifierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsAuthorizedVerifierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsAuthorizedVerifierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsAuthorizedVerifierRequest.Merge(m, src)
}
func (m *QueryIsAuthorizedVerifierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsAuthorizedVerifierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsAuthorizedVerifierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsAuthorizedVerifierRequest proto.InternalMessageInfo

func (m *QueryIsAuthorizedVerifierRequest) GetVerifierDid() string {
	if m != nil {
		return m.VerifierDid
	}
	return ""
}

func (m *QueryIsAuthorizedVerifierRequest) GetIssuerDid() string {
	if m != nil {
		return m.IssuerDid
	}
	return ""
}

func (m *QueryIsAuthorizedVerifierRequest) GetUserAgentDid() string {
	if m != nil {
		return m.UserAgentDid
	}
	return ""
}

func (m *QueryIsAuthorizedVerifierRequest) GetWalletUserAgentDid() string {
	if m != nil {
		return m.WalletUserAgentDid
	}
	return ""
}

func (m *QueryIsAuthorizedVerifierRequest) GetSchemaId() uint64 {
	if m != nil {
		return m.SchemaId
	}
	return 0
}

func (m *QueryIsAuthorizedVerifierRequest) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *QueryIsAuthorizedVerifierRequest) GetWhen() *time.Time {
	if m != nil {
		return m.When
	}
	return nil
}

func (m *QueryIsAuthorizedVerifierRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

type QueryIsAuthorizedVerifierResponse struct {
	Status AuthorizationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=veranablockchain.cspermission.AuthorizationStatus" json:"status,omitempty"`
}

func (m *QueryIsAuthorizedVerifierResponse) Reset()         { *m = QueryIsAuthorizedVerifierResponse{} }
func (m *QueryIsAuthorizedVerifierResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsAuthorizedVerifierResponse) ProtoMessage()    {}
func (*QueryIsAuthorizedVerifierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a73d8333a035c1, []int{9}
}
func (m *QueryIsAuthorizedVerifierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsAuthorizedVerifierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsAuthorizedVerifierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsAuthorizedVerifierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsAuthorizedVerifierResponse.Merge(m, src)
}
func (m *QueryIsAuthorizedVerifierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsAuthorizedVerifierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsAuthorizedVerifierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsAuthorizedVerifierResponse proto.InternalMessageInfo

func (m *QueryIsAuthorizedVerifierResponse) GetStatus() AuthorizationStatus {
	if m != nil {
		return m.Status
	}
	return AuthorizationStatus_AUTHORIZED
}

type QueryGetCSPSRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCSPSRequest) Reset()         { *m = QueryGetCSPSRequest{} }
func (m *QueryGetCSPSRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCSPSRequest) ProtoMessage()    {}
func (*QueryGetCSPSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a73d8333a035c1, []int{10}
}
func (m *QueryGetCSPSRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCSPSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCSPSRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCSPSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCSPSRequest.Merge(m, src)
}
func (m *QueryGetCSPSRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCSPSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCSPSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCSPSRequest proto.InternalMessageInfo

func (m *QueryGetCSPSRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetCSPSResponse struct {
	Csps *CredentialSchemaPermSession `protobuf:"bytes,1,opt,name=csps,proto3" json:"csps,omitempty"`
}

func (m *QueryGetCSPSResponse) Reset()         { *m = QueryGetCSPSResponse{} }
func (m *QueryGetCSPSResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCSPSResponse) ProtoMessage()    {}
func (*QueryGetCSPSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29a73d8333a035c1, []int{11}
}
func (m *QueryGetCSPSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCSPSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCSPSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCSPSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCSPSResponse.Merge(m, src)
}
func (m *QueryGetCSPSResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCSPSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCSPSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCSPSResponse proto.InternalMessageInfo

func (m *QueryGetCSPSResponse) GetCsps() *CredentialSchemaPermSession {
	if m != nil {
		return m.Csps
	}
	return nil
}

func init() {
	proto.RegisterEnum("veranablockchain.cspermission.AuthorizationStatus", AuthorizationStatus_name, AuthorizationStatus_value)
	proto.RegisterType((*QueryParamsRequest)(nil), "veranablockchain.cspermission.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "veranablockchain.cspermission.QueryParamsResponse")
	proto.RegisterType((*QueryListCSPRequest)(nil), "veranablockchain.cspermission.QueryListCSPRequest")
	proto.RegisterType((*QueryListCSPResponse)(nil), "veranablockchain.cspermission.QueryListCSPResponse")
	proto.RegisterType((*QueryGetCSPRequest)(nil), "veranablockchain.cspermission.QueryGetCSPRequest")
	proto.RegisterType((*QueryGetCSPResponse)(nil), "veranablockchain.cspermission.QueryGetCSPResponse")
	proto.RegisterType((*QueryIsAuthorizedIssuerRequest)(nil), "veranablockchain.cspermission.QueryIsAuthorizedIssuerRequest")
	proto.RegisterType((*QueryIsAuthorizedIssuerResponse)(nil), "veranablockchain.cspermission.QueryIsAuthorizedIssuerResponse")
	proto.RegisterType((*QueryIsAuthorizedVerifierRequest)(nil), "veranablockchain.cspermission.QueryIsAuthorizedVerifierRequest")
	proto.RegisterType((*QueryIsAuthorizedVerifierResponse)(nil), "veranablockchain.cspermission.QueryIsAuthorizedVerifierResponse")
	proto.RegisterType((*QueryGetCSPSRequest)(nil), "veranablockchain.cspermission.QueryGetCSPSRequest")
	proto.RegisterType((*QueryGetCSPSResponse)(nil), "veranablockchain.cspermission.QueryGetCSPSResponse")
}

func init() {
	proto.RegisterFile("veranablockchain/cspermission/query.proto", fileDescriptor_29a73d8333a035c1)
}

var fileDescriptor_29a73d8333a035c1 = []byte{
	// 1112 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0x3a, 0xae, 0x1d, 0xbf, 0xb4, 0x21, 0x9d, 0x9a, 0xca, 0x98, 0xc4, 0x4e, 0x96, 0x44,
	0x84, 0x48, 0xf5, 0x2a, 0x8e, 0x04, 0x08, 0xa9, 0x40, 0xd2, 0x04, 0xea, 0x0a, 0xf2, 0xb1, 0x9b,
	0x80, 0x28, 0x87, 0xd5, 0xd8, 0x3b, 0xd9, 0x8c, 0xf0, 0x7e, 0x74, 0x67, 0x9c, 0x26, 0x41, 0x5c,
	0xb8, 0x02, 0x52, 0x25, 0x2e, 0xfc, 0x09, 0x1c, 0x39, 0xf4, 0x02, 0x47, 0x4e, 0x39, 0x16, 0x7a,
	0xe1, 0x54, 0x50, 0x82, 0xc4, 0xbf, 0x81, 0x76, 0x76, 0x36, 0x59, 0x3b, 0x1f, 0xb6, 0x83, 0xb8,
	0x58, 0xeb, 0xb7, 0xef, 0xe3, 0x37, 0xef, 0xf7, 0xe6, 0xf7, 0x16, 0xde, 0xd8, 0x25, 0x01, 0x76,
	0x71, 0xa3, 0xe5, 0x35, 0xbf, 0x68, 0xee, 0x60, 0xea, 0x6a, 0x4d, 0xe6, 0x93, 0xc0, 0xa1, 0x8c,
	0x51, 0xcf, 0xd5, 0x1e, 0xb5, 0x49, 0xb0, 0x5f, 0xf5, 0x03, 0x8f, 0x7b, 0x68, 0xa2, 0xdb, 0xb5,
	0x9a, 0x74, 0x2d, 0xdd, 0xc4, 0x0e, 0x75, 0x3d, 0x4d, 0xfc, 0x46, 0x11, 0xa5, 0x82, 0xed, 0xd9,
	0x9e, 0x78, 0xd4, 0xc2, 0x27, 0x69, 0x1d, 0xb7, 0x3d, 0xcf, 0x6e, 0x11, 0x0d, 0xfb, 0x54, 0xc3,
	0xae, 0xeb, 0x71, 0xcc, 0xa9, 0xe7, 0x32, 0xf9, 0xb6, 0x22, 0xdf, 0x8a, 0x7f, 0x8d, 0xf6, 0xb6,
	0xc6, 0xa9, 0x43, 0x18, 0xc7, 0x8e, 0x2f, 0x1d, 0xe6, 0x9a, 0x1e, 0x73, 0x3c, 0xa6, 0x35, 0x30,
	0x23, 0x11, 0x3e, 0x6d, 0x77, 0xbe, 0x41, 0x38, 0x9e, 0xd7, 0x7c, 0x6c, 0x53, 0x57, 0x64, 0x93,
	0xbe, 0xaf, 0x44, 0xbe, 0x66, 0x84, 0x21, 0xfa, 0x13, 0xa7, 0xb9, 0xfc, 0xe0, 0x3e, 0x0e, 0xb0,
	0x13, 0xfb, 0xf6, 0x68, 0x12, 0xdf, 0xf7, 0x89, 0x74, 0x55, 0x0b, 0x80, 0x36, 0x42, 0x4c, 0xeb,
	0x22, 0x5e, 0x27, 0x8f, 0xda, 0x84, 0x71, 0xd5, 0x84, 0x5b, 0x1d, 0x56, 0xe6, 0x7b, 0x2e, 0x23,
	0xe8, 0x3e, 0x64, 0xa3, 0x3a, 0x45, 0x65, 0x52, 0x99, 0x1d, 0xa9, 0xcd, 0x54, 0x2f, 0x6d, 0x71,
	0x35, 0x0a, 0x5f, 0xca, 0x1f, 0xbe, 0xa8, 0xa4, 0x7e, 0xfc, 0xe7, 0xa7, 0x39, 0x45, 0x97, 0xf1,
	0xea, 0xcf, 0x69, 0x59, 0xe1, 0x23, 0xca, 0xf8, 0x3d, 0x63, 0x5d, 0x16, 0x46, 0xaf, 0x42, 0x9e,
	0x35, 0x77, 0x88, 0x83, 0x4d, 0x6a, 0x89, 0x22, 0x19, 0x7d, 0x38, 0x32, 0xd4, 0x2d, 0xf4, 0x26,
	0xe4, 0x9a, 0x01, 0xc1, 0xdc, 0x0b, 0x8a, 0xe9, 0x49, 0x65, 0x36, 0xbf, 0x34, 0x7e, 0xf8, 0xa2,
	0xa2, 0xfc, 0xfe, 0xf4, 0x4e, 0x41, 0x76, 0x6a, 0xd1, 0xb2, 0x02, 0xc2, 0x98, 0xc1, 0x03, 0xea,
	0xda, 0x7a, 0xec, 0x1c, 0xc6, 0xd9, 0x01, 0x76, 0x39, 0x21, 0xc5, 0xa1, 0x7e, 0xe2, 0xa4, 0x33,
	0xba, 0x0d, 0x43, 0x16, 0xb5, 0x8a, 0x19, 0x11, 0x93, 0x09, 0x63, 0xf4, 0xd0, 0x80, 0x36, 0x20,
	0x13, 0xb6, 0xb0, 0x78, 0x6d, 0x52, 0x99, 0x1d, 0xad, 0xbd, 0xd5, 0xa3, 0x09, 0xf7, 0x02, 0x62,
	0x11, 0x97, 0x53, 0xdc, 0x32, 0xc4, 0x41, 0xd6, 0x49, 0xe0, 0x6c, 0xee, 0xfb, 0x44, 0x66, 0x14,
	0xa9, 0xd0, 0x1c, 0xdc, 0x0c, 0x64, 0x97, 0x4d, 0x07, 0xef, 0x99, 0x8c, 0x1e, 0x90, 0x62, 0x76,
	0x52, 0x99, 0xbd, 0xa1, 0xbf, 0x14, 0xbf, 0xf8, 0x18, 0xef, 0x19, 0xf4, 0x80, 0xa8, 0x0c, 0x0a,
	0x9d, 0xad, 0x93, 0xec, 0x7c, 0x0e, 0x23, 0xa7, 0x65, 0x43, 0x8a, 0x86, 0x66, 0x47, 0x6a, 0x0b,
	0x57, 0x40, 0x27, 0x90, 0xa5, 0xf4, 0x64, 0x36, 0x75, 0x5a, 0xce, 0xc9, 0x87, 0x24, 0x49, 0xd7,
	0x28, 0xa4, 0x4f, 0x78, 0x4a, 0x53, 0x4b, 0xf5, 0x25, 0xab, 0xb1, 0x97, 0x44, 0xf6, 0x19, 0xc0,
	0x69, 0x2e, 0x39, 0x3b, 0xff, 0x01, 0x58, 0x22, 0x99, 0xfa, 0x34, 0x0d, 0x65, 0x51, 0xb2, 0xce,
	0x16, 0xdb, 0x7c, 0xc7, 0x0b, 0xe8, 0x01, 0xb1, 0xea, 0x8c, 0xb5, 0x49, 0x10, 0x83, 0x9c, 0x00,
	0xa0, 0xc2, 0x60, 0x5a, 0x12, 0x6c, 0x5e, 0xcf, 0x47, 0x96, 0x65, 0x6a, 0xa1, 0x69, 0x18, 0x6d,
	0x33, 0x12, 0x98, 0xd8, 0x26, 0x2e, 0x17, 0x2e, 0x62, 0xb8, 0xf4, 0xeb, 0xa1, 0x75, 0x31, 0x34,
	0x86, 0x5e, 0xf3, 0xf0, 0xf2, 0x63, 0xdc, 0x6a, 0x11, 0x6e, 0x76, 0x39, 0x8b, 0x89, 0xd2, 0x51,
	0xf4, 0x72, 0x2b, 0x19, 0xd2, 0x31, 0xcb, 0x99, 0xae, 0x59, 0x2e, 0x43, 0xae, 0xe9, 0xb5, 0x5d,
	0x1e, 0xec, 0x8b, 0x31, 0x8a, 0xe7, 0x2b, 0x36, 0xa2, 0xb7, 0x21, 0xf3, 0x78, 0x87, 0xb8, 0x62,
	0x06, 0x46, 0x6a, 0xa5, 0x6a, 0xa4, 0x32, 0xd5, 0x58, 0x65, 0xaa, 0x9b, 0xb1, 0xca, 0x2c, 0x0d,
	0x87, 0x81, 0x4f, 0xfe, 0x0c, 0x47, 0x29, 0x8c, 0x40, 0xaf, 0x01, 0x30, 0x22, 0x9a, 0x13, 0xd6,
	0xcd, 0x85, 0x75, 0x65, 0xf2, 0xbc, 0xb4, 0xd7, 0x2d, 0xd5, 0x81, 0xca, 0x85, 0x5d, 0x93, 0xa4,
	0x3d, 0x80, 0x2c, 0xe3, 0x98, 0xb7, 0xa3, 0xcb, 0x3e, 0x5a, 0xab, 0xf5, 0x20, 0x2c, 0x4e, 0x24,
	0xf4, 0xcc, 0x10, 0x91, 0xba, 0xcc, 0xa0, 0x3e, 0x4f, 0xc3, 0xe4, 0x99, 0x7a, 0x9f, 0x90, 0x80,
	0x6e, 0xd3, 0x53, 0x9e, 0xa6, 0xe0, 0xfa, 0xae, 0x34, 0x25, 0x98, 0x1a, 0x89, 0x6d, 0x61, 0x4b,
	0x3b, 0xa9, 0x4c, 0xf7, 0xa6, 0x72, 0x68, 0x10, 0x2a, 0x33, 0xfd, 0x51, 0x79, 0xed, 0x62, 0x2a,
	0xb3, 0x97, 0x51, 0x99, 0x1b, 0x98, 0xca, 0x89, 0x0e, 0x2a, 0x87, 0x45, 0xdd, 0x04, 0x89, 0x1e,
	0x4c, 0x5d, 0xd2, 0xd4, 0xff, 0x81, 0xc6, 0x99, 0x8e, 0xeb, 0x6d, 0x9c, 0x55, 0x81, 0xbc, 0x50,
	0x81, 0x6d, 0x29, 0x50, 0x27, 0x6e, 0x12, 0xca, 0x2a, 0x64, 0x9a, 0xcc, 0x8f, 0x97, 0xc7, 0x3b,
	0x57, 0x10, 0x00, 0x23, 0x3a, 0xbb, 0x2e, 0xf2, 0xcc, 0x3d, 0x80, 0x5b, 0xe7, 0xa0, 0x45, 0xa3,
	0x00, 0x8b, 0x5b, 0x9b, 0xf7, 0xd7, 0xf4, 0xfa, 0xc3, 0x95, 0xe5, 0xb1, 0x14, 0xba, 0x01, 0xf9,
	0x0f, 0xd6, 0xf4, 0xa5, 0xfa, 0xf2, 0xf2, 0xca, 0xea, 0x98, 0x82, 0x0a, 0x30, 0x66, 0xac, 0x18,
	0x46, 0x7d, 0x6d, 0xd5, 0xd4, 0x57, 0x36, 0xb6, 0xea, 0xfa, 0xca, 0xf2, 0x58, 0xba, 0xf6, 0x5b,
	0x0e, 0xae, 0x09, 0xd0, 0xe8, 0x1b, 0x05, 0xb2, 0xd1, 0xe2, 0x42, 0xf3, 0x3d, 0x20, 0x9e, 0xdd,
	0x9c, 0xa5, 0xda, 0x20, 0x21, 0x51, 0x5f, 0xd4, 0xd2, 0xd7, 0xcf, 0xff, 0xfe, 0x3e, 0x5d, 0x40,
	0x48, 0xdb, 0xf5, 0x03, 0x6d, 0x77, 0x3e, 0xdc, 0xd6, 0x72, 0xa1, 0xa3, 0x6f, 0x15, 0xc8, 0x49,
	0xa1, 0x47, 0x7d, 0xe5, 0xee, 0x5c, 0xa8, 0xa5, 0x85, 0x81, 0x62, 0x24, 0xa0, 0xa2, 0x00, 0x84,
	0xd0, 0x58, 0x12, 0x50, 0x8b, 0x32, 0x8e, 0xbe, 0x53, 0x20, 0x1b, 0xd1, 0xda, 0x5f, 0x73, 0x3a,
	0xd6, 0x45, 0x7f, 0xcd, 0xe9, 0xdc, 0x1d, 0xea, 0xb8, 0xc0, 0x72, 0x1b, 0x15, 0x92, 0x58, 0x6c,
	0xc2, 0xb5, 0x2f, 0xa9, 0xf5, 0x15, 0xfa, 0x45, 0x01, 0x74, 0x56, 0xc3, 0xd0, 0xdd, 0x7e, 0x0a,
	0x5d, 0xb8, 0x31, 0x4a, 0xef, 0x5e, 0x35, 0x5c, 0x62, 0x9e, 0x11, 0x98, 0x2b, 0x68, 0x22, 0x89,
	0x19, 0x9f, 0x78, 0x9b, 0x91, 0x62, 0xa1, 0x5f, 0x15, 0x28, 0x9c, 0x77, 0x77, 0xd1, 0x7b, 0x83,
	0xd6, 0xef, 0x92, 0xd2, 0xd2, 0xfb, 0x57, 0x4f, 0x20, 0x8f, 0xf0, 0xba, 0x38, 0xc2, 0x14, 0xaa,
	0x5c, 0x70, 0x84, 0x58, 0x95, 0xd1, 0x0f, 0x0a, 0xe4, 0xe4, 0x45, 0x47, 0x03, 0xf0, 0x6b, 0x0c,
	0x34, 0xa0, 0x5d, 0x4a, 0xa2, 0x4e, 0x0b, 0x74, 0x65, 0x34, 0xde, 0x35, 0x14, 0xa6, 0x14, 0x47,
	0x31, 0x1c, 0x4b, 0x9f, 0x1e, 0x1e, 0x95, 0x95, 0x67, 0x47, 0x65, 0xe5, 0xaf, 0xa3, 0xb2, 0xf2,
	0xe4, 0xb8, 0x9c, 0x7a, 0x76, 0x5c, 0x4e, 0xfd, 0x71, 0x5c, 0x4e, 0x3d, 0xbc, 0x6b, 0x53, 0xbe,
	0xd3, 0x6e, 0x54, 0x9b, 0x9e, 0xa3, 0x45, 0xe5, 0xef, 0xb4, 0x70, 0x83, 0xc5, 0xcf, 0x89, 0x0f,
	0xe7, 0xbd, 0x73, 0x3e, 0x9d, 0x1b, 0x59, 0xa1, 0xdd, 0x0b, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff,
	0x02, 0x28, 0xac, 0x98, 0x8d, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ListCSP returns the list of credential schema permissions.
	ListCSP(ctx context.Context, in *QueryListCSPRequest, opts ...grpc.CallOption) (*QueryListCSPResponse, error)
	// GetCSP returns credential schema permission by ID
	GetCSP(ctx context.Context, in *QueryGetCSPRequest, opts ...grpc.CallOption) (*QueryGetCSPResponse, error)
	// IsAuthorizedIssuer checks if a DID is authorized to issue credentials
	IsAuthorizedIssuer(ctx context.Context, in *QueryIsAuthorizedIssuerRequest, opts ...grpc.CallOption) (*QueryIsAuthorizedIssuerResponse, error)
	IsAuthorizedVerifier(ctx context.Context, in *QueryIsAuthorizedVerifierRequest, opts ...grpc.CallOption) (*QueryIsAuthorizedVerifierResponse, error)
	GetCSPS(ctx context.Context, in *QueryGetCSPSRequest, opts ...grpc.CallOption) (*QueryGetCSPSResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.cspermission.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListCSP(ctx context.Context, in *QueryListCSPRequest, opts ...grpc.CallOption) (*QueryListCSPResponse, error) {
	out := new(QueryListCSPResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.cspermission.Query/ListCSP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCSP(ctx context.Context, in *QueryGetCSPRequest, opts ...grpc.CallOption) (*QueryGetCSPResponse, error) {
	out := new(QueryGetCSPResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.cspermission.Query/GetCSP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsAuthorizedIssuer(ctx context.Context, in *QueryIsAuthorizedIssuerRequest, opts ...grpc.CallOption) (*QueryIsAuthorizedIssuerResponse, error) {
	out := new(QueryIsAuthorizedIssuerResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.cspermission.Query/IsAuthorizedIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsAuthorizedVerifier(ctx context.Context, in *QueryIsAuthorizedVerifierRequest, opts ...grpc.CallOption) (*QueryIsAuthorizedVerifierResponse, error) {
	out := new(QueryIsAuthorizedVerifierResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.cspermission.Query/IsAuthorizedVerifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCSPS(ctx context.Context, in *QueryGetCSPSRequest, opts ...grpc.CallOption) (*QueryGetCSPSResponse, error) {
	out := new(QueryGetCSPSResponse)
	err := c.cc.Invoke(ctx, "/veranablockchain.cspermission.Query/GetCSPS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ListCSP returns the list of credential schema permissions.
	ListCSP(context.Context, *QueryListCSPRequest) (*QueryListCSPResponse, error)
	// GetCSP returns credential schema permission by ID
	GetCSP(context.Context, *QueryGetCSPRequest) (*QueryGetCSPResponse, error)
	// IsAuthorizedIssuer checks if a DID is authorized to issue credentials
	IsAuthorizedIssuer(context.Context, *QueryIsAuthorizedIssuerRequest) (*QueryIsAuthorizedIssuerResponse, error)
	IsAuthorizedVerifier(context.Context, *QueryIsAuthorizedVerifierRequest) (*QueryIsAuthorizedVerifierResponse, error)
	GetCSPS(context.Context, *QueryGetCSPSRequest) (*QueryGetCSPSResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ListCSP(ctx context.Context, req *QueryListCSPRequest) (*QueryListCSPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCSP not implemented")
}
func (*UnimplementedQueryServer) GetCSP(ctx context.Context, req *QueryGetCSPRequest) (*QueryGetCSPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCSP not implemented")
}
func (*UnimplementedQueryServer) IsAuthorizedIssuer(ctx context.Context, req *QueryIsAuthorizedIssuerRequest) (*QueryIsAuthorizedIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthorizedIssuer not implemented")
}
func (*UnimplementedQueryServer) IsAuthorizedVerifier(ctx context.Context, req *QueryIsAuthorizedVerifierRequest) (*QueryIsAuthorizedVerifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthorizedVerifier not implemented")
}
func (*UnimplementedQueryServer) GetCSPS(ctx context.Context, req *QueryGetCSPSRequest) (*QueryGetCSPSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCSPS not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.cspermission.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListCSP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListCSPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListCSP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.cspermission.Query/ListCSP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListCSP(ctx, req.(*QueryListCSPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCSP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCSPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCSP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.cspermission.Query/GetCSP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCSP(ctx, req.(*QueryGetCSPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsAuthorizedIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsAuthorizedIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsAuthorizedIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.cspermission.Query/IsAuthorizedIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsAuthorizedIssuer(ctx, req.(*QueryIsAuthorizedIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsAuthorizedVerifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsAuthorizedVerifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsAuthorizedVerifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.cspermission.Query/IsAuthorizedVerifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsAuthorizedVerifier(ctx, req.(*QueryIsAuthorizedVerifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCSPS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCSPSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCSPS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veranablockchain.cspermission.Query/GetCSPS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCSPS(ctx, req.(*QueryGetCSPSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veranablockchain.cspermission.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ListCSP",
			Handler:    _Query_ListCSP_Handler,
		},
		{
			MethodName: "GetCSP",
			Handler:    _Query_GetCSP_Handler,
		},
		{
			MethodName: "IsAuthorizedIssuer",
			Handler:    _Query_IsAuthorizedIssuer_Handler,
		},
		{
			MethodName: "IsAuthorizedVerifier",
			Handler:    _Query_IsAuthorizedVerifier_Handler,
		},
		{
			MethodName: "GetCSPS",
			Handler:    _Query_GetCSPS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "veranablockchain/cspermission/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListCSPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListCSPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListCSPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResponseMaxSize != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ResponseMaxSize))
		i--
		dAtA[i] = 0x30
	}
	if m.Type != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Grantee) > 0 {
		i -= len(m.Grantee)
		copy(dAtA[i:], m.Grantee)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Grantee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.SchemaId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SchemaId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryListCSPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListCSPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListCSPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Permissions) > 0 {
		for iNdEx := len(m.Permissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Permissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCSPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCSPRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCSPRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCSPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCSPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCSPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Permission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryIsAuthorizedIssuerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsAuthorizedIssuerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsAuthorizedIssuerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x38
	}
	if m.When != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.When, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.When):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintQuery(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SchemaId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SchemaId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.WalletUserAgentDid) > 0 {
		i -= len(m.WalletUserAgentDid)
		copy(dAtA[i:], m.WalletUserAgentDid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletUserAgentDid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserAgentDid) > 0 {
		i -= len(m.UserAgentDid)
		copy(dAtA[i:], m.UserAgentDid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAgentDid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IssuerDid) > 0 {
		i -= len(m.IssuerDid)
		copy(dAtA[i:], m.IssuerDid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IssuerDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsAuthorizedIssuerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsAuthorizedIssuerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsAuthorizedIssuerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsAuthorizedVerifierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsAuthorizedVerifierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsAuthorizedVerifierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x40
	}
	if m.When != nil {
		n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.When, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.When):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintQuery(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x32
	}
	if m.SchemaId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SchemaId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.WalletUserAgentDid) > 0 {
		i -= len(m.WalletUserAgentDid)
		copy(dAtA[i:], m.WalletUserAgentDid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletUserAgentDid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserAgentDid) > 0 {
		i -= len(m.UserAgentDid)
		copy(dAtA[i:], m.UserAgentDid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAgentDid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IssuerDid) > 0 {
		i -= len(m.IssuerDid)
		copy(dAtA[i:], m.IssuerDid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IssuerDid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VerifierDid) > 0 {
		i -= len(m.VerifierDid)
		copy(dAtA[i:], m.VerifierDid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VerifierDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsAuthorizedVerifierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsAuthorizedVerifierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsAuthorizedVerifierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCSPSRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCSPSRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCSPSRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCSPSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCSPSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCSPSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Csps != nil {
		{
			size, err := m.Csps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListCSPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchemaId != 0 {
		n += 1 + sovQuery(uint64(m.SchemaId))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Grantee)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovQuery(uint64(m.Type))
	}
	if m.ResponseMaxSize != 0 {
		n += 1 + sovQuery(uint64(m.ResponseMaxSize))
	}
	return n
}

func (m *QueryListCSPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Permissions) > 0 {
		for _, e := range m.Permissions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetCSPRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCSPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Permission.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryIsAuthorizedIssuerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerDid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserAgentDid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.WalletUserAgentDid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.SchemaId != 0 {
		n += 1 + sovQuery(uint64(m.SchemaId))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.When != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.When)
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.SessionId != 0 {
		n += 1 + sovQuery(uint64(m.SessionId))
	}
	return n
}

func (m *QueryIsAuthorizedIssuerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *QueryIsAuthorizedVerifierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VerifierDid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.IssuerDid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserAgentDid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.WalletUserAgentDid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.SchemaId != 0 {
		n += 1 + sovQuery(uint64(m.SchemaId))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.When != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.When)
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.SessionId != 0 {
		n += 1 + sovQuery(uint64(m.SessionId))
	}
	return n
}

func (m *QueryIsAuthorizedVerifierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *QueryGetCSPSRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCSPSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Csps != nil {
		l = m.Csps.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListCSPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListCSPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListCSPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaId", wireType)
			}
			m.SchemaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grantee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CredentialSchemaPermType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseMaxSize", wireType)
			}
			m.ResponseMaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseMaxSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListCSPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListCSPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListCSPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permissions = append(m.Permissions, CredentialSchemaPerm{})
			if err := m.Permissions[len(m.Permissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCSPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCSPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCSPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCSPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCSPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCSPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Permission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsAuthorizedIssuerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsAuthorizedIssuerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsAuthorizedIssuerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgentDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgentDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletUserAgentDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletUserAgentDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaId", wireType)
			}
			m.SchemaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field When", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.When == nil {
				m.When = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.When, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsAuthorizedIssuerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsAuthorizedIssuerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsAuthorizedIssuerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AuthorizationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsAuthorizedVerifierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsAuthorizedVerifierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsAuthorizedVerifierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifierDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifierDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgentDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgentDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletUserAgentDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletUserAgentDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaId", wireType)
			}
			m.SchemaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field When", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.When == nil {
				m.When = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.When, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsAuthorizedVerifierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsAuthorizedVerifierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsAuthorizedVerifierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AuthorizationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCSPSRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCSPSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCSPSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCSPSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCSPSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCSPSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Csps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Csps == nil {
				m.Csps = &CredentialSchemaPermSession{}
			}
			if err := m.Csps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
