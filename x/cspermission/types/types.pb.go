// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: veranablockchain/cspermission/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CredentialSchemaPermType int32

const (
	CredentialSchemaPermType_UNSPECIFIED      CredentialSchemaPermType = 0
	CredentialSchemaPermType_ISSUER           CredentialSchemaPermType = 1
	CredentialSchemaPermType_VERIFIER         CredentialSchemaPermType = 2
	CredentialSchemaPermType_ISSUER_GRANTOR   CredentialSchemaPermType = 3
	CredentialSchemaPermType_VERIFIER_GRANTOR CredentialSchemaPermType = 4
	CredentialSchemaPermType_TRUST_REGISTRY   CredentialSchemaPermType = 5
	CredentialSchemaPermType_HOLDER           CredentialSchemaPermType = 6
)

var CredentialSchemaPermType_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "ISSUER",
	2: "VERIFIER",
	3: "ISSUER_GRANTOR",
	4: "VERIFIER_GRANTOR",
	5: "TRUST_REGISTRY",
	6: "HOLDER",
}

var CredentialSchemaPermType_value = map[string]int32{
	"UNSPECIFIED":      0,
	"ISSUER":           1,
	"VERIFIER":         2,
	"ISSUER_GRANTOR":   3,
	"VERIFIER_GRANTOR": 4,
	"TRUST_REGISTRY":   5,
	"HOLDER":           6,
}

func (x CredentialSchemaPermType) String() string {
	return proto.EnumName(CredentialSchemaPermType_name, int32(x))
}

func (CredentialSchemaPermType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_30b2121bf5f43f1c, []int{0}
}

type CredentialSchemaPerm struct {
	Id       uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SchemaId uint64                   `protobuf:"varint,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	CspType  CredentialSchemaPermType `protobuf:"varint,3,opt,name=csp_type,json=cspType,proto3,enum=veranablockchain.cspermission.CredentialSchemaPermType" json:"csp_type,omitempty"`
	Did      string                   `protobuf:"bytes,4,opt,name=did,proto3" json:"did,omitempty"`
	Grantee  string                   `protobuf:"bytes,5,opt,name=grantee,proto3" json:"grantee,omitempty"`
	// Required fields are non-nullable
	Created       time.Time `protobuf:"bytes,6,opt,name=created,proto3,stdtime" json:"created"`
	CreatedBy     string    `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	EffectiveFrom time.Time `protobuf:"bytes,8,opt,name=effective_from,json=effectiveFrom,proto3,stdtime" json:"effective_from"`
	// Optional fields are nullable
	EffectiveUntil   *time.Time `protobuf:"bytes,9,opt,name=effective_until,json=effectiveUntil,proto3,stdtime" json:"effective_until,omitempty"`
	ValidationId     uint64     `protobuf:"varint,10,opt,name=validation_id,json=validationId,proto3" json:"validation_id,omitempty"`
	ValidationFees   uint64     `protobuf:"varint,11,opt,name=validation_fees,json=validationFees,proto3" json:"validation_fees,omitempty"`
	IssuanceFees     uint64     `protobuf:"varint,12,opt,name=issuance_fees,json=issuanceFees,proto3" json:"issuance_fees,omitempty"`
	VerificationFees uint64     `protobuf:"varint,13,opt,name=verification_fees,json=verificationFees,proto3" json:"verification_fees,omitempty"`
	Deposit          int64      `protobuf:"varint,14,opt,name=deposit,proto3" json:"deposit,omitempty"`
	// Optional state fields are nullable
	Revoked      *time.Time `protobuf:"bytes,15,opt,name=revoked,proto3,stdtime" json:"revoked,omitempty"`
	RevokedBy    string     `protobuf:"bytes,16,opt,name=revoked_by,json=revokedBy,proto3" json:"revoked_by,omitempty"`
	Terminated   *time.Time `protobuf:"bytes,17,opt,name=terminated,proto3,stdtime" json:"terminated,omitempty"`
	TerminatedBy string     `protobuf:"bytes,18,opt,name=terminated_by,json=terminatedBy,proto3" json:"terminated_by,omitempty"`
	Country      string     `protobuf:"bytes,19,opt,name=country,proto3" json:"country,omitempty"`
}

func (m *CredentialSchemaPerm) Reset()         { *m = CredentialSchemaPerm{} }
func (m *CredentialSchemaPerm) String() string { return proto.CompactTextString(m) }
func (*CredentialSchemaPerm) ProtoMessage()    {}
func (*CredentialSchemaPerm) Descriptor() ([]byte, []int) {
	return fileDescriptor_30b2121bf5f43f1c, []int{0}
}
func (m *CredentialSchemaPerm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialSchemaPerm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialSchemaPerm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialSchemaPerm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialSchemaPerm.Merge(m, src)
}
func (m *CredentialSchemaPerm) XXX_Size() int {
	return m.Size()
}
func (m *CredentialSchemaPerm) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialSchemaPerm.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialSchemaPerm proto.InternalMessageInfo

func (m *CredentialSchemaPerm) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CredentialSchemaPerm) GetSchemaId() uint64 {
	if m != nil {
		return m.SchemaId
	}
	return 0
}

func (m *CredentialSchemaPerm) GetCspType() CredentialSchemaPermType {
	if m != nil {
		return m.CspType
	}
	return CredentialSchemaPermType_UNSPECIFIED
}

func (m *CredentialSchemaPerm) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *CredentialSchemaPerm) GetGrantee() string {
	if m != nil {
		return m.Grantee
	}
	return ""
}

func (m *CredentialSchemaPerm) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *CredentialSchemaPerm) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *CredentialSchemaPerm) GetEffectiveFrom() time.Time {
	if m != nil {
		return m.EffectiveFrom
	}
	return time.Time{}
}

func (m *CredentialSchemaPerm) GetEffectiveUntil() *time.Time {
	if m != nil {
		return m.EffectiveUntil
	}
	return nil
}

func (m *CredentialSchemaPerm) GetValidationId() uint64 {
	if m != nil {
		return m.ValidationId
	}
	return 0
}

func (m *CredentialSchemaPerm) GetValidationFees() uint64 {
	if m != nil {
		return m.ValidationFees
	}
	return 0
}

func (m *CredentialSchemaPerm) GetIssuanceFees() uint64 {
	if m != nil {
		return m.IssuanceFees
	}
	return 0
}

func (m *CredentialSchemaPerm) GetVerificationFees() uint64 {
	if m != nil {
		return m.VerificationFees
	}
	return 0
}

func (m *CredentialSchemaPerm) GetDeposit() int64 {
	if m != nil {
		return m.Deposit
	}
	return 0
}

func (m *CredentialSchemaPerm) GetRevoked() *time.Time {
	if m != nil {
		return m.Revoked
	}
	return nil
}

func (m *CredentialSchemaPerm) GetRevokedBy() string {
	if m != nil {
		return m.RevokedBy
	}
	return ""
}

func (m *CredentialSchemaPerm) GetTerminated() *time.Time {
	if m != nil {
		return m.Terminated
	}
	return nil
}

func (m *CredentialSchemaPerm) GetTerminatedBy() string {
	if m != nil {
		return m.TerminatedBy
	}
	return ""
}

func (m *CredentialSchemaPerm) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func init() {
	proto.RegisterEnum("veranablockchain.cspermission.CredentialSchemaPermType", CredentialSchemaPermType_name, CredentialSchemaPermType_value)
	proto.RegisterType((*CredentialSchemaPerm)(nil), "veranablockchain.cspermission.CredentialSchemaPerm")
}

func init() {
	proto.RegisterFile("veranablockchain/cspermission/types.proto", fileDescriptor_30b2121bf5f43f1c)
}

var fileDescriptor_30b2121bf5f43f1c = []byte{
	// 707 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x4e, 0x1b, 0x49,
	0x10, 0xf6, 0xd8, 0xc6, 0x3f, 0x85, 0x7f, 0x86, 0x5e, 0x1f, 0x7a, 0xd9, 0x5d, 0x63, 0xed, 0x1e,
	0xd6, 0xec, 0x8a, 0xb1, 0x44, 0x0e, 0x1c, 0xa2, 0x44, 0xc2, 0x60, 0x88, 0x95, 0x04, 0x50, 0xdb,
	0x4e, 0x94, 0x5c, 0xac, 0xf1, 0x4c, 0xdb, 0xb4, 0xf0, 0x4c, 0x8f, 0xa6, 0xdb, 0x56, 0xfc, 0x14,
	0xe1, 0x61, 0xf2, 0x10, 0x1c, 0x51, 0x4e, 0x9c, 0x92, 0x08, 0x5e, 0x24, 0xea, 0x1e, 0x0f, 0xb6,
	0x22, 0x48, 0xe0, 0x62, 0x55, 0x7d, 0xf5, 0x7d, 0x55, 0xdd, 0xf5, 0x8d, 0x1b, 0x36, 0xa7, 0x34,
	0xb4, 0x7d, 0x7b, 0x30, 0xe6, 0xce, 0x99, 0x73, 0x6a, 0x33, 0xbf, 0xe1, 0x88, 0x80, 0x86, 0x1e,
	0x13, 0x82, 0x71, 0xbf, 0x21, 0x67, 0x01, 0x15, 0x56, 0x10, 0x72, 0xc9, 0xd1, 0x5f, 0x3f, 0x52,
	0xad, 0x65, 0xea, 0xfa, 0x9a, 0xed, 0x31, 0x9f, 0x37, 0xf4, 0x6f, 0xa4, 0x58, 0xaf, 0x8c, 0xf8,
	0x88, 0xeb, 0xb0, 0xa1, 0xa2, 0x39, 0xba, 0x31, 0xe2, 0x7c, 0x34, 0xa6, 0x0d, 0x9d, 0x0d, 0x26,
	0xc3, 0x86, 0x64, 0x1e, 0x15, 0xd2, 0xf6, 0x82, 0x39, 0xe1, 0x77, 0x87, 0x0b, 0x8f, 0x8b, 0x7e,
	0xa4, 0x8c, 0x92, 0xa8, 0xf4, 0xf7, 0x55, 0x16, 0x2a, 0x7b, 0x21, 0x75, 0xa9, 0x2f, 0x99, 0x3d,
	0xee, 0x38, 0xa7, 0xd4, 0xb3, 0x4f, 0x68, 0xe8, 0xa1, 0x12, 0x24, 0x99, 0x8b, 0x8d, 0x9a, 0x51,
	0x4f, 0x93, 0x24, 0x73, 0xd1, 0x1f, 0x90, 0x17, 0xba, 0xda, 0x67, 0x2e, 0x4e, 0x6a, 0x38, 0x17,
	0x01, 0x6d, 0x17, 0x11, 0xc8, 0x39, 0x22, 0xe8, 0xab, 0xcb, 0xe1, 0x54, 0xcd, 0xa8, 0x97, 0xb6,
	0x77, 0xac, 0x9f, 0x5e, 0xce, 0xba, 0x6b, 0x66, 0x77, 0x16, 0x50, 0x92, 0x75, 0x44, 0xa0, 0x02,
	0x64, 0x42, 0xca, 0x65, 0x2e, 0x4e, 0xd7, 0x8c, 0x7a, 0x9e, 0xa8, 0x10, 0x6d, 0x43, 0x76, 0x14,
	0xda, 0xbe, 0xa4, 0x14, 0xaf, 0x28, 0xb4, 0x89, 0x3f, 0x7f, 0xda, 0xaa, 0xcc, 0xaf, 0xb3, 0xeb,
	0xba, 0x21, 0x15, 0xa2, 0x23, 0x43, 0xe6, 0x8f, 0x48, 0x4c, 0x44, 0xcf, 0x21, 0xeb, 0x84, 0xd4,
	0x96, 0xd4, 0xc5, 0x99, 0x9a, 0x51, 0x5f, 0xdd, 0x5e, 0xb7, 0xa2, 0x6d, 0x59, 0xf1, 0xb6, 0xac,
	0x6e, 0xbc, 0xad, 0x66, 0xee, 0xe2, 0xcb, 0x46, 0xe2, 0xfc, 0xeb, 0x86, 0x41, 0x62, 0x11, 0xda,
	0x01, 0x98, 0x87, 0xfd, 0xc1, 0x0c, 0x67, 0x7f, 0x31, 0x36, 0x3f, 0xe7, 0x36, 0x67, 0xe8, 0x25,
	0x94, 0xe8, 0x70, 0x48, 0x1d, 0xc9, 0xa6, 0xb4, 0x3f, 0x0c, 0xb9, 0x87, 0x73, 0x8f, 0x98, 0x5f,
	0xbc, 0xd5, 0x1e, 0x84, 0xdc, 0x43, 0xaf, 0xa1, 0xbc, 0x68, 0x36, 0xf1, 0x25, 0x1b, 0xe3, 0xfc,
	0x83, 0xba, 0x19, 0xba, 0xdb, 0xe2, 0x24, 0x3d, 0xa5, 0x45, 0x9b, 0x50, 0x9c, 0xda, 0x63, 0xe6,
	0xda, 0x92, 0x71, 0x5f, 0xf9, 0x09, 0xca, 0xcf, 0x66, 0x5a, 0x09, 0x48, 0x61, 0x51, 0x6a, 0xbb,
	0xe8, 0x5f, 0x28, 0x2f, 0x51, 0x87, 0x94, 0x0a, 0xbc, 0xaa, 0xcd, 0x2f, 0x2d, 0xe0, 0x03, 0x4a,
	0x05, 0xfa, 0x07, 0x8a, 0x4c, 0x88, 0x89, 0xed, 0x3b, 0x34, 0xa2, 0x15, 0x34, 0xad, 0x10, 0x83,
	0x9a, 0xf4, 0x3f, 0xac, 0x4d, 0x69, 0xc8, 0x86, 0xcc, 0x59, 0xea, 0x57, 0xd4, 0x44, 0x73, 0xb9,
	0xa0, 0xc9, 0x18, 0xb2, 0x2e, 0x0d, 0xb8, 0x60, 0x12, 0x97, 0x6a, 0x46, 0x3d, 0x45, 0xe2, 0x54,
	0x99, 0x1a, 0xd2, 0x29, 0x3f, 0xa3, 0x2e, 0x2e, 0x3f, 0x62, 0x0d, 0xb1, 0x08, 0x3d, 0x05, 0x98,
	0x87, 0xca, 0x54, 0x53, 0x9b, 0xfa, 0xa7, 0xa2, 0xdd, 0x6f, 0xec, 0x9c, 0xdf, 0x9c, 0xa1, 0x7d,
	0x00, 0xa9, 0xbe, 0x63, 0x5f, 0x7f, 0x54, 0x6b, 0x8f, 0x98, 0xbf, 0xa4, 0x43, 0xbb, 0x50, 0x5c,
	0x64, 0xea, 0x14, 0xe8, 0x01, 0xa7, 0x28, 0x2c, 0x24, 0xcd, 0x19, 0xaa, 0x42, 0xd6, 0xe1, 0x13,
	0x5f, 0x86, 0x33, 0xfc, 0x9b, 0x16, 0x47, 0xfe, 0xc5, 0xe0, 0x7f, 0x1f, 0x0d, 0xc0, 0xf7, 0xfd,
	0xcd, 0x50, 0x19, 0x56, 0x7b, 0x47, 0x9d, 0x93, 0xd6, 0x5e, 0xfb, 0xa0, 0xdd, 0xda, 0x37, 0x13,
	0x08, 0x20, 0xd3, 0xee, 0x74, 0x7a, 0x2d, 0x62, 0x1a, 0xa8, 0x00, 0xb9, 0x37, 0x2d, 0xa2, 0x2a,
	0xc4, 0x4c, 0x22, 0x04, 0xa5, 0xa8, 0xd2, 0x3f, 0x24, 0xbb, 0x47, 0xdd, 0x63, 0x62, 0xa6, 0x50,
	0x05, 0xcc, 0x98, 0x71, 0x8b, 0xa6, 0x15, 0xb3, 0x4b, 0x7a, 0x9d, 0x6e, 0x9f, 0xb4, 0x0e, 0xdb,
	0x9d, 0x2e, 0x79, 0x67, 0xae, 0xa8, 0xbe, 0x2f, 0x8e, 0x5f, 0xed, 0xb7, 0x88, 0x99, 0x69, 0xbe,
	0xbd, 0xb8, 0xae, 0x1a, 0x97, 0xd7, 0x55, 0xe3, 0xdb, 0x75, 0xd5, 0x38, 0xbf, 0xa9, 0x26, 0x2e,
	0x6f, 0xaa, 0x89, 0xab, 0x9b, 0x6a, 0xe2, 0xfd, 0xb3, 0x11, 0x93, 0xa7, 0x93, 0x81, 0xe5, 0x70,
	0xaf, 0x11, 0x3d, 0x1c, 0x5b, 0x63, 0x7b, 0x20, 0xe2, 0x78, 0xe9, 0x35, 0xfd, 0x70, 0xc7, 0x7b,
	0x3a, 0xc8, 0xe8, 0xbd, 0x3f, 0xf9, 0x1e, 0x00, 0x00, 0xff, 0xff, 0xa2, 0xd8, 0xef, 0xe2, 0x7d,
	0x05, 0x00, 0x00,
}

func (m *CredentialSchemaPerm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialSchemaPerm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialSchemaPerm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.TerminatedBy) > 0 {
		i -= len(m.TerminatedBy)
		copy(dAtA[i:], m.TerminatedBy)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TerminatedBy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Terminated != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.Terminated, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Terminated):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintTypes(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.RevokedBy) > 0 {
		i -= len(m.RevokedBy)
		copy(dAtA[i:], m.RevokedBy)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RevokedBy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Revoked != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.Revoked, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Revoked):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintTypes(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x7a
	}
	if m.Deposit != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Deposit))
		i--
		dAtA[i] = 0x70
	}
	if m.VerificationFees != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VerificationFees))
		i--
		dAtA[i] = 0x68
	}
	if m.IssuanceFees != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IssuanceFees))
		i--
		dAtA[i] = 0x60
	}
	if m.ValidationFees != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidationFees))
		i--
		dAtA[i] = 0x58
	}
	if m.ValidationId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidationId))
		i--
		dAtA[i] = 0x50
	}
	if m.EffectiveUntil != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.EffectiveUntil, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EffectiveUntil):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintTypes(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x4a
	}
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EffectiveFrom, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EffectiveFrom):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintTypes(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x42
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x3a
	}
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Created):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintTypes(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x32
	if len(m.Grantee) > 0 {
		i -= len(m.Grantee)
		copy(dAtA[i:], m.Grantee)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Grantee)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x22
	}
	if m.CspType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CspType))
		i--
		dAtA[i] = 0x18
	}
	if m.SchemaId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SchemaId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CredentialSchemaPerm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if m.SchemaId != 0 {
		n += 1 + sovTypes(uint64(m.SchemaId))
	}
	if m.CspType != 0 {
		n += 1 + sovTypes(uint64(m.CspType))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Grantee)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EffectiveFrom)
	n += 1 + l + sovTypes(uint64(l))
	if m.EffectiveUntil != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EffectiveUntil)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ValidationId != 0 {
		n += 1 + sovTypes(uint64(m.ValidationId))
	}
	if m.ValidationFees != 0 {
		n += 1 + sovTypes(uint64(m.ValidationFees))
	}
	if m.IssuanceFees != 0 {
		n += 1 + sovTypes(uint64(m.IssuanceFees))
	}
	if m.VerificationFees != 0 {
		n += 1 + sovTypes(uint64(m.VerificationFees))
	}
	if m.Deposit != 0 {
		n += 1 + sovTypes(uint64(m.Deposit))
	}
	if m.Revoked != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Revoked)
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.RevokedBy)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.Terminated != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Terminated)
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.TerminatedBy)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CredentialSchemaPerm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialSchemaPerm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialSchemaPerm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaId", wireType)
			}
			m.SchemaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CspType", wireType)
			}
			m.CspType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CspType |= CredentialSchemaPermType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grantee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveFrom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EffectiveFrom, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveUntil == nil {
				m.EffectiveUntil = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.EffectiveUntil, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationId", wireType)
			}
			m.ValidationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationFees", wireType)
			}
			m.ValidationFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidationFees |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuanceFees", wireType)
			}
			m.IssuanceFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuanceFees |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationFees", wireType)
			}
			m.VerificationFees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerificationFees |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			m.Deposit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deposit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Revoked == nil {
				m.Revoked = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.Revoked, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevokedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Terminated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Terminated == nil {
				m.Terminated = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.Terminated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
